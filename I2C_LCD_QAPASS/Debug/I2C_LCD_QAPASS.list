
I2C_LCD_QAPASS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001950  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001b48  08001b48  00011b48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001b74  08001b74  00011b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001b7c  08001b7c  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001b80  08001b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000070  2000000c  08001b90  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000007c  08001b90  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ad8a  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019b1  00000000  00000000  0002adc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000054ac  00000000  00000000  0002c775  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006e8  00000000  00000000  00031c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009a0  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000041dd  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002d3b  00000000  00000000  00036e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00039bc8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000013b8  00000000  00000000  00039c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001b30 	.word	0x08001b30

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001b30 	.word	0x08001b30

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f890 	bl	8000684 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f84e 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 f9f3 	bl	8001988 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800063a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000640:	ea01 0103 	and.w	r1, r1, r3
 8000644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800065c:	db07      	blt.n	800066e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000668:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f000 000f 	and.w	r0, r0, #15
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_NVIC_SetPriority+0x6c>)
 8000676:	541a      	strb	r2, [r3, r0]
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	680b      	ldr	r3, [r1, #0]
{
 80006b6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800087c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006bc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006be:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c0:	4a6c      	ldr	r2, [pc, #432]	; (8000874 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006c2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000880 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80006c6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006cc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006d4:	45b6      	cmp	lr, r6
 80006d6:	f040 80b3 	bne.w	8000840 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006da:	684c      	ldr	r4, [r1, #4]
 80006dc:	f024 0710 	bic.w	r7, r4, #16
 80006e0:	2f02      	cmp	r7, #2
 80006e2:	d116      	bne.n	8000712 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006e8:	f003 0b07 	and.w	fp, r3, #7
 80006ec:	f04f 0c0f 	mov.w	ip, #15
 80006f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80006f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80006f8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006fc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000700:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000704:	690d      	ldr	r5, [r1, #16]
 8000706:	fa05 f50b 	lsl.w	r5, r5, fp
 800070a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800070e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000712:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000716:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000718:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800071c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000720:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000726:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000732:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000736:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073a:	d811      	bhi.n	8000760 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800073c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800073e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000742:	68cf      	ldr	r7, [r1, #12]
 8000744:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000748:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800074c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000750:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000754:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000758:	409f      	lsls	r7, r3
 800075a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800075e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000762:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000764:	688f      	ldr	r7, [r1, #8]
 8000766:	fa07 f70a 	lsl.w	r7, r7, sl
 800076a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800076c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076e:	00e5      	lsls	r5, r4, #3
 8000770:	d566      	bpl.n	8000840 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000776:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800077a:	f003 0e03 	and.w	lr, r3, #3
 800077e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000786:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800078a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000792:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000796:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800079a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800079e:	9503      	str	r5, [sp, #12]
 80007a0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007a2:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007aa:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007ae:	4d32      	ldr	r5, [pc, #200]	; (8000878 <HAL_GPIO_Init+0x1c8>)
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d04c      	beq.n	800084e <HAL_GPIO_Init+0x19e>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d04a      	beq.n	8000852 <HAL_GPIO_Init+0x1a2>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d048      	beq.n	8000856 <HAL_GPIO_Init+0x1a6>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d046      	beq.n	800085a <HAL_GPIO_Init+0x1aa>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	d044      	beq.n	800085e <HAL_GPIO_Init+0x1ae>
 80007d4:	4548      	cmp	r0, r9
 80007d6:	d044      	beq.n	8000862 <HAL_GPIO_Init+0x1b2>
 80007d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d042      	beq.n	8000866 <HAL_GPIO_Init+0x1b6>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d040      	beq.n	800086a <HAL_GPIO_Init+0x1ba>
 80007e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	d03e      	beq.n	800086e <HAL_GPIO_Init+0x1be>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	bf14      	ite	ne
 80007f8:	250a      	movne	r5, #10
 80007fa:	2509      	moveq	r5, #9
 80007fc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000800:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000804:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000808:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800080a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800080e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf0c      	ite	eq
 8000812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000814:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800081a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800081c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf0c      	ite	eq
 8000820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000824:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000828:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800082a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800082c:	bf0c      	ite	eq
 800082e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000830:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000834:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000836:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000838:	bf54      	ite	pl
 800083a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800083c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800083e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000840:	3301      	adds	r3, #1
 8000842:	2b10      	cmp	r3, #16
 8000844:	f47f af3f 	bne.w	80006c6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000848:	b005      	add	sp, #20
 800084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800084e:	2500      	movs	r5, #0
 8000850:	e7d4      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000852:	2501      	movs	r5, #1
 8000854:	e7d2      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000856:	2502      	movs	r5, #2
 8000858:	e7d0      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800085a:	2503      	movs	r5, #3
 800085c:	e7ce      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800085e:	2504      	movs	r5, #4
 8000860:	e7cc      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000862:	2505      	movs	r5, #5
 8000864:	e7ca      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000866:	2506      	movs	r5, #6
 8000868:	e7c8      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800086a:	2507      	movs	r5, #7
 800086c:	e7c6      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800086e:	2508      	movs	r5, #8
 8000870:	e7c4      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000872:	bf00      	nop
 8000874:	40013c00 	.word	0x40013c00
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400

08000884 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000884:	b10a      	cbz	r2, 800088a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000886:	6181      	str	r1, [r0, #24]
 8000888:	4770      	bx	lr
 800088a:	0409      	lsls	r1, r1, #16
 800088c:	e7fb      	b.n	8000886 <HAL_GPIO_WritePin+0x2>

0800088e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	0791      	lsls	r1, r2, #30
 8000894:	d501      	bpl.n	800089a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	07d2      	lsls	r2, r2, #31
 800089e:	d403      	bmi.n	80008a8 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	619a      	str	r2, [r3, #24]
 80008a8:	4770      	bx	lr

080008aa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80008aa:	b530      	push	{r4, r5, lr}
 80008ac:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80008ae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80008b2:	6805      	ldr	r5, [r0, #0]
 80008b4:	4323      	orrs	r3, r4
 80008b6:	0d64      	lsrs	r4, r4, #21
 80008b8:	6868      	ldr	r0, [r5, #4]
 80008ba:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80008be:	4319      	orrs	r1, r3
 80008c0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80008c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80008c8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80008cc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80008d0:	f044 0403 	orr.w	r4, r4, #3
 80008d4:	ea20 0404 	bic.w	r4, r0, r4
 80008d8:	4321      	orrs	r1, r4
 80008da:	6069      	str	r1, [r5, #4]
 80008dc:	bd30      	pop	{r4, r5, pc}

080008de <I2C_WaitOnFlagUntilTimeout>:
{
 80008de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e2:	9f06      	ldr	r7, [sp, #24]
 80008e4:	4604      	mov	r4, r0
 80008e6:	4688      	mov	r8, r1
 80008e8:	4616      	mov	r6, r2
 80008ea:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008ec:	6822      	ldr	r2, [r4, #0]
 80008ee:	6993      	ldr	r3, [r2, #24]
 80008f0:	ea38 0303 	bics.w	r3, r8, r3
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	42b3      	cmp	r3, r6
 80008fc:	d002      	beq.n	8000904 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80008fe:	2000      	movs	r0, #0
}
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000904:	1c6b      	adds	r3, r5, #1
 8000906:	d0f2      	beq.n	80008ee <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000908:	f7ff fe5a 	bl	80005c0 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4285      	cmp	r5, r0
 8000910:	d301      	bcc.n	8000916 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000912:	2d00      	cmp	r5, #0
 8000914:	d1ea      	bne.n	80008ec <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000916:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000918:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000920:	2320      	movs	r3, #32
 8000922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800092c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000934 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000934:	6803      	ldr	r3, [r0, #0]
{
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800093a:	6998      	ldr	r0, [r3, #24]
{
 800093c:	460d      	mov	r5, r1
 800093e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000940:	f010 0010 	ands.w	r0, r0, #16
 8000944:	d116      	bne.n	8000974 <I2C_IsAcknowledgeFailed+0x40>
 8000946:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000948:	1c69      	adds	r1, r5, #1
 800094a:	d014      	beq.n	8000976 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800094c:	f7ff fe38 	bl	80005c0 <HAL_GetTick>
 8000950:	1b80      	subs	r0, r0, r6
 8000952:	4285      	cmp	r5, r0
 8000954:	d300      	bcc.n	8000958 <I2C_IsAcknowledgeFailed+0x24>
 8000956:	b96d      	cbnz	r5, 8000974 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000960:	2320      	movs	r3, #32
 8000962:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000966:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800096a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800096e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000972:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	6999      	ldr	r1, [r3, #24]
 8000978:	068a      	lsls	r2, r1, #26
 800097a:	d5e5      	bpl.n	8000948 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800097c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800097e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000980:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000982:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000984:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000986:	f7ff ff82 	bl	800088e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6853      	ldr	r3, [r2, #4]
 800098e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000992:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000996:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80009a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80009a8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80009ac:	e7db      	b.n	8000966 <I2C_IsAcknowledgeFailed+0x32>

080009ae <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80009ae:	b570      	push	{r4, r5, r6, lr}
 80009b0:	4604      	mov	r4, r0
 80009b2:	460d      	mov	r5, r1
 80009b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	079b      	lsls	r3, r3, #30
 80009bc:	d501      	bpl.n	80009c2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009c2:	4632      	mov	r2, r6
 80009c4:	4629      	mov	r1, r5
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff ffb4 	bl	8000934 <I2C_IsAcknowledgeFailed>
 80009cc:	b9a0      	cbnz	r0, 80009f8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80009ce:	1c6a      	adds	r2, r5, #1
 80009d0:	d0f1      	beq.n	80009b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d2:	f7ff fdf5 	bl	80005c0 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	4285      	cmp	r5, r0
 80009da:	d301      	bcc.n	80009e0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d1ea      	bne.n	80009b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009e8:	2320      	movs	r3, #32
 80009ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
}
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4604      	mov	r4, r0
 8000a00:	460d      	mov	r5, r1
 8000a02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	069b      	lsls	r3, r3, #26
 8000a0a:	d501      	bpl.n	8000a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a10:	4632      	mov	r2, r6
 8000a12:	4629      	mov	r1, r5
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ff8d 	bl	8000934 <I2C_IsAcknowledgeFailed>
 8000a1a:	b990      	cbnz	r0, 8000a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a1c:	f7ff fdd0 	bl	80005c0 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	4285      	cmp	r5, r0
 8000a24:	d301      	bcc.n	8000a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d1ec      	bne.n	8000a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a32:	2320      	movs	r3, #32
 8000a34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
}
 8000a44:	bd70      	pop	{r4, r5, r6, pc}

08000a46 <HAL_I2C_Init>:
{
 8000a46:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000a48:	4604      	mov	r4, r0
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d04a      	beq.n	8000ae4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a56:	b91b      	cbnz	r3, 8000a60 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000a58:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000a5c:	f000 ffac 	bl	80019b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a60:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a62:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a68:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a74:	6862      	ldr	r2, [r4, #4]
 8000a76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a86:	d124      	bne.n	8000ad2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a8e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a90:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a92:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a94:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a9c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000aa4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	69a1      	ldr	r1, [r4, #24]
 8000aac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ab0:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ab4:	69e2      	ldr	r2, [r4, #28]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	f042 0201 	orr.w	r2, r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000ac2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ac4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000aca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000acc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000ad0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ad6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ad8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ada:	d1d8      	bne.n	8000a8e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	e7d4      	b.n	8000a8e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000ae4:	2001      	movs	r0, #1
}
 8000ae6:	bd10      	pop	{r4, pc}

08000ae8 <HAL_I2C_Master_Transmit>:
{
 8000ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000aec:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000af2:	4604      	mov	r4, r0
 8000af4:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af6:	2b20      	cmp	r3, #32
{
 8000af8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000afa:	f040 8084 	bne.w	8000c06 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000afe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d07f      	beq.n	8000c06 <HAL_I2C_Master_Transmit+0x11e>
 8000b06:	2701      	movs	r7, #1
 8000b08:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000b0c:	f7ff fd58 	bl	80005c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b10:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000b12:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b14:	9000      	str	r0, [sp, #0]
 8000b16:	463a      	mov	r2, r7
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f7ff fede 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000b22:	b118      	cbz	r0, 8000b2c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
}
 8000b26:	b003      	add	sp, #12
 8000b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b2c:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8000b2e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000b32:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b3e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000b40:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	2bff      	cmp	r3, #255	; 0xff
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_I2C_Master_Transmit+0x124>)
 8000b4c:	d926      	bls.n	8000b9c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b4e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b50:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b52:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b58:	4631      	mov	r1, r6
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f7ff fea5 	bl	80008aa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000b60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b62:	462a      	mov	r2, r5
 8000b64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b66:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b9fb      	cbnz	r3, 8000bac <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b6c:	f7ff ff46 	bl	80009fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1d7      	bne.n	8000b24 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	2120      	movs	r1, #32
 8000b78:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b80:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b84:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b92:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b96:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000b9a:	e7c4      	b.n	8000b26 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000b9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000b9e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	e7d5      	b.n	8000b58 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bac:	f7ff feff 	bl	80009ae <I2C_WaitOnTXISFlagUntilTimeout>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d1b7      	bne.n	8000b24 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bb6:	6822      	ldr	r2, [r4, #0]
 8000bb8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000bbc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000bbe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bc2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000bc4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000bc6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000bc8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000bca:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000bcc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bd0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0c3      	beq.n	8000b60 <HAL_I2C_Master_Transmit+0x78>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d1c1      	bne.n	8000b60 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bdc:	9500      	str	r5, [sp, #0]
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff fe7b 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d19b      	bne.n	8000b24 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	2bff      	cmp	r3, #255	; 0xff
 8000bf2:	d903      	bls.n	8000bfc <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bf4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bf6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bf8:	8522      	strh	r2, [r4, #40]	; 0x28
 8000bfa:	e7ab      	b.n	8000b54 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000bfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bfe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000c00:	b292      	uxth	r2, r2
 8000c02:	8522      	strh	r2, [r4, #40]	; 0x28
 8000c04:	e7ce      	b.n	8000ba4 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000c06:	2002      	movs	r0, #2
 8000c08:	e78d      	b.n	8000b26 <HAL_I2C_Master_Transmit+0x3e>
 8000c0a:	bf00      	nop
 8000c0c:	80002000 	.word	0x80002000

08000c10 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c10:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	2a20      	cmp	r2, #32
{
 8000c18:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c1a:	d11d      	bne.n	8000c58 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d019      	beq.n	8000c58 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c24:	2324      	movs	r3, #36	; 0x24
 8000c26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	681c      	ldr	r4, [r3, #0]
 8000c2e:	f024 0401 	bic.w	r4, r4, #1
 8000c32:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c34:	681c      	ldr	r4, [r3, #0]
 8000c36:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000c3a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c3c:	681c      	ldr	r4, [r3, #0]
 8000c3e:	4321      	orrs	r1, r4
 8000c40:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	f041 0101 	orr.w	r1, r1, #1
 8000c48:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c4a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c4c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000c58:	2002      	movs	r0, #2
  }
}
 8000c5a:	bd10      	pop	{r4, pc}

08000c5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c5c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c5e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000c62:	b2e4      	uxtb	r4, r4
 8000c64:	2c20      	cmp	r4, #32
 8000c66:	d11c      	bne.n	8000ca2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d018      	beq.n	8000ca2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c70:	2324      	movs	r3, #36	; 0x24
 8000c72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c76:	6803      	ldr	r3, [r0, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000c80:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000c82:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000c86:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000c8a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c94:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c96:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000ca2:	2002      	movs	r0, #2
  }
}
 8000ca4:	bd10      	pop	{r4, pc}
	...

08000ca8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cae:	4c19      	ldr	r4, [pc, #100]	; (8000d14 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc8:	f7ff fc7a 	bl	80005c0 <HAL_GetTick>
 8000ccc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cce:	6863      	ldr	r3, [r4, #4]
 8000cd0:	03da      	lsls	r2, r3, #15
 8000cd2:	d50c      	bpl.n	8000cee <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cda:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cdc:	f7ff fc70 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce0:	4c0c      	ldr	r4, [pc, #48]	; (8000d14 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000ce2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce4:	6863      	ldr	r3, [r4, #4]
 8000ce6:	039b      	lsls	r3, r3, #14
 8000ce8:	d50a      	bpl.n	8000d00 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000cea:	2000      	movs	r0, #0
 8000cec:	e006      	b.n	8000cfc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cee:	f7ff fc67 	bl	80005c0 <HAL_GetTick>
 8000cf2:	1b40      	subs	r0, r0, r5
 8000cf4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000cf8:	d9e9      	bls.n	8000cce <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000cfa:	2003      	movs	r0, #3
}
 8000cfc:	b003      	add	sp, #12
 8000cfe:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d00:	f7ff fc5e 	bl	80005c0 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d0a:	d9eb      	bls.n	8000ce4 <HAL_PWREx_EnableOverDrive+0x3c>
 8000d0c:	e7f5      	b.n	8000cfa <HAL_PWREx_EnableOverDrive+0x52>
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	b918      	cbnz	r0, 8000d28 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d22:	b002      	add	sp, #8
 8000d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d28:	6803      	ldr	r3, [r0, #0]
 8000d2a:	07d8      	lsls	r0, r3, #31
 8000d2c:	d410      	bmi.n	8000d50 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	0799      	lsls	r1, r3, #30
 8000d32:	d45e      	bmi.n	8000df2 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	0719      	lsls	r1, r3, #28
 8000d38:	f100 80a3 	bmi.w	8000e82 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	075a      	lsls	r2, r3, #29
 8000d40:	f100 80c4 	bmi.w	8000ecc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d44:	69a2      	ldr	r2, [r4, #24]
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 812e 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	e7e8      	b.n	8000d22 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	4b93      	ldr	r3, [pc, #588]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	f002 020c 	and.w	r2, r2, #12
 8000d58:	2a04      	cmp	r2, #4
 8000d5a:	d007      	beq.n	8000d6c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	f002 020c 	and.w	r2, r2, #12
 8000d62:	2a08      	cmp	r2, #8
 8000d64:	d10a      	bne.n	8000d7c <HAL_RCC_OscConfig+0x64>
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	025a      	lsls	r2, r3, #9
 8000d6a:	d507      	bpl.n	8000d7c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	039b      	lsls	r3, r3, #14
 8000d72:	d5dc      	bpl.n	8000d2e <HAL_RCC_OscConfig+0x16>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1d9      	bne.n	8000d2e <HAL_RCC_OscConfig+0x16>
 8000d7a:	e7d1      	b.n	8000d20 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7c:	6863      	ldr	r3, [r4, #4]
 8000d7e:	4d88      	ldr	r5, [pc, #544]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d84:	d111      	bne.n	8000daa <HAL_RCC_OscConfig+0x92>
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc17 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	4d83      	ldr	r5, [pc, #524]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000d94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	682b      	ldr	r3, [r5, #0]
 8000d98:	039f      	lsls	r7, r3, #14
 8000d9a:	d4c8      	bmi.n	8000d2e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc10 	bl	80005c0 <HAL_GetTick>
 8000da0:	1b80      	subs	r0, r0, r6
 8000da2:	2864      	cmp	r0, #100	; 0x64
 8000da4:	d9f7      	bls.n	8000d96 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000da6:	2003      	movs	r0, #3
 8000da8:	e7bb      	b.n	8000d22 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	b99b      	cbnz	r3, 8000dd4 <HAL_RCC_OscConfig+0xbc>
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db2:	602b      	str	r3, [r5, #0]
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc00 	bl	80005c0 <HAL_GetTick>
 8000dc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	0398      	lsls	r0, r3, #14
 8000dc6:	d5b2      	bpl.n	8000d2e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fbfa 	bl	80005c0 <HAL_GetTick>
 8000dcc:	1b80      	subs	r0, r0, r6
 8000dce:	2864      	cmp	r0, #100	; 0x64
 8000dd0:	d9f7      	bls.n	8000dc2 <HAL_RCC_OscConfig+0xaa>
 8000dd2:	e7e8      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	d103      	bne.n	8000de4 <HAL_RCC_OscConfig+0xcc>
 8000ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de0:	602b      	str	r3, [r5, #0]
 8000de2:	e7d0      	b.n	8000d86 <HAL_RCC_OscConfig+0x6e>
 8000de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de8:	602b      	str	r3, [r5, #0]
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	e7cc      	b.n	8000d8c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	f012 0f0c 	tst.w	r2, #12
 8000dfa:	d007      	beq.n	8000e0c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	f002 020c 	and.w	r2, r2, #12
 8000e02:	2a08      	cmp	r2, #8
 8000e04:	d111      	bne.n	8000e2a <HAL_RCC_OscConfig+0x112>
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	0259      	lsls	r1, r3, #9
 8000e0a:	d40e      	bmi.n	8000e2a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0c:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	0792      	lsls	r2, r2, #30
 8000e12:	d502      	bpl.n	8000e1a <HAL_RCC_OscConfig+0x102>
 8000e14:	68e2      	ldr	r2, [r4, #12]
 8000e16:	2a01      	cmp	r2, #1
 8000e18:	d182      	bne.n	8000d20 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	6921      	ldr	r1, [r4, #16]
 8000e1e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e22:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e28:	e784      	b.n	8000d34 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	4d5c      	ldr	r5, [pc, #368]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000e2e:	b1bb      	cbz	r3, 8000e60 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e38:	f7ff fbc2 	bl	80005c0 <HAL_GetTick>
 8000e3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e3e:	682b      	ldr	r3, [r5, #0]
 8000e40:	079f      	lsls	r7, r3, #30
 8000e42:	d507      	bpl.n	8000e54 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	6922      	ldr	r2, [r4, #16]
 8000e48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e50:	602b      	str	r3, [r5, #0]
 8000e52:	e76f      	b.n	8000d34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fbb4 	bl	80005c0 <HAL_GetTick>
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9ef      	bls.n	8000e3e <HAL_RCC_OscConfig+0x126>
 8000e5e:	e7a2      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e68:	f7ff fbaa 	bl	80005c0 <HAL_GetTick>
 8000e6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	0798      	lsls	r0, r3, #30
 8000e72:	f57f af5f 	bpl.w	8000d34 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e76:	f7ff fba3 	bl	80005c0 <HAL_GetTick>
 8000e7a:	1b80      	subs	r0, r0, r6
 8000e7c:	2802      	cmp	r0, #2
 8000e7e:	d9f6      	bls.n	8000e6e <HAL_RCC_OscConfig+0x156>
 8000e80:	e791      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e82:	6963      	ldr	r3, [r4, #20]
 8000e84:	4d46      	ldr	r5, [pc, #280]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000e86:	b183      	cbz	r3, 8000eaa <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000e88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e90:	f7ff fb96 	bl	80005c0 <HAL_GetTick>
 8000e94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e98:	079b      	lsls	r3, r3, #30
 8000e9a:	f53f af4f 	bmi.w	8000d3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fb8f 	bl	80005c0 <HAL_GetTick>
 8000ea2:	1b80      	subs	r0, r0, r6
 8000ea4:	2802      	cmp	r0, #2
 8000ea6:	d9f6      	bls.n	8000e96 <HAL_RCC_OscConfig+0x17e>
 8000ea8:	e77d      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000eaa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fb85 	bl	80005c0 <HAL_GetTick>
 8000eb6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000eba:	079f      	lsls	r7, r3, #30
 8000ebc:	f57f af3e 	bpl.w	8000d3c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fb7e 	bl	80005c0 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9f6      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x1a0>
 8000eca:	e76c      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	00d0      	lsls	r0, r2, #3
 8000ed2:	d427      	bmi.n	8000f24 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000ed6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ee8:	4d2e      	ldr	r5, [pc, #184]	; (8000fa4 <HAL_RCC_OscConfig+0x28c>)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	05d9      	lsls	r1, r3, #23
 8000eee:	d51b      	bpl.n	8000f28 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef0:	68a3      	ldr	r3, [r4, #8]
 8000ef2:	4d2b      	ldr	r5, [pc, #172]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d127      	bne.n	8000f48 <HAL_RCC_OscConfig+0x230>
 8000ef8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f04:	f7ff fb5c 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	4f25      	ldr	r7, [pc, #148]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000f0a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f0e:	079b      	lsls	r3, r3, #30
 8000f10:	d53f      	bpl.n	8000f92 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	f43f af16 	beq.w	8000d44 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_RCC_OscConfig+0x288>)
 8000f1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	e70f      	b.n	8000d44 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000f24:	2600      	movs	r6, #0
 8000f26:	e7df      	b.n	8000ee8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb46 	bl	80005c0 <HAL_GetTick>
 8000f34:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f36:	682b      	ldr	r3, [r5, #0]
 8000f38:	05da      	lsls	r2, r3, #23
 8000f3a:	d4d9      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f3c:	f7ff fb40 	bl	80005c0 <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	2864      	cmp	r0, #100	; 0x64
 8000f44:	d9f7      	bls.n	8000f36 <HAL_RCC_OscConfig+0x21e>
 8000f46:	e72e      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	b9ab      	cbnz	r3, 8000f76 <HAL_RCC_OscConfig+0x25e>
 8000f4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	672b      	str	r3, [r5, #112]	; 0x70
 8000f56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb2f 	bl	80005c0 <HAL_GetTick>
 8000f62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f66:	0798      	lsls	r0, r3, #30
 8000f68:	d5d3      	bpl.n	8000f12 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fb29 	bl	80005c0 <HAL_GetTick>
 8000f6e:	1bc0      	subs	r0, r0, r7
 8000f70:	4540      	cmp	r0, r8
 8000f72:	d9f7      	bls.n	8000f64 <HAL_RCC_OscConfig+0x24c>
 8000f74:	e717      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f7a:	d103      	bne.n	8000f84 <HAL_RCC_OscConfig+0x26c>
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	672b      	str	r3, [r5, #112]	; 0x70
 8000f82:	e7b9      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1e0>
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	672b      	str	r3, [r5, #112]	; 0x70
 8000f8a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
 8000f90:	e7b5      	b.n	8000efe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f92:	f7ff fb15 	bl	80005c0 <HAL_GetTick>
 8000f96:	eba0 0008 	sub.w	r0, r0, r8
 8000f9a:	42a8      	cmp	r0, r5
 8000f9c:	d9b6      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1f4>
 8000f9e:	e702      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4d24      	ldr	r5, [pc, #144]	; (800103c <HAL_RCC_OscConfig+0x324>)
 8000faa:	68ab      	ldr	r3, [r5, #8]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	f43f aeb5 	beq.w	8000d20 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fbe:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc0:	d12f      	bne.n	8001022 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fafd 	bl	80005c0 <HAL_GetTick>
 8000fc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	0199      	lsls	r1, r3, #6
 8000fcc:	d423      	bmi.n	8001016 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fce:	6a22      	ldr	r2, [r4, #32]
 8000fd0:	69e3      	ldr	r3, [r4, #28]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000fd6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fdc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fe0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fe2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000fe6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe8:	4c14      	ldr	r4, [pc, #80]	; (800103c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fea:	0852      	lsrs	r2, r2, #1
 8000fec:	3a01      	subs	r2, #1
 8000fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ff2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ffa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fae0 	bl	80005c0 <HAL_GetTick>
 8001000:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	019a      	lsls	r2, r3, #6
 8001006:	f53f aea1 	bmi.w	8000d4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100a:	f7ff fad9 	bl	80005c0 <HAL_GetTick>
 800100e:	1b40      	subs	r0, r0, r5
 8001010:	2802      	cmp	r0, #2
 8001012:	d9f6      	bls.n	8001002 <HAL_RCC_OscConfig+0x2ea>
 8001014:	e6c7      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001016:	f7ff fad3 	bl	80005c0 <HAL_GetTick>
 800101a:	1b80      	subs	r0, r0, r6
 800101c:	2802      	cmp	r0, #2
 800101e:	d9d3      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x2b0>
 8001020:	e6c1      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001022:	f7ff facd 	bl	80005c0 <HAL_GetTick>
 8001026:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	019b      	lsls	r3, r3, #6
 800102c:	f57f ae8e 	bpl.w	8000d4c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff fac6 	bl	80005c0 <HAL_GetTick>
 8001034:	1b00      	subs	r0, r0, r4
 8001036:	2802      	cmp	r0, #2
 8001038:	d9f6      	bls.n	8001028 <HAL_RCC_OscConfig+0x310>
 800103a:	e6b4      	b.n	8000da6 <HAL_RCC_OscConfig+0x8e>
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001042:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001044:	688b      	ldr	r3, [r1, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b04      	cmp	r3, #4
 800104c:	d003      	beq.n	8001056 <HAL_RCC_GetSysClockFreq+0x16>
 800104e:	2b08      	cmp	r3, #8
 8001050:	d003      	beq.n	800105a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001054:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_RCC_GetSysClockFreq+0x58>)
 8001058:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800105c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001060:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001064:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001068:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800106c:	bf1a      	itte	ne
 800106e:	480a      	ldrne	r0, [pc, #40]	; (8001098 <HAL_RCC_GetSysClockFreq+0x58>)
 8001070:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001072:	4808      	ldreq	r0, [pc, #32]	; (8001094 <HAL_RCC_GetSysClockFreq+0x54>)
 8001074:	fba1 0100 	umull	r0, r1, r1, r0
 8001078:	f7ff f8de 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetSysClockFreq+0x50>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001084:	3301      	adds	r3, #1
 8001086:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001088:	fbb0 f0f3 	udiv	r0, r0, r3
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	00f42400 	.word	0x00f42400
 8001098:	007a1200 	.word	0x007a1200

0800109c <HAL_RCC_ClockConfig>:
{
 800109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80010a2:	4604      	mov	r4, r0
 80010a4:	b910      	cbnz	r0, 80010ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010a6:	2001      	movs	r0, #1
 80010a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_RCC_ClockConfig+0x12c>)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	428b      	cmp	r3, r1
 80010b6:	d328      	bcc.n	800110a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b8:	6821      	ldr	r1, [r4, #0]
 80010ba:	078f      	lsls	r7, r1, #30
 80010bc:	d430      	bmi.n	8001120 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	07c8      	lsls	r0, r1, #31
 80010c0:	d443      	bmi.n	800114a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c2:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <HAL_RCC_ClockConfig+0x12c>)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	429d      	cmp	r5, r3
 80010cc:	d367      	bcc.n	800119e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	0751      	lsls	r1, r2, #29
 80010d2:	d470      	bmi.n	80011b6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d4:	0713      	lsls	r3, r2, #28
 80010d6:	d507      	bpl.n	80010e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010d8:	4a3c      	ldr	r2, [pc, #240]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 80010da:	6921      	ldr	r1, [r4, #16]
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010e8:	f7ff ffaa 	bl	8001040 <HAL_RCC_GetSysClockFreq>
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 80010ee:	4a38      	ldr	r2, [pc, #224]	; (80011d0 <HAL_RCC_ClockConfig+0x134>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_ClockConfig+0x138>)
 80010fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fa22 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
 8001106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	430b      	orrs	r3, r1
 8001112:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001114:	6813      	ldr	r3, [r2, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	4299      	cmp	r1, r3
 800111c:	d1c3      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xa>
 800111e:	e7cb      	b.n	80010b8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	f011 0f04 	tst.w	r1, #4
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 8001126:	d003      	beq.n	8001130 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800112e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	070e      	lsls	r6, r1, #28
 8001132:	d503      	bpl.n	800113c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800113a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	68a0      	ldr	r0, [r4, #8]
 8001140:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001144:	4302      	orrs	r2, r0
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e7b9      	b.n	80010be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	6861      	ldr	r1, [r4, #4]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 800114e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001150:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001152:	d11c      	bne.n	800118e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001154:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	d0a5      	beq.n	80010a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001160:	4e1a      	ldr	r6, [pc, #104]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001162:	f022 0203 	bic.w	r2, r2, #3
 8001166:	430a      	orrs	r2, r1
 8001168:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800116a:	f7ff fa29 	bl	80005c0 <HAL_GetTick>
 800116e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001170:	68b3      	ldr	r3, [r6, #8]
 8001172:	6862      	ldr	r2, [r4, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800117c:	d0a1      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117e:	f7ff fa1f 	bl	80005c0 <HAL_GetTick>
 8001182:	1bc0      	subs	r0, r0, r7
 8001184:	4540      	cmp	r0, r8
 8001186:	d9f3      	bls.n	8001170 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001188:	2003      	movs	r0, #3
}
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118e:	2902      	cmp	r1, #2
 8001190:	d102      	bne.n	8001198 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001192:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001196:	e7df      	b.n	8001158 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	f012 0f02 	tst.w	r2, #2
 800119c:	e7dc      	b.n	8001158 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	432b      	orrs	r3, r5
 80011a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	429d      	cmp	r5, r3
 80011b0:	f47f af79 	bne.w	80010a6 <HAL_RCC_ClockConfig+0xa>
 80011b4:	e78b      	b.n	80010ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b6:	4905      	ldr	r1, [pc, #20]	; (80011cc <HAL_RCC_ClockConfig+0x130>)
 80011b8:	68e0      	ldr	r0, [r4, #12]
 80011ba:	688b      	ldr	r3, [r1, #8]
 80011bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011c0:	4303      	orrs	r3, r0
 80011c2:	608b      	str	r3, [r1, #8]
 80011c4:	e786      	b.n	80010d4 <HAL_RCC_ClockConfig+0x38>
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08001b63 	.word	0x08001b63
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011dc:	6802      	ldr	r2, [r0, #0]
{
 80011de:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011e0:	f012 0601 	ands.w	r6, r2, #1
 80011e4:	d00b      	beq.n	80011fe <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011e6:	4bba      	ldr	r3, [pc, #744]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011e8:	6899      	ldr	r1, [r3, #8]
 80011ea:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80011ee:	6099      	str	r1, [r3, #8]
 80011f0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011f2:	6899      	ldr	r1, [r3, #8]
 80011f4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80011f6:	fab6 f686 	clz	r6, r6
 80011fa:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011fc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011fe:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001202:	d012      	beq.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001204:	49b2      	ldr	r1, [pc, #712]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001206:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001208:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800120c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001210:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001214:	bf08      	it	eq
 8001216:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001218:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800121c:	bf16      	itet	ne
 800121e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001222:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001224:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001226:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800122a:	02d7      	lsls	r7, r2, #11
 800122c:	d510      	bpl.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800122e:	48a8      	ldr	r0, [pc, #672]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001230:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001232:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001236:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800123a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800123e:	ea43 0301 	orr.w	r3, r3, r1
 8001242:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001246:	f000 81a9 	beq.w	800159c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800124a:	2900      	cmp	r1, #0
 800124c:	bf08      	it	eq
 800124e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001250:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001254:	bf18      	it	ne
 8001256:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001258:	0690      	lsls	r0, r2, #26
 800125a:	d531      	bpl.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b9c      	ldr	r3, [pc, #624]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800125e:	4f9d      	ldr	r7, [pc, #628]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001262:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800127a:	f7ff f9a1 	bl	80005c0 <HAL_GetTick>
 800127e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	05d9      	lsls	r1, r3, #23
 8001284:	f140 818c 	bpl.w	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001288:	4f91      	ldr	r7, [pc, #580]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800128a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800128c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001290:	f040 8191 	bne.w	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001296:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800129a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800129e:	4a8c      	ldr	r2, [pc, #560]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012a0:	f040 81af 	bne.w	8001602 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80012a4:	6891      	ldr	r1, [r2, #8]
 80012a6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80012aa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80012ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80012b2:	4301      	orrs	r1, r0
 80012b4:	6091      	str	r1, [r2, #8]
 80012b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80012bc:	430b      	orrs	r3, r1
 80012be:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	06df      	lsls	r7, r3, #27
 80012c4:	d50c      	bpl.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80012c6:	4a82      	ldr	r2, [pc, #520]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012c8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012cc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80012d0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80012d4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012da:	4301      	orrs	r1, r0
 80012dc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012e0:	0458      	lsls	r0, r3, #17
 80012e2:	d508      	bpl.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012e4:	497a      	ldr	r1, [pc, #488]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80012e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012f0:	4302      	orrs	r2, r0
 80012f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012f6:	0419      	lsls	r1, r3, #16
 80012f8:	d508      	bpl.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012fa:	4975      	ldr	r1, [pc, #468]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80012fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80012fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001302:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001306:	4302      	orrs	r2, r0
 8001308:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800130c:	03da      	lsls	r2, r3, #15
 800130e:	d508      	bpl.n	8001322 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001310:	496f      	ldr	r1, [pc, #444]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001312:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001314:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001318:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800131c:	4302      	orrs	r2, r0
 800131e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001322:	039f      	lsls	r7, r3, #14
 8001324:	d508      	bpl.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001326:	496a      	ldr	r1, [pc, #424]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001328:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800132a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800132e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001332:	4302      	orrs	r2, r0
 8001334:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001338:	0658      	lsls	r0, r3, #25
 800133a:	d508      	bpl.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800133c:	4964      	ldr	r1, [pc, #400]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800133e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001340:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001344:	f022 0203 	bic.w	r2, r2, #3
 8001348:	4302      	orrs	r2, r0
 800134a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800134e:	0619      	lsls	r1, r3, #24
 8001350:	d508      	bpl.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001352:	495f      	ldr	r1, [pc, #380]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001354:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001356:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800135a:	f022 020c 	bic.w	r2, r2, #12
 800135e:	4302      	orrs	r2, r0
 8001360:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001364:	05da      	lsls	r2, r3, #23
 8001366:	d508      	bpl.n	800137a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001368:	4959      	ldr	r1, [pc, #356]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800136a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800136c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001370:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001374:	4302      	orrs	r2, r0
 8001376:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800137a:	059f      	lsls	r7, r3, #22
 800137c:	d508      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800137e:	4954      	ldr	r1, [pc, #336]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001380:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001382:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001386:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800138a:	4302      	orrs	r2, r0
 800138c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001390:	0558      	lsls	r0, r3, #21
 8001392:	d508      	bpl.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001394:	494e      	ldr	r1, [pc, #312]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001398:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800139c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013a0:	4302      	orrs	r2, r0
 80013a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80013a6:	0519      	lsls	r1, r3, #20
 80013a8:	d508      	bpl.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80013aa:	4949      	ldr	r1, [pc, #292]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013b6:	4302      	orrs	r2, r0
 80013b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80013bc:	04da      	lsls	r2, r3, #19
 80013be:	d508      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80013c0:	4943      	ldr	r1, [pc, #268]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013c2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80013c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013cc:	4302      	orrs	r2, r0
 80013ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80013d2:	049f      	lsls	r7, r3, #18
 80013d4:	d508      	bpl.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80013d6:	493e      	ldr	r1, [pc, #248]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80013da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013e2:	4302      	orrs	r2, r0
 80013e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013e8:	0258      	lsls	r0, r3, #9
 80013ea:	d508      	bpl.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013ec:	4938      	ldr	r1, [pc, #224]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013ee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013f4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013f8:	4302      	orrs	r2, r0
 80013fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80013fe:	0299      	lsls	r1, r3, #10
 8001400:	d50c      	bpl.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001402:	4833      	ldr	r0, [pc, #204]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001404:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001406:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800140a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800140e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001412:	bf08      	it	eq
 8001414:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001416:	430a      	orrs	r2, r1
 8001418:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800141c:	f013 0f08 	tst.w	r3, #8
 8001420:	bf18      	it	ne
 8001422:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001424:	035a      	lsls	r2, r3, #13
 8001426:	d508      	bpl.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001428:	4929      	ldr	r1, [pc, #164]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800142a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800142c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001434:	4302      	orrs	r2, r0
 8001436:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800143a:	021f      	lsls	r7, r3, #8
 800143c:	d509      	bpl.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001440:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001444:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001448:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800144c:	4302      	orrs	r2, r0
 800144e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001452:	0158      	lsls	r0, r3, #5
 8001454:	d509      	bpl.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001456:	491e      	ldr	r1, [pc, #120]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001458:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800145c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001460:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001464:	4302      	orrs	r2, r0
 8001466:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800146a:	0119      	lsls	r1, r3, #4
 800146c:	d509      	bpl.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800146e:	4918      	ldr	r1, [pc, #96]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001470:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001474:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001478:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800147c:	4302      	orrs	r2, r0
 800147e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001482:	00da      	lsls	r2, r3, #3
 8001484:	d509      	bpl.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001488:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800148c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001490:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001494:	4302      	orrs	r2, r0
 8001496:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800149a:	2e01      	cmp	r6, #1
 800149c:	f000 80b5 	beq.w	800160a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80014a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014a4:	f000 80b1 	beq.w	800160a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80014a8:	2d01      	cmp	r5, #1
 80014aa:	d175      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014ac:	4d08      	ldr	r5, [pc, #32]	; (80014d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b6:	f7ff f883 	bl	80005c0 <HAL_GetTick>
 80014ba:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	009f      	lsls	r7, r3, #2
 80014c0:	f100 8127 	bmi.w	8001712 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80014c4:	6821      	ldr	r1, [r4, #0]
 80014c6:	030e      	lsls	r6, r1, #12
 80014c8:	d506      	bpl.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80014ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014cc:	b143      	cbz	r3, 80014e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80014ce:	e003      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	02cd      	lsls	r5, r1, #11
 80014da:	d51d      	bpl.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80014dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014de:	b9db      	cbnz	r3, 8001518 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80014e0:	4a93      	ldr	r2, [pc, #588]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80014e6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80014ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ee:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014f2:	4303      	orrs	r3, r0
 80014f4:	6960      	ldr	r0, [r4, #20]
 80014f6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014fa:	69a0      	ldr	r0, [r4, #24]
 80014fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001504:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001508:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800150a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800150e:	3801      	subs	r0, #1
 8001510:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001514:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001518:	0288      	lsls	r0, r1, #10
 800151a:	d515      	bpl.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800151c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800151e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001522:	d111      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001524:	4a82      	ldr	r2, [pc, #520]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001526:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800152a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800152e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001532:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001536:	4303      	orrs	r3, r0
 8001538:	6960      	ldr	r0, [r4, #20]
 800153a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800153e:	6a20      	ldr	r0, [r4, #32]
 8001540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001548:	070a      	lsls	r2, r1, #28
 800154a:	d519      	bpl.n	8001580 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800154c:	4978      	ldr	r1, [pc, #480]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800154e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001552:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001556:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800155a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155e:	4313      	orrs	r3, r2
 8001560:	6962      	ldr	r2, [r4, #20]
 8001562:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001566:	69e2      	ldr	r2, [r4, #28]
 8001568:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800156c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001570:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001574:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001576:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800157a:	4313      	orrs	r3, r2
 800157c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001580:	4c6b      	ldr	r4, [pc, #428]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800158a:	f7ff f819 	bl	80005c0 <HAL_GetTick>
 800158e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	f140 80c4 	bpl.w	8001720 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
 800159a:	e009      	b.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 800159c:	2601      	movs	r6, #1
 800159e:	e657      	b.n	8001250 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a0:	f7ff f80e 	bl	80005c0 <HAL_GetTick>
 80015a4:	eba0 0008 	sub.w	r0, r0, r8
 80015a8:	2864      	cmp	r0, #100	; 0x64
 80015aa:	f67f ae69 	bls.w	8001280 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80015ae:	2003      	movs	r0, #3
}
 80015b0:	b003      	add	sp, #12
 80015b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015bc:	4293      	cmp	r3, r2
 80015be:	f43f ae69 	beq.w	8001294 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80015ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015ce:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015d6:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80015d8:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015dc:	07da      	lsls	r2, r3, #31
 80015de:	f57f ae59 	bpl.w	8001294 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80015e2:	f7fe ffed 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ee:	079b      	lsls	r3, r3, #30
 80015f0:	f53f ae50 	bmi.w	8001294 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7fe ffe4 	bl	80005c0 <HAL_GetTick>
 80015f8:	eba0 0008 	sub.w	r0, r0, r8
 80015fc:	4548      	cmp	r0, r9
 80015fe:	d9f5      	bls.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001600:	e7d5      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001602:	6891      	ldr	r1, [r2, #8]
 8001604:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001608:	e654      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800160a:	4e49      	ldr	r6, [pc, #292]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800160c:	6833      	ldr	r3, [r6, #0]
 800160e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001612:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001614:	f7fe ffd4 	bl	80005c0 <HAL_GetTick>
 8001618:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800161a:	6833      	ldr	r3, [r6, #0]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	d472      	bmi.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	07d7      	lsls	r7, r2, #31
 8001624:	d512      	bpl.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001628:	b983      	cbnz	r3, 800164c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800162a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800162e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001636:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800163a:	430b      	orrs	r3, r1
 800163c:	6861      	ldr	r1, [r4, #4]
 800163e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001642:	68a1      	ldr	r1, [r4, #8]
 8001644:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001648:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800164c:	0316      	lsls	r6, r2, #12
 800164e:	d503      	bpl.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001656:	d005      	beq.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001658:	02d0      	lsls	r0, r2, #11
 800165a:	d51e      	bpl.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800165c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d11a      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001664:	4932      	ldr	r1, [pc, #200]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001666:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800166a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800166e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001672:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001676:	4303      	orrs	r3, r0
 8001678:	6860      	ldr	r0, [r4, #4]
 800167a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800167e:	68e0      	ldr	r0, [r4, #12]
 8001680:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001688:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800168c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800168e:	f020 001f 	bic.w	r0, r0, #31
 8001692:	3b01      	subs	r3, #1
 8001694:	4303      	orrs	r3, r0
 8001696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800169a:	01d1      	lsls	r1, r2, #7
 800169c:	d511      	bpl.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800169e:	4924      	ldr	r1, [pc, #144]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016a0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016a4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80016a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016ac:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016b0:	4303      	orrs	r3, r0
 80016b2:	6860      	ldr	r0, [r4, #4]
 80016b4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016b8:	6920      	ldr	r0, [r4, #16]
 80016ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80016be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80016c2:	0192      	lsls	r2, r2, #6
 80016c4:	d50d      	bpl.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80016c6:	6923      	ldr	r3, [r4, #16]
 80016c8:	6862      	ldr	r2, [r4, #4]
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016d0:	68e2      	ldr	r2, [r4, #12]
 80016d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016d6:	68a2      	ldr	r2, [r4, #8]
 80016d8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80016e2:	4e13      	ldr	r6, [pc, #76]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016ec:	f7fe ff68 	bl	80005c0 <HAL_GetTick>
 80016f0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80016f2:	6833      	ldr	r3, [r6, #0]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	f53f aed7 	bmi.w	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80016fa:	f7fe ff61 	bl	80005c0 <HAL_GetTick>
 80016fe:	1bc0      	subs	r0, r0, r7
 8001700:	2864      	cmp	r0, #100	; 0x64
 8001702:	d9f6      	bls.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001704:	e753      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001706:	f7fe ff5b 	bl	80005c0 <HAL_GetTick>
 800170a:	1bc0      	subs	r0, r0, r7
 800170c:	2864      	cmp	r0, #100	; 0x64
 800170e:	d984      	bls.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001710:	e74d      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001712:	f7fe ff55 	bl	80005c0 <HAL_GetTick>
 8001716:	1b80      	subs	r0, r0, r6
 8001718:	2864      	cmp	r0, #100	; 0x64
 800171a:	f67f aecf 	bls.w	80014bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800171e:	e746      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001720:	f7fe ff4e 	bl	80005c0 <HAL_GetTick>
 8001724:	1b40      	subs	r0, r0, r5
 8001726:	2864      	cmp	r0, #100	; 0x64
 8001728:	f67f af32 	bls.w	8001590 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800172c:	e73f      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <lcd_send_cmd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*explication ds la video youtube de controllers Tech*/
void lcd_send_cmd(char cmd)
{
 8001734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
char data_u, data_l;
uint8_t data_t[4];
data_u = cmd&0xf0;
 8001736:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
data_l = (cmd<<4)&0xf0;
 800173a:	0100      	lsls	r0, r0, #4
data_t[0] = data_u | 0x04;
data_t[1] = data_u;
data_t[2] = data_l |0x04;
data_t[3] = data_l ;

HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 800173c:	214e      	movs	r1, #78	; 0x4e
data_l = (cmd<<4)&0xf0;
 800173e:	b2c0      	uxtb	r0, r0
data_t[0] = data_u | 0x04;
 8001740:	f043 0204 	orr.w	r2, r3, #4
data_t[1] = data_u;
 8001744:	f88d 300d 	strb.w	r3, [sp, #13]
data_t[2] = data_l |0x04;
 8001748:	f040 0304 	orr.w	r3, r0, #4
data_t[0] = data_u | 0x04;
 800174c:	f88d 200c 	strb.w	r2, [sp, #12]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001750:	aa03      	add	r2, sp, #12
data_t[3] = data_l ;
 8001752:	f88d 000f 	strb.w	r0, [sp, #15]
data_t[2] = data_l |0x04;
 8001756:	f88d 300e 	strb.w	r3, [sp, #14]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <lcd_send_cmd+0x38>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2304      	movs	r3, #4
 8001762:	f7ff f9c1 	bl	8000ae8 <HAL_I2C_Master_Transmit>
}
 8001766:	b005      	add	sp, #20
 8001768:	f85d fb04 	ldr.w	pc, [sp], #4
 800176c:	2000002c 	.word	0x2000002c

08001770 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001770:	b51f      	push	{r0, r1, r2, r3, r4, lr}

char data_u, data_l;
uint8_t data_t[4];
data_u = data&0xf0;
 8001772:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
data_l = (data<<4)&0xf0;
 8001776:	0100      	lsls	r0, r0, #4
data_t[0] = data_u|0x05;
data_t[1] = data_u|0x01;
data_t[2] = data_l|0x05;
data_t[3] = data_l|0x01;

HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001778:	214e      	movs	r1, #78	; 0x4e
data_t[0] = data_u|0x05;
 800177a:	f043 0205 	orr.w	r2, r3, #5
data_l = (data<<4)&0xf0;
 800177e:	b2c0      	uxtb	r0, r0
data_t[1] = data_u|0x01;
 8001780:	f043 0301 	orr.w	r3, r3, #1
data_t[0] = data_u|0x05;
 8001784:	f88d 200c 	strb.w	r2, [sp, #12]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001788:	aa03      	add	r2, sp, #12
data_t[1] = data_u|0x01;
 800178a:	f88d 300d 	strb.w	r3, [sp, #13]
data_t[2] = data_l|0x05;
 800178e:	f040 0305 	orr.w	r3, r0, #5
data_t[3] = data_l|0x01;
 8001792:	f040 0001 	orr.w	r0, r0, #1
data_t[2] = data_l|0x05;
 8001796:	f88d 300e 	strb.w	r3, [sp, #14]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 800179a:	2364      	movs	r3, #100	; 0x64
data_t[3] = data_l|0x01;
 800179c:	f88d 000f 	strb.w	r0, [sp, #15]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2304      	movs	r3, #4
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <lcd_send_data+0x40>)
 80017a6:	f7ff f99f 	bl	8000ae8 <HAL_I2C_Master_Transmit>

}
 80017aa:	b005      	add	sp, #20
 80017ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80017b0:	2000002c 	.word	0x2000002c

080017b4 <lcd_init>:


void lcd_init()
{
 80017b4:	b508      	push	{r3, lr}
 lcd_send_cmd(0x02);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff ffbc 	bl	8001734 <lcd_send_cmd>
 lcd_send_cmd(0x28);
 80017bc:	2028      	movs	r0, #40	; 0x28
 80017be:	f7ff ffb9 	bl	8001734 <lcd_send_cmd>
 lcd_send_cmd(0x0c);
 80017c2:	200c      	movs	r0, #12
 80017c4:	f7ff ffb6 	bl	8001734 <lcd_send_cmd>
 lcd_send_cmd(0x80);
 80017c8:	2080      	movs	r0, #128	; 0x80
}
 80017ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 lcd_send_cmd(0x80);
 80017ce:	f7ff bfb1 	b.w	8001734 <lcd_send_cmd>

080017d2 <lcd_send_string>:


void lcd_send_string(char *str)
{
 80017d2:	b510      	push	{r4, lr}
 80017d4:	1e44      	subs	r4, r0, #1

while (*str) lcd_send_data(*str++);
 80017d6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80017da:	b900      	cbnz	r0, 80017de <lcd_send_string+0xc>
}
 80017dc:	bd10      	pop	{r4, pc}
while (*str) lcd_send_data(*str++);
 80017de:	f7ff ffc7 	bl	8001770 <lcd_send_data>
 80017e2:	e7f8      	b.n	80017d6 <lcd_send_string+0x4>

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b530      	push	{r4, r5, lr}
 80017e6:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e8:	2234      	movs	r2, #52	; 0x34
 80017ea:	2100      	movs	r1, #0
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ec:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f0:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f000 f995 	bl	8001b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f6:	2214      	movs	r2, #20
 80017f8:	2100      	movs	r1, #0
 80017fa:	a802      	add	r0, sp, #8
 80017fc:	f000 f990 	bl	8001b20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	2100      	movs	r1, #0
 8001802:	2290      	movs	r2, #144	; 0x90
 8001804:	a814      	add	r0, sp, #80	; 0x50
 8001806:	f000 f98b 	bl	8001b20 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001810:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001818:	4a1c      	ldr	r2, [pc, #112]	; (800188c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001830:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001838:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183e:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001840:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001842:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001848:	2308      	movs	r3, #8
 800184a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f7ff fa60 	bl	8000d18 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001858:	f7ff fa26 	bl	8000ca8 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800185e:	2103      	movs	r1, #3
 8001860:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001862:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186e:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001870:	f7ff fc14 	bl	800109c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001874:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001878:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800187a:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800187c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f7ff fcab 	bl	80011d8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001882:	b039      	add	sp, #228	; 0xe4
 8001884:	bd30      	pop	{r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <main>:
{
 8001890:	b500      	push	{lr}
 8001892:	b089      	sub	sp, #36	; 0x24
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD_Pin */
  GPIO_InitStruct.Pin = LD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2500      	movs	r5, #0
  HAL_Init();
 8001896:	f7fe fe7b 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2601      	movs	r6, #1
  SystemClock_Config();
 800189c:	f7ff ffa2 	bl	80017e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	2214      	movs	r2, #20
 80018a2:	2100      	movs	r1, #0
 80018a4:	a803      	add	r0, sp, #12
 80018a6:	f000 f93b 	bl	8001b20 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <main+0xdc>)
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 80018ac:	2120      	movs	r1, #32
 80018ae:	4830      	ldr	r0, [pc, #192]	; (8001970 <main+0xe0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hi2c1.Instance = I2C1;
 80018b2:	4c30      	ldr	r4, [pc, #192]	; (8001974 <main+0xe4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
 80018cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ce:	f002 0201 	and.w	r2, r2, #1
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d8:	f042 0202 	orr.w	r2, r2, #2
 80018dc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 80018ea:	f7fe ffcb 	bl	8000884 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD_Pin;
 80018ee:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80018f0:	a903      	add	r1, sp, #12
 80018f2:	481f      	ldr	r0, [pc, #124]	; (8001970 <main+0xe0>)
  GPIO_InitStruct.Pin = LD_Pin;
 80018f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f7fe fed8 	bl	80006b0 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x20303E5D;
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <main+0xe8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001902:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x20303E5D;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <main+0xec>)
  hi2c1.Init.OwnAddress1 = 0;
 8001906:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800190a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800190c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001910:	6225      	str	r5, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001912:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.Timing = 0x20303E5D;
 8001914:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	f7ff f895 	bl	8000a46 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191c:	4629      	mov	r1, r5
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff f976 	bl	8000c10 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001924:	4629      	mov	r1, r5
 8001926:	4620      	mov	r0, r4
	  lcd_send_string("NAEL & INAYA");
 8001928:	4d15      	ldr	r5, [pc, #84]	; (8001980 <main+0xf0>)
	  lcd_send_string("Mes BEBES !!!");
 800192a:	4c16      	ldr	r4, [pc, #88]	; (8001984 <main+0xf4>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800192c:	f7ff f996 	bl	8000c5c <HAL_I2CEx_ConfigDigitalFilter>
  lcd_init(); // init lcd
 8001930:	f7ff ff40 	bl	80017b4 <lcd_init>
  lcd_send_cmd(0x80); // cursor to 1 row und 1 col
 8001934:	2080      	movs	r0, #128	; 0x80
 8001936:	f7ff fefd 	bl	8001734 <lcd_send_cmd>
	  lcd_send_cmd(0x80); //goto 1,1
 800193a:	2080      	movs	r0, #128	; 0x80
 800193c:	f7ff fefa 	bl	8001734 <lcd_send_cmd>
	  lcd_send_string("NAEL & INAYA");
 8001940:	4628      	mov	r0, r5
 8001942:	f7ff ff46 	bl	80017d2 <lcd_send_string>
	  lcd_send_cmd(0xC0);//goto 2,1?
 8001946:	20c0      	movs	r0, #192	; 0xc0
 8001948:	f7ff fef4 	bl	8001734 <lcd_send_cmd>
	  lcd_send_string("Mes BEBES !!!");
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff ff40 	bl	80017d2 <lcd_send_string>
	  HAL_Delay(2000);
 8001952:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001956:	f7fe fe39 	bl	80005cc <HAL_Delay>
	  lcd_send_cmd(0x01);// clear display
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff feea 	bl	8001734 <lcd_send_cmd>
	  HAL_Delay(1000);
 8001960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001964:	f7fe fe32 	bl	80005cc <HAL_Delay>
 8001968:	e7e7      	b.n	800193a <main+0xaa>
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	2000002c 	.word	0x2000002c
 8001978:	40005400 	.word	0x40005400
 800197c:	20303e5d 	.word	0x20303e5d
 8001980:	08001b48 	.word	0x08001b48
 8001984:	08001b55 	.word	0x08001b55

08001988 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_MspInit+0x2c>)
{
 800198a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
 8001994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001996:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b0:	b002      	add	sp, #8
 80019b2:	4770      	bx	lr
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b510      	push	{r4, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	2214      	movs	r2, #20
 80019c0:	2100      	movs	r1, #0
 80019c2:	a803      	add	r0, sp, #12
 80019c4:	f000 f8ac 	bl	8001b20 <memset>
  if(hi2c->Instance==I2C1)
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_I2C_MspInit+0x60>)
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d121      	bne.n	8001a14 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	4c12      	ldr	r4, [pc, #72]	; (8001a1c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	a903      	add	r1, sp, #12
 80019d4:	4812      	ldr	r0, [pc, #72]	; (8001a20 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6323      	str	r3, [r4, #48]	; 0x30
 80019de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f7fe fe57 	bl	80006b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6423      	str	r3, [r4, #64]	; 0x40
 8001a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a14:	b008      	add	sp, #32
 8001a16:	bd10      	pop	{r4, pc}
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020400 	.word	0x40020400

08001a24 <NMI_Handler>:
 8001a24:	4770      	bx	lr

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler>

08001a2e <SVC_Handler>:
 8001a2e:	4770      	bx	lr

08001a30 <DebugMon_Handler>:
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	4770      	bx	lr

08001a34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f7fe bdb8 	b.w	80005a8 <HAL_IncTick>

08001a38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	490f      	ldr	r1, [pc, #60]	; (8001a78 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <SystemInit+0x44>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a52:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <SystemInit+0x48>)
 8001a62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a6c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a72:	608b      	str	r3, [r1, #8]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	24003010 	.word	0x24003010

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
  ldr  r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffc3 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f000 f811 	bl	8001ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff feeb 	bl	8001890 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ac0:	08001b84 	.word	0x08001b84
  ldr  r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001acc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ad0:	2000007c 	.word	0x2000007c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <__libc_init_array>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	4e0d      	ldr	r6, [pc, #52]	; (8001b10 <__libc_init_array+0x38>)
 8001adc:	4c0d      	ldr	r4, [pc, #52]	; (8001b14 <__libc_init_array+0x3c>)
 8001ade:	1ba4      	subs	r4, r4, r6
 8001ae0:	10a4      	asrs	r4, r4, #2
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	42a5      	cmp	r5, r4
 8001ae6:	d109      	bne.n	8001afc <__libc_init_array+0x24>
 8001ae8:	4e0b      	ldr	r6, [pc, #44]	; (8001b18 <__libc_init_array+0x40>)
 8001aea:	4c0c      	ldr	r4, [pc, #48]	; (8001b1c <__libc_init_array+0x44>)
 8001aec:	f000 f820 	bl	8001b30 <_init>
 8001af0:	1ba4      	subs	r4, r4, r6
 8001af2:	10a4      	asrs	r4, r4, #2
 8001af4:	2500      	movs	r5, #0
 8001af6:	42a5      	cmp	r5, r4
 8001af8:	d105      	bne.n	8001b06 <__libc_init_array+0x2e>
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b00:	4798      	blx	r3
 8001b02:	3501      	adds	r5, #1
 8001b04:	e7ee      	b.n	8001ae4 <__libc_init_array+0xc>
 8001b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b0a:	4798      	blx	r3
 8001b0c:	3501      	adds	r5, #1
 8001b0e:	e7f2      	b.n	8001af6 <__libc_init_array+0x1e>
 8001b10:	08001b7c 	.word	0x08001b7c
 8001b14:	08001b7c 	.word	0x08001b7c
 8001b18:	08001b7c 	.word	0x08001b7c
 8001b1c:	08001b80 	.word	0x08001b80

08001b20 <memset>:
 8001b20:	4402      	add	r2, r0
 8001b22:	4603      	mov	r3, r0
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d100      	bne.n	8001b2a <memset+0xa>
 8001b28:	4770      	bx	lr
 8001b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b2e:	e7f9      	b.n	8001b24 <memset+0x4>

08001b30 <_init>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	bf00      	nop
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr

08001b3c <_fini>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr
