
ADC_DMA_multichanelscan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002488  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002680  08002680  00012680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080026c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  2000000c  080026d0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000160  080026d0  00020160  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a809  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c14  00000000  00000000  0002a843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038ac  00000000  00000000  0002c457  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006d0  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000958  00000000  00000000  000303d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003d54  00000000  00000000  00030d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002f95  00000000  00000000  00034a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00037a19  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001204  00000000  00000000  00037a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002668 	.word	0x08002668

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002668 	.word	0x08002668

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 fabe 	bl	8000ae0 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 fa6e 	bl	8000a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 fa4c 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 ff21 	bl	80023e4 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005f2:	4604      	mov	r4, r0
 80005f4:	2800      	cmp	r0, #0
 80005f6:	f000 809b 	beq.w	8000730 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005fc:	b925      	cbnz	r5, 8000608 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005fe:	f001 ff09 	bl	8002414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000602:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000604:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800060a:	06db      	lsls	r3, r3, #27
 800060c:	f100 808e 	bmi.w	800072c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ADC_Init+0x144>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	6861      	ldr	r1, [r4, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000632:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000634:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800063c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000644:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000646:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800064e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000654:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000656:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800065e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000664:	4934      	ldr	r1, [pc, #208]	; (8000738 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000666:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000668:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800066a:	428a      	cmp	r2, r1
 800066c:	d052      	beq.n	8000714 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000674:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000676:	6899      	ldr	r1, [r3, #8]
 8000678:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800067a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800067c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800068a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800068c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800068e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000690:	f022 0202 	bic.w	r2, r2, #2
 8000694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800069c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800069e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d03e      	beq.n	8000724 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006a6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ae:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006c0:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006c6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006cc:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006d6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ea:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006fc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006fe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800070c:	2300      	movs	r3, #0
 800070e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000712:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800071a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000722:	e7b2      	b.n	800068a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800072a:	e7c9      	b.n	80006c0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800072c:	2001      	movs	r0, #1
 800072e:	e7ed      	b.n	800070c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
}
 8000732:	bd38      	pop	{r3, r4, r5, pc}
 8000734:	40012300 	.word	0x40012300
 8000738:	0f000001 	.word	0x0f000001

0800073c <HAL_ADC_Start_DMA>:
{
 800073c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800073e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 8000740:	2200      	movs	r2, #0
{
 8000742:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8000744:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000746:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800074a:	2a01      	cmp	r2, #1
 800074c:	d073      	beq.n	8000836 <HAL_ADC_Start_DMA+0xfa>
 800074e:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000750:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000752:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000756:	68aa      	ldr	r2, [r5, #8]
 8000758:	07d0      	lsls	r0, r2, #31
 800075a:	d505      	bpl.n	8000768 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800075c:	68aa      	ldr	r2, [r5, #8]
 800075e:	07d2      	lsls	r2, r2, #31
 8000760:	d415      	bmi.n	800078e <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000762:	2000      	movs	r0, #0
}
 8000764:	b003      	add	sp, #12
 8000766:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000768:	68aa      	ldr	r2, [r5, #8]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <HAL_ADC_Start_DMA+0x100>)
 8000772:	6810      	ldr	r0, [r2, #0]
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <HAL_ADC_Start_DMA+0x104>)
 8000776:	fbb0 f0f2 	udiv	r0, r0, r2
 800077a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800077e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000780:	9a01      	ldr	r2, [sp, #4]
 8000782:	2a00      	cmp	r2, #0
 8000784:	d0ea      	beq.n	800075c <HAL_ADC_Start_DMA+0x20>
      counter--;
 8000786:	9a01      	ldr	r2, [sp, #4]
 8000788:	3a01      	subs	r2, #1
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	e7f8      	b.n	8000780 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800078e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000790:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000794:	f020 0001 	bic.w	r0, r0, #1
 8000798:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800079c:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800079e:	686a      	ldr	r2, [r5, #4]
 80007a0:	0550      	lsls	r0, r2, #21
 80007a2:	d505      	bpl.n	80007b0 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80007a6:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 80007aa:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80007ae:	6420      	str	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007b2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007b6:	d002      	beq.n	80007be <HAL_ADC_Start_DMA+0x82>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007ba:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80007be:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80007c0:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    __HAL_UNLOCK(hadc);   
 80007c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <HAL_ADC_Start_DMA+0x108>)
 80007ca:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_ADC_Start_DMA+0x10c>)
 80007ce:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007d0:	4a1e      	ldr	r2, [pc, #120]	; (800084c <HAL_ADC_Start_DMA+0x110>)
 80007d2:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007d8:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007da:	686a      	ldr	r2, [r5, #4]
 80007dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80007e0:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80007e2:	68aa      	ldr	r2, [r5, #8]
 80007e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007e8:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007ea:	460a      	mov	r2, r1
 80007ec:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80007f0:	f000 fa20 	bl	8000c34 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <HAL_ADC_Start_DMA+0x114>)
 80007f6:	6853      	ldr	r3, [r2, #4]
 80007f8:	f013 0f1f 	tst.w	r3, #31
 80007fc:	6823      	ldr	r3, [r4, #0]
 80007fe:	d108      	bne.n	8000812 <HAL_ADC_Start_DMA+0xd6>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000800:	6898      	ldr	r0, [r3, #8]
 8000802:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000806:	d1ac      	bne.n	8000762 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	e7a8      	b.n	8000764 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000812:	4910      	ldr	r1, [pc, #64]	; (8000854 <HAL_ADC_Start_DMA+0x118>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d107      	bne.n	8000828 <HAL_ADC_Start_DMA+0xec>
 8000818:	6899      	ldr	r1, [r3, #8]
 800081a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800081e:	d103      	bne.n	8000828 <HAL_ADC_Start_DMA+0xec>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000820:	6899      	ldr	r1, [r3, #8]
 8000822:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8000826:	6099      	str	r1, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000828:	6852      	ldr	r2, [r2, #4]
 800082a:	06d2      	lsls	r2, r2, #27
 800082c:	d499      	bmi.n	8000762 <HAL_ADC_Start_DMA+0x26>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_ADC_Start_DMA+0x11c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d196      	bne.n	8000762 <HAL_ADC_Start_DMA+0x26>
 8000834:	e7e4      	b.n	8000800 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8000836:	2002      	movs	r0, #2
 8000838:	e794      	b.n	8000764 <HAL_ADC_Start_DMA+0x28>
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008
 8000840:	000f4240 	.word	0x000f4240
 8000844:	08000883 	.word	0x08000883
 8000848:	08000861 	.word	0x08000861
 800084c:	0800086d 	.word	0x0800086d
 8000850:	40012300 	.word	0x40012300
 8000854:	40012000 	.word	0x40012000
 8000858:	40012200 	.word	0x40012200

0800085c <HAL_ADC_ConvCpltCallback>:
 800085c:	4770      	bx	lr

0800085e <HAL_ADC_ConvHalfCpltCallback>:
 800085e:	4770      	bx	lr

08000860 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000860:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000862:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000864:	f7ff fffb 	bl	800085e <HAL_ADC_ConvHalfCpltCallback>
 8000868:	bd08      	pop	{r3, pc}

0800086a <HAL_ADC_ErrorCallback>:
{
 800086a:	4770      	bx	lr

0800086c <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800086c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800086e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000874:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6443      	str	r3, [r0, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800087c:	f7ff fff5 	bl	800086a <HAL_ADC_ErrorCallback>
 8000880:	bd08      	pop	{r3, pc}

08000882 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000882:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000886:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800088c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800088e:	d123      	bne.n	80008d8 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	6891      	ldr	r1, [r2, #8]
 800089a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800089e:	d117      	bne.n	80008d0 <ADC_DMAConvCplt+0x4e>
 80008a0:	6999      	ldr	r1, [r3, #24]
 80008a2:	b9a9      	cbnz	r1, 80008d0 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008a6:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80008aa:	d002      	beq.n	80008b2 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008ac:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008ae:	0548      	lsls	r0, r1, #21
 80008b0:	d40e      	bmi.n	80008d0 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008b2:	6851      	ldr	r1, [r2, #4]
 80008b4:	f021 0120 	bic.w	r1, r1, #32
 80008b8:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c0:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c4:	04d1      	lsls	r1, r2, #19
 80008c6:	d403      	bmi.n	80008d0 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ca:	f042 0201 	orr.w	r2, r2, #1
 80008ce:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffc3 	bl	800085c <HAL_ADC_ConvCpltCallback>
 80008d6:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80008d8:	06d2      	lsls	r2, r2, #27
 80008da:	d503      	bpl.n	80008e4 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffc4 	bl	800086a <HAL_ADC_ErrorCallback>
 80008e2:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80008e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4718      	bx	r3
	...

080008f0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80008f0:	2300      	movs	r3, #0
{
 80008f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80008f4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d071      	beq.n	80009e2 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80008fe:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000900:	2301      	movs	r3, #1
 8000902:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000904:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000906:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800090a:	b2ae      	uxth	r6, r5
 800090c:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800090e:	d931      	bls.n	8000974 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000910:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000914:	f04f 0e07 	mov.w	lr, #7
 8000918:	68e7      	ldr	r7, [r4, #12]
 800091a:	3b1e      	subs	r3, #30
 800091c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000920:	ea27 070e 	bic.w	r7, r7, lr
 8000924:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000926:	4f3d      	ldr	r7, [pc, #244]	; (8000a1c <HAL_ADC_ConfigChannel+0x12c>)
 8000928:	42bd      	cmp	r5, r7
 800092a:	d11e      	bne.n	800096a <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800092c:	68e3      	ldr	r3, [r4, #12]
 800092e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000932:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8000934:	684a      	ldr	r2, [r1, #4]
 8000936:	2a06      	cmp	r2, #6
 8000938:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800093c:	d82a      	bhi.n	8000994 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800093e:	4413      	add	r3, r2
 8000940:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000942:	1f59      	subs	r1, r3, #5
 8000944:	231f      	movs	r3, #31
 8000946:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000948:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800094c:	ea27 0303 	bic.w	r3, r7, r3
 8000950:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000952:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000954:	4311      	orrs	r1, r2
 8000956:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000958:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <HAL_ADC_ConfigChannel+0x130>)
 800095a:	429c      	cmp	r4, r3
 800095c:	d039      	beq.n	80009d2 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 800095e:	2300      	movs	r3, #0
 8000960:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000964:	4618      	mov	r0, r3
}
 8000966:	b003      	add	sp, #12
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800096a:	68e7      	ldr	r7, [r4, #12]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	433b      	orrs	r3, r7
 8000972:	e7de      	b.n	8000932 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000974:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000978:	f04f 0e07 	mov.w	lr, #7
 800097c:	6927      	ldr	r7, [r4, #16]
 800097e:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000986:	ea27 070e 	bic.w	r7, r7, lr
 800098a:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800098c:	6927      	ldr	r7, [r4, #16]
 800098e:	433b      	orrs	r3, r7
 8000990:	6123      	str	r3, [r4, #16]
 8000992:	e7cf      	b.n	8000934 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000994:	2a0c      	cmp	r2, #12
 8000996:	d80e      	bhi.n	80009b6 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000998:	4413      	add	r3, r2
 800099a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800099c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80009a0:	231f      	movs	r3, #31
 80009a2:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009a4:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009a8:	ea21 0303 	bic.w	r3, r1, r3
 80009ac:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009b0:	431a      	orrs	r2, r3
 80009b2:	6322      	str	r2, [r4, #48]	; 0x30
 80009b4:	e7d0      	b.n	8000958 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009b6:	4413      	add	r3, r2
 80009b8:	221f      	movs	r2, #31
 80009ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009bc:	3b41      	subs	r3, #65	; 0x41
 80009be:	409a      	lsls	r2, r3
 80009c0:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009c4:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009cc:	4311      	orrs	r1, r2
 80009ce:	62e1      	str	r1, [r4, #44]	; 0x2c
 80009d0:	e7c2      	b.n	8000958 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009d2:	2d12      	cmp	r5, #18
 80009d4:	d107      	bne.n	80009e6 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_ADC_ConfigChannel+0x134>)
 80009d8:	6853      	ldr	r3, [r2, #4]
 80009da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009de:	6053      	str	r3, [r2, #4]
 80009e0:	e7bd      	b.n	800095e <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80009e2:	2002      	movs	r0, #2
 80009e4:	e7bf      	b.n	8000966 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_ADC_ConfigChannel+0x12c>)
 80009e8:	429d      	cmp	r5, r3
 80009ea:	d001      	beq.n	80009f0 <HAL_ADC_ConfigChannel+0x100>
 80009ec:	2d11      	cmp	r5, #17
 80009ee:	d1b6      	bne.n	800095e <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009f2:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80009f4:	684a      	ldr	r2, [r1, #4]
 80009f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009fa:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009fc:	d1af      	bne.n	800095e <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_ADC_ConfigChannel+0x138>)
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_ADC_ConfigChannel+0x13c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a08:	230a      	movs	r3, #10
 8000a0a:	4353      	muls	r3, r2
        counter--;
 8000a0c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000a0e:	9b01      	ldr	r3, [sp, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0a4      	beq.n	800095e <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8000a14:	9b01      	ldr	r3, [sp, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	e7f8      	b.n	8000a0c <HAL_ADC_ConfigChannel+0x11c>
 8000a1a:	bf00      	nop
 8000a1c:	10000012 	.word	0x10000012
 8000a20:	40012000 	.word	0x40012000
 8000a24:	40012300 	.word	0x40012300
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	000f4240 	.word	0x000f4240

08000a30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a32:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a4c:	60d3      	str	r3, [r2, #12]
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b530      	push	{r4, r5, lr}
 8000a58:	68dc      	ldr	r4, [r3, #12]
 8000a5a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	bf28      	it	cs
 8000a68:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a70:	bf8c      	ite	hi
 8000a72:	3c03      	subhi	r4, #3
 8000a74:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a76:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000a80:	ea01 0103 	and.w	r1, r1, r3
 8000a84:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	fa05 f404 	lsl.w	r4, r5, r4
 8000a8c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000a90:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	ea42 0201 	orr.w	r2, r2, r1
 8000a98:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	db07      	blt.n	8000aae <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000aa8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000aac:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	f000 000f 	and.w	r0, r0, #15
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_NVIC_SetPriority+0x6c>)
 8000ab6:	541a      	strb	r2, [r3, r0]
 8000ab8:	bd30      	pop	{r4, r5, pc}
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	e000ed14 	.word	0xe000ed14

08000ac4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	db08      	blt.n	8000ada <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac8:	0942      	lsrs	r2, r0, #5
 8000aca:	2301      	movs	r3, #1
 8000acc:	f000 001f 	and.w	r0, r0, #31
 8000ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ad4:	4b01      	ldr	r3, [pc, #4]	; (8000adc <HAL_NVIC_EnableIRQ+0x18>)
 8000ad6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	3801      	subs	r0, #1
 8000ae2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ae6:	d20a      	bcs.n	8000afe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	21f0      	movs	r1, #240	; 0xf0
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b0c:	6803      	ldr	r3, [r0, #0]
 8000b0e:	2118      	movs	r1, #24
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000b16:	3a10      	subs	r2, #16
 8000b18:	f023 0303 	bic.w	r3, r3, #3
 8000b1c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b20:	4904      	ldr	r1, [pc, #16]	; (8000b34 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000b22:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b24:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000b26:	bf88      	it	hi
 8000b28:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000b2a:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000b2c:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000b2e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	08002680 	.word	0x08002680

08000b38 <HAL_DMA_Init>:
{
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff fd40 	bl	80005c0 <HAL_GetTick>
 8000b40:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d071      	beq.n	8000c2a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000b46:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000b48:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000b4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b54:	6813      	ldr	r3, [r2, #0]
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b5c:	6821      	ldr	r1, [r4, #0]
 8000b5e:	680b      	ldr	r3, [r1, #0]
 8000b60:	07d8      	lsls	r0, r3, #31
 8000b62:	d43c      	bmi.n	8000bde <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000b64:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b66:	4d32      	ldr	r5, [pc, #200]	; (8000c30 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b68:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000b6a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b6c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b6e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b70:	4313      	orrs	r3, r2
 8000b72:	68e2      	ldr	r2, [r4, #12]
 8000b74:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b76:	6922      	ldr	r2, [r4, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	6962      	ldr	r2, [r4, #20]
 8000b7c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b7e:	69e2      	ldr	r2, [r4, #28]
 8000b80:	4303      	orrs	r3, r0
 8000b82:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b84:	6a22      	ldr	r2, [r4, #32]
 8000b86:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b8a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000b8c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000b90:	bf01      	itttt	eq
 8000b92:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000b94:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000b96:	4335      	orreq	r5, r6
 8000b98:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000b9a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000b9c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000b9e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ba0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000ba4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000baa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000bac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000bae:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000bb0:	b13d      	cbz	r5, 8000bc2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000bb2:	b9f8      	cbnz	r0, 8000bf4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000bb4:	2a01      	cmp	r2, #1
 8000bb6:	d02d      	beq.n	8000c14 <HAL_DMA_Init+0xdc>
 8000bb8:	d301      	bcc.n	8000bbe <HAL_DMA_Init+0x86>
 8000bba:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bbc:	d101      	bne.n	8000bc2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000bbe:	01ea      	lsls	r2, r5, #7
 8000bc0:	d42b      	bmi.n	8000c1a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000bc2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	f7ff ffa1 	bl	8000b0c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000bcc:	233f      	movs	r3, #63	; 0x3f
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000bd4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000bd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000bdc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bde:	f7ff fcef 	bl	80005c0 <HAL_GetTick>
 8000be2:	1b40      	subs	r0, r0, r5
 8000be4:	2805      	cmp	r0, #5
 8000be6:	d9b9      	bls.n	8000b5c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000be8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bea:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bec:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000bee:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bf4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000bf8:	d113      	bne.n	8000c22 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000bfa:	2a03      	cmp	r2, #3
 8000bfc:	d8e1      	bhi.n	8000bc2 <HAL_DMA_Init+0x8a>
 8000bfe:	a001      	add	r0, pc, #4	; (adr r0, 8000c04 <HAL_DMA_Init+0xcc>)
 8000c00:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000c04:	08000c1b 	.word	0x08000c1b
 8000c08:	08000bbf 	.word	0x08000bbf
 8000c0c:	08000c1b 	.word	0x08000c1b
 8000c10:	08000c15 	.word	0x08000c15
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c14:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000c18:	d1d3      	bne.n	8000bc2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c1a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000c1c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c1e:	6563      	str	r3, [r4, #84]	; 0x54
 8000c20:	e7e5      	b.n	8000bee <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000c22:	2a02      	cmp	r2, #2
 8000c24:	d9f9      	bls.n	8000c1a <HAL_DMA_Init+0xe2>
 8000c26:	2a03      	cmp	r2, #3
 8000c28:	e7c8      	b.n	8000bbc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	bf00      	nop
 8000c30:	e010803f 	.word	0xe010803f

08000c34 <HAL_DMA_Start_IT>:
{
 8000c34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000c36:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000c3a:	2c01      	cmp	r4, #1
 8000c3c:	d035      	beq.n	8000caa <HAL_DMA_Start_IT+0x76>
 8000c3e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c40:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000c42:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000c44:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c48:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000c4c:	2c01      	cmp	r4, #1
 8000c4e:	f04f 0402 	mov.w	r4, #2
 8000c52:	d128      	bne.n	8000ca6 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c54:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c58:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c5a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c5c:	6825      	ldr	r5, [r4, #0]
 8000c5e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000c62:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000c64:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c66:	6883      	ldr	r3, [r0, #8]
 8000c68:	2b40      	cmp	r3, #64	; 0x40
 8000c6a:	d119      	bne.n	8000ca0 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000c6c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000c6e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c70:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000c72:	233f      	movs	r3, #63	; 0x3f
 8000c74:	4093      	lsls	r3, r2
 8000c76:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	f043 0316 	orr.w	r3, r3, #22
 8000c7e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000c80:	6963      	ldr	r3, [r4, #20]
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c8a:	b11b      	cbz	r3, 8000c94 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c94:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c96:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000ca0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000ca2:	60e2      	str	r2, [r4, #12]
 8000ca4:	e7e4      	b.n	8000c70 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000ca6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000caa:	2002      	movs	r0, #2
}
 8000cac:	bd70      	pop	{r4, r5, r6, pc}

08000cae <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d003      	beq.n	8000cbe <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000cbe:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8000cc6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000cd4:	2300      	movs	r3, #0
{
 8000cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000cd8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cda:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000cdc:	4b59      	ldr	r3, [pc, #356]	; (8000e44 <HAL_DMA_IRQHandler+0x170>)
{
 8000cde:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ce0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000ce2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000ce6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	4216      	tst	r6, r2
 8000cec:	d00c      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cee:	6801      	ldr	r1, [r0, #0]
 8000cf0:	6808      	ldr	r0, [r1, #0]
 8000cf2:	0740      	lsls	r0, r0, #29
 8000cf4:	d508      	bpl.n	8000d08 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cf6:	6808      	ldr	r0, [r1, #0]
 8000cf8:	f020 0004 	bic.w	r0, r0, #4
 8000cfc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cfe:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000d00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	4216      	tst	r6, r2
 8000d0e:	d008      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000d10:	6821      	ldr	r1, [r4, #0]
 8000d12:	6949      	ldr	r1, [r1, #20]
 8000d14:	0609      	lsls	r1, r1, #24
 8000d16:	d504      	bpl.n	8000d22 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000d18:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000d1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d1c:	f042 0202 	orr.w	r2, r2, #2
 8000d20:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d22:	2204      	movs	r2, #4
 8000d24:	409a      	lsls	r2, r3
 8000d26:	4216      	tst	r6, r2
 8000d28:	d008      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000d2a:	6821      	ldr	r1, [r4, #0]
 8000d2c:	6809      	ldr	r1, [r1, #0]
 8000d2e:	0788      	lsls	r0, r1, #30
 8000d30:	d504      	bpl.n	8000d3c <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d32:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d34:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d36:	f042 0204 	orr.w	r2, r2, #4
 8000d3a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	4216      	tst	r6, r2
 8000d42:	d010      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	0709      	lsls	r1, r1, #28
 8000d4a:	d50c      	bpl.n	8000d66 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d4c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	0350      	lsls	r0, r2, #13
 8000d52:	d535      	bpl.n	8000dc0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0319      	lsls	r1, r3, #12
 8000d58:	d401      	bmi.n	8000d5e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d5c:	e000      	b.n	8000d60 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d60:	b10b      	cbz	r3, 8000d66 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d62:	4620      	mov	r0, r4
 8000d64:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000d68:	2220      	movs	r2, #32
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	4216      	tst	r6, r2
 8000d6e:	d038      	beq.n	8000de2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	06c6      	lsls	r6, r0, #27
 8000d76:	d534      	bpl.n	8000de2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d78:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d7a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000d7e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d80:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d82:	d125      	bne.n	8000dd0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d84:	f022 0216 	bic.w	r2, r2, #22
 8000d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d90:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d94:	b90a      	cbnz	r2, 8000d9a <HAL_DMA_IRQHandler+0xc6>
 8000d96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000d98:	b11a      	cbz	r2, 8000da2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f022 0208 	bic.w	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000da2:	233f      	movs	r3, #63	; 0x3f
 8000da4:	408b      	lsls	r3, r1
 8000da6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000da8:	2300      	movs	r3, #0
 8000daa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000db4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000db6:	b10b      	cbz	r3, 8000dbc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000db8:	4620      	mov	r0, r4
 8000dba:	4798      	blx	r3
}
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	05d2      	lsls	r2, r2, #23
 8000dc4:	d4c9      	bmi.n	8000d5a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f022 0208 	bic.w	r2, r2, #8
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e7c4      	b.n	8000d5a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000dd0:	0350      	lsls	r0, r2, #13
 8000dd2:	d528      	bpl.n	8000e26 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0319      	lsls	r1, r3, #12
 8000dd8:	d432      	bmi.n	8000e40 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000dda:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ddc:	b10b      	cbz	r3, 8000de2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000dde:	4620      	mov	r0, r4
 8000de0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000de2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0e9      	beq.n	8000dbc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000de8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dea:	07da      	lsls	r2, r3, #31
 8000dec:	d519      	bpl.n	8000e22 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dee:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000df0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000dfe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e02:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000e06:	9b01      	ldr	r3, [sp, #4]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	d302      	bcc.n	8000e16 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e10:	6813      	ldr	r3, [r2, #0]
 8000e12:	07db      	lsls	r3, r3, #31
 8000e14:	d4f7      	bmi.n	8000e06 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000e16:	2300      	movs	r3, #0
 8000e18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000e22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e24:	e7c7      	b.n	8000db6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000e2c:	d108      	bne.n	8000e40 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e2e:	6819      	ldr	r1, [r3, #0]
 8000e30:	f021 0110 	bic.w	r1, r1, #16
 8000e34:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e36:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000e38:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e42:	e7cb      	b.n	8000ddc <HAL_DMA_IRQHandler+0x108>
 8000e44:	20000008 	.word	0x20000008

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4c:	680b      	ldr	r3, [r1, #0]
{
 8000e4e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001014 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e54:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e58:	4a6c      	ldr	r2, [pc, #432]	; (800100c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e5a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001018 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e5e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e64:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e68:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e6c:	45b6      	cmp	lr, r6
 8000e6e:	f040 80b3 	bne.w	8000fd8 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e72:	684c      	ldr	r4, [r1, #4]
 8000e74:	f024 0710 	bic.w	r7, r4, #16
 8000e78:	2f02      	cmp	r7, #2
 8000e7a:	d116      	bne.n	8000eaa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e7c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e80:	f003 0b07 	and.w	fp, r3, #7
 8000e84:	f04f 0c0f 	mov.w	ip, #15
 8000e88:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e8c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000e90:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e94:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e98:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e9c:	690d      	ldr	r5, [r1, #16]
 8000e9e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ea2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ea6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000eaa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000eb0:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eb8:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ebe:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec2:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec4:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eca:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ece:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed2:	d811      	bhi.n	8000ef8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ed4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ed6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eda:	68cf      	ldr	r7, [r1, #12]
 8000edc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ee0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ee4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ee6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ef0:	409f      	lsls	r7, r3
 8000ef2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ef6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ef8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000efa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000efc:	688f      	ldr	r7, [r1, #8]
 8000efe:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f02:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f04:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f06:	00e5      	lsls	r5, r4, #3
 8000f08:	d566      	bpl.n	8000fd8 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f0e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f12:	f003 0e03 	and.w	lr, r3, #3
 8000f16:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f1e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f2a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f2e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f32:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f36:	9503      	str	r5, [sp, #12]
 8000f38:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f3a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f3e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f42:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f46:	4d32      	ldr	r5, [pc, #200]	; (8001010 <HAL_GPIO_Init+0x1c8>)
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	d04c      	beq.n	8000fe6 <HAL_GPIO_Init+0x19e>
 8000f4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f50:	42a8      	cmp	r0, r5
 8000f52:	d04a      	beq.n	8000fea <HAL_GPIO_Init+0x1a2>
 8000f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f58:	42a8      	cmp	r0, r5
 8000f5a:	d048      	beq.n	8000fee <HAL_GPIO_Init+0x1a6>
 8000f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d046      	beq.n	8000ff2 <HAL_GPIO_Init+0x1aa>
 8000f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d044      	beq.n	8000ff6 <HAL_GPIO_Init+0x1ae>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d044      	beq.n	8000ffa <HAL_GPIO_Init+0x1b2>
 8000f70:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f74:	42a8      	cmp	r0, r5
 8000f76:	d042      	beq.n	8000ffe <HAL_GPIO_Init+0x1b6>
 8000f78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	d040      	beq.n	8001002 <HAL_GPIO_Init+0x1ba>
 8000f80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f84:	42a8      	cmp	r0, r5
 8000f86:	d03e      	beq.n	8001006 <HAL_GPIO_Init+0x1be>
 8000f88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	bf14      	ite	ne
 8000f90:	250a      	movne	r5, #10
 8000f92:	2509      	moveq	r5, #9
 8000f94:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f9c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fa0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000fa6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	bf0c      	ite	eq
 8000faa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fac:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000fb2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fb4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	bf0c      	ite	eq
 8000fb8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fba:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fc0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fc2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf0c      	ite	eq
 8000fc6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fc8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fca:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fcc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fce:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	bf54      	ite	pl
 8000fd2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fd4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fd6:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd8:	3301      	adds	r3, #1
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	f47f af3f 	bne.w	8000e5e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fe0:	b005      	add	sp, #20
 8000fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	e7d4      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000fea:	2501      	movs	r5, #1
 8000fec:	e7d2      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000fee:	2502      	movs	r5, #2
 8000ff0:	e7d0      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000ff2:	2503      	movs	r5, #3
 8000ff4:	e7ce      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000ff6:	2504      	movs	r5, #4
 8000ff8:	e7cc      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000ffa:	2505      	movs	r5, #5
 8000ffc:	e7ca      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8000ffe:	2506      	movs	r5, #6
 8001000:	e7c8      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8001002:	2507      	movs	r5, #7
 8001004:	e7c6      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 8001006:	2508      	movs	r5, #8
 8001008:	e7c4      	b.n	8000f94 <HAL_GPIO_Init+0x14c>
 800100a:	bf00      	nop
 800100c:	40013c00 	.word	0x40013c00
 8001010:	40020000 	.word	0x40020000
 8001014:	40023800 	.word	0x40023800
 8001018:	40021400 	.word	0x40021400

0800101c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	b10a      	cbz	r2, 8001022 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800101e:	6181      	str	r1, [r0, #24]
 8001020:	4770      	bx	lr
 8001022:	0409      	lsls	r1, r1, #16
 8001024:	e7fb      	b.n	800101e <HAL_GPIO_WritePin+0x2>
	...

08001028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	4604      	mov	r4, r0
 800102e:	b918      	cbnz	r0, 8001038 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001032:	b002      	add	sp, #8
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001038:	6803      	ldr	r3, [r0, #0]
 800103a:	07d8      	lsls	r0, r3, #31
 800103c:	d410      	bmi.n	8001060 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	0799      	lsls	r1, r3, #30
 8001042:	d45e      	bmi.n	8001102 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	0719      	lsls	r1, r3, #28
 8001048:	f100 80a3 	bmi.w	8001192 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	075a      	lsls	r2, r3, #29
 8001050:	f100 80c4 	bmi.w	80011dc <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001054:	69a2      	ldr	r2, [r4, #24]
 8001056:	2a00      	cmp	r2, #0
 8001058:	f040 812e 	bne.w	80012b8 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 800105c:	2000      	movs	r0, #0
 800105e:	e7e8      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001060:	4b93      	ldr	r3, [pc, #588]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	f002 020c 	and.w	r2, r2, #12
 8001068:	2a04      	cmp	r2, #4
 800106a:	d007      	beq.n	800107c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f002 020c 	and.w	r2, r2, #12
 8001072:	2a08      	cmp	r2, #8
 8001074:	d10a      	bne.n	800108c <HAL_RCC_OscConfig+0x64>
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	025a      	lsls	r2, r3, #9
 800107a:	d507      	bpl.n	800108c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	039b      	lsls	r3, r3, #14
 8001082:	d5dc      	bpl.n	800103e <HAL_RCC_OscConfig+0x16>
 8001084:	6863      	ldr	r3, [r4, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1d9      	bne.n	800103e <HAL_RCC_OscConfig+0x16>
 800108a:	e7d1      	b.n	8001030 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	4d88      	ldr	r5, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d111      	bne.n	80010ba <HAL_RCC_OscConfig+0x92>
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fa8f 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4d83      	ldr	r5, [pc, #524]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80010a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	039f      	lsls	r7, r3, #14
 80010aa:	d4c8      	bmi.n	800103e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fa88 	bl	80005c0 <HAL_GetTick>
 80010b0:	1b80      	subs	r0, r0, r6
 80010b2:	2864      	cmp	r0, #100	; 0x64
 80010b4:	d9f7      	bls.n	80010a6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e7bb      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ba:	b99b      	cbnz	r3, 80010e4 <HAL_RCC_OscConfig+0xbc>
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	602b      	str	r3, [r5, #0]
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010cc:	f7ff fa78 	bl	80005c0 <HAL_GetTick>
 80010d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	682b      	ldr	r3, [r5, #0]
 80010d4:	0398      	lsls	r0, r3, #14
 80010d6:	d5b2      	bpl.n	800103e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fa72 	bl	80005c0 <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2864      	cmp	r0, #100	; 0x64
 80010e0:	d9f7      	bls.n	80010d2 <HAL_RCC_OscConfig+0xaa>
 80010e2:	e7e8      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	d103      	bne.n	80010f4 <HAL_RCC_OscConfig+0xcc>
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	e7d0      	b.n	8001096 <HAL_RCC_OscConfig+0x6e>
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f8:	602b      	str	r3, [r5, #0]
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001100:	e7cc      	b.n	800109c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f012 0f0c 	tst.w	r2, #12
 800110a:	d007      	beq.n	800111c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f002 020c 	and.w	r2, r2, #12
 8001112:	2a08      	cmp	r2, #8
 8001114:	d111      	bne.n	800113a <HAL_RCC_OscConfig+0x112>
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	0259      	lsls	r1, r3, #9
 800111a:	d40e      	bmi.n	800113a <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	0792      	lsls	r2, r2, #30
 8001122:	d502      	bpl.n	800112a <HAL_RCC_OscConfig+0x102>
 8001124:	68e2      	ldr	r2, [r4, #12]
 8001126:	2a01      	cmp	r2, #1
 8001128:	d182      	bne.n	8001030 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	6921      	ldr	r1, [r4, #16]
 800112e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001132:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001136:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001138:	e784      	b.n	8001044 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800113a:	68e3      	ldr	r3, [r4, #12]
 800113c:	4d5c      	ldr	r5, [pc, #368]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 800113e:	b1bb      	cbz	r3, 8001170 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001148:	f7ff fa3a 	bl	80005c0 <HAL_GetTick>
 800114c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	079f      	lsls	r7, r3, #30
 8001152:	d507      	bpl.n	8001164 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	6922      	ldr	r2, [r4, #16]
 8001158:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800115c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001160:	602b      	str	r3, [r5, #0]
 8001162:	e76f      	b.n	8001044 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fa2c 	bl	80005c0 <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	2802      	cmp	r0, #2
 800116c:	d9ef      	bls.n	800114e <HAL_RCC_OscConfig+0x126>
 800116e:	e7a2      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001178:	f7ff fa22 	bl	80005c0 <HAL_GetTick>
 800117c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	0798      	lsls	r0, r3, #30
 8001182:	f57f af5f 	bpl.w	8001044 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fa1b 	bl	80005c0 <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x156>
 8001190:	e791      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001192:	6963      	ldr	r3, [r4, #20]
 8001194:	4d46      	ldr	r5, [pc, #280]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 8001196:	b183      	cbz	r3, 80011ba <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001198:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011a0:	f7ff fa0e 	bl	80005c0 <HAL_GetTick>
 80011a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011a8:	079b      	lsls	r3, r3, #30
 80011aa:	f53f af4f 	bmi.w	800104c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fa07 	bl	80005c0 <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f6      	bls.n	80011a6 <HAL_RCC_OscConfig+0x17e>
 80011b8:	e77d      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80011ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80011c2:	f7ff f9fd 	bl	80005c0 <HAL_GetTick>
 80011c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011ca:	079f      	lsls	r7, r3, #30
 80011cc:	f57f af3e 	bpl.w	800104c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff f9f6 	bl	80005c0 <HAL_GetTick>
 80011d4:	1b80      	subs	r0, r0, r6
 80011d6:	2802      	cmp	r0, #2
 80011d8:	d9f6      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1a0>
 80011da:	e76c      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	00d0      	lsls	r0, r2, #3
 80011e2:	d427      	bmi.n	8001234 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80011e6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f8:	4d2e      	ldr	r5, [pc, #184]	; (80012b4 <HAL_RCC_OscConfig+0x28c>)
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	05d9      	lsls	r1, r3, #23
 80011fe:	d51b      	bpl.n	8001238 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	68a3      	ldr	r3, [r4, #8]
 8001202:	4d2b      	ldr	r5, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 8001204:	2b01      	cmp	r3, #1
 8001206:	d127      	bne.n	8001258 <HAL_RCC_OscConfig+0x230>
 8001208:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001214:	f7ff f9d4 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	4f25      	ldr	r7, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800121a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800121e:	079b      	lsls	r3, r3, #30
 8001220:	d53f      	bpl.n	80012a2 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8001222:	2e00      	cmp	r6, #0
 8001224:	f43f af16 	beq.w	8001054 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_RCC_OscConfig+0x288>)
 800122a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800122c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	e70f      	b.n	8001054 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001234:	2600      	movs	r6, #0
 8001236:	e7df      	b.n	80011f8 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001240:	f7ff f9be 	bl	80005c0 <HAL_GetTick>
 8001244:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	05da      	lsls	r2, r3, #23
 800124a:	d4d9      	bmi.n	8001200 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff f9b8 	bl	80005c0 <HAL_GetTick>
 8001250:	1bc0      	subs	r0, r0, r7
 8001252:	2864      	cmp	r0, #100	; 0x64
 8001254:	d9f7      	bls.n	8001246 <HAL_RCC_OscConfig+0x21e>
 8001256:	e72e      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	b9ab      	cbnz	r3, 8001286 <HAL_RCC_OscConfig+0x25e>
 800125a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	672b      	str	r3, [r5, #112]	; 0x70
 8001266:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800126e:	f7ff f9a7 	bl	80005c0 <HAL_GetTick>
 8001272:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001276:	0798      	lsls	r0, r3, #30
 8001278:	d5d3      	bpl.n	8001222 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff f9a1 	bl	80005c0 <HAL_GetTick>
 800127e:	1bc0      	subs	r0, r0, r7
 8001280:	4540      	cmp	r0, r8
 8001282:	d9f7      	bls.n	8001274 <HAL_RCC_OscConfig+0x24c>
 8001284:	e717      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001286:	2b05      	cmp	r3, #5
 8001288:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800128a:	d103      	bne.n	8001294 <HAL_RCC_OscConfig+0x26c>
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	672b      	str	r3, [r5, #112]	; 0x70
 8001292:	e7b9      	b.n	8001208 <HAL_RCC_OscConfig+0x1e0>
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	672b      	str	r3, [r5, #112]	; 0x70
 800129a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	e7b5      	b.n	800120e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff f98d 	bl	80005c0 <HAL_GetTick>
 80012a6:	eba0 0008 	sub.w	r0, r0, r8
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d9b6      	bls.n	800121c <HAL_RCC_OscConfig+0x1f4>
 80012ae:	e702      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	4d24      	ldr	r5, [pc, #144]	; (800134c <HAL_RCC_OscConfig+0x324>)
 80012ba:	68ab      	ldr	r3, [r5, #8]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	f43f aeb5 	beq.w	8001030 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80012c6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80012ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012ce:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d0:	d12f      	bne.n	8001332 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80012d2:	f7ff f975 	bl	80005c0 <HAL_GetTick>
 80012d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	0199      	lsls	r1, r3, #6
 80012dc:	d423      	bmi.n	8001326 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012de:	6a22      	ldr	r2, [r4, #32]
 80012e0:	69e3      	ldr	r3, [r4, #28]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f8:	4c14      	ldr	r4, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fa:	0852      	lsrs	r2, r2, #1
 80012fc:	3a01      	subs	r2, #1
 80012fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001302:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800130c:	f7ff f958 	bl	80005c0 <HAL_GetTick>
 8001310:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	019a      	lsls	r2, r3, #6
 8001316:	f53f aea1 	bmi.w	800105c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131a:	f7ff f951 	bl	80005c0 <HAL_GetTick>
 800131e:	1b40      	subs	r0, r0, r5
 8001320:	2802      	cmp	r0, #2
 8001322:	d9f6      	bls.n	8001312 <HAL_RCC_OscConfig+0x2ea>
 8001324:	e6c7      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff f94b 	bl	80005c0 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	2802      	cmp	r0, #2
 800132e:	d9d3      	bls.n	80012d8 <HAL_RCC_OscConfig+0x2b0>
 8001330:	e6c1      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001332:	f7ff f945 	bl	80005c0 <HAL_GetTick>
 8001336:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	f57f ae8e 	bpl.w	800105c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff f93e 	bl	80005c0 <HAL_GetTick>
 8001344:	1b00      	subs	r0, r0, r4
 8001346:	2802      	cmp	r0, #2
 8001348:	d9f6      	bls.n	8001338 <HAL_RCC_OscConfig+0x310>
 800134a:	e6b4      	b.n	80010b6 <HAL_RCC_OscConfig+0x8e>
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001350:	4910      	ldr	r1, [pc, #64]	; (8001394 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8001352:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001354:	688b      	ldr	r3, [r1, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d118      	bne.n	8001390 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800135e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001360:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001362:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001364:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001368:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <HAL_RCC_GetSysClockFreq+0x48>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001372:	bf18      	it	ne
 8001374:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001376:	fba1 0100 	umull	r0, r1, r1, r0
 800137a:	f7fe ff5d 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetSysClockFreq+0x44>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001386:	3301      	adds	r3, #1
 8001388:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800138a:	fbb0 f0f3 	udiv	r0, r0, r3
 800138e:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001392:	bd08      	pop	{r3, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	00f42400 	.word	0x00f42400

0800139c <HAL_RCC_ClockConfig>:
{
 800139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013a2:	4604      	mov	r4, r0
 80013a4:	b910      	cbnz	r0, 80013ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013a6:	2001      	movs	r0, #1
 80013a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ac:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <HAL_RCC_ClockConfig+0x12c>)
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d328      	bcc.n	800140a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	6821      	ldr	r1, [r4, #0]
 80013ba:	078f      	lsls	r7, r1, #30
 80013bc:	d430      	bmi.n	8001420 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	07c8      	lsls	r0, r1, #31
 80013c0:	d443      	bmi.n	800144a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013c2:	4a41      	ldr	r2, [pc, #260]	; (80014c8 <HAL_RCC_ClockConfig+0x12c>)
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	429d      	cmp	r5, r3
 80013cc:	d367      	bcc.n	800149e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	0751      	lsls	r1, r2, #29
 80013d2:	d470      	bmi.n	80014b6 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d4:	0713      	lsls	r3, r2, #28
 80013d6:	d507      	bpl.n	80013e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d8:	4a3c      	ldr	r2, [pc, #240]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
 80013da:	6921      	ldr	r1, [r4, #16]
 80013dc:	6893      	ldr	r3, [r2, #8]
 80013de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e8:	f7ff ffb2 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
 80013ee:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <HAL_RCC_ClockConfig+0x134>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	40d8      	lsrs	r0, r3
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCC_ClockConfig+0x138>)
 80013fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff f8a2 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8001404:	2000      	movs	r0, #0
 8001406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f023 030f 	bic.w	r3, r3, #15
 8001410:	430b      	orrs	r3, r1
 8001412:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	4299      	cmp	r1, r3
 800141c:	d1c3      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xa>
 800141e:	e7cb      	b.n	80013b8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	f011 0f04 	tst.w	r1, #4
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
 8001426:	d003      	beq.n	8001430 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800142e:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	070e      	lsls	r6, r1, #28
 8001432:	d503      	bpl.n	800143c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800143a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68a0      	ldr	r0, [r4, #8]
 8001440:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001444:	4302      	orrs	r2, r0
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e7b9      	b.n	80013be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	6861      	ldr	r1, [r4, #4]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
 800144e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001450:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001452:	d11c      	bne.n	800148e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	d0a5      	beq.n	80013a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001460:	4e1a      	ldr	r6, [pc, #104]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	f022 0203 	bic.w	r2, r2, #3
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800146a:	f7ff f8a9 	bl	80005c0 <HAL_GetTick>
 800146e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001470:	68b3      	ldr	r3, [r6, #8]
 8001472:	6862      	ldr	r2, [r4, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800147c:	d0a1      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f89f 	bl	80005c0 <HAL_GetTick>
 8001482:	1bc0      	subs	r0, r0, r7
 8001484:	4540      	cmp	r0, r8
 8001486:	d9f3      	bls.n	8001470 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001488:	2003      	movs	r0, #3
}
 800148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800148e:	2902      	cmp	r1, #2
 8001490:	d102      	bne.n	8001498 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001496:	e7df      	b.n	8001458 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001498:	f012 0f02 	tst.w	r2, #2
 800149c:	e7dc      	b.n	8001458 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	f023 030f 	bic.w	r3, r3, #15
 80014a4:	432b      	orrs	r3, r5
 80014a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	429d      	cmp	r5, r3
 80014b0:	f47f af79 	bne.w	80013a6 <HAL_RCC_ClockConfig+0xa>
 80014b4:	e78b      	b.n	80013ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b6:	4905      	ldr	r1, [pc, #20]	; (80014cc <HAL_RCC_ClockConfig+0x130>)
 80014b8:	68e0      	ldr	r0, [r4, #12]
 80014ba:	688b      	ldr	r3, [r1, #8]
 80014bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014c0:	4303      	orrs	r3, r0
 80014c2:	608b      	str	r3, [r1, #8]
 80014c4:	e786      	b.n	80013d4 <HAL_RCC_ClockConfig+0x38>
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00
 80014cc:	40023800 	.word	0x40023800
 80014d0:	08002699 	.word	0x08002699
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014e2:	5cd3      	ldrb	r3, [r2, r3]
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014e6:	6810      	ldr	r0, [r2, #0]
}
 80014e8:	40d8      	lsrs	r0, r3
 80014ea:	4770      	bx	lr
 80014ec:	40023800 	.word	0x40023800
 80014f0:	080026a9 	.word	0x080026a9
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_RCC_GetPCLK2Freq+0x14>)
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001506:	6810      	ldr	r0, [r2, #0]
}
 8001508:	40d8      	lsrs	r0, r3
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	080026a9 	.word	0x080026a9
 8001514:	20000008 	.word	0x20000008

08001518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800151c:	6802      	ldr	r2, [r0, #0]
{
 800151e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001520:	f012 0601 	ands.w	r6, r2, #1
 8001524:	d00b      	beq.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001526:	4bba      	ldr	r3, [pc, #744]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800152e:	6099      	str	r1, [r3, #8]
 8001530:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001532:	6899      	ldr	r1, [r3, #8]
 8001534:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001536:	fab6 f686 	clz	r6, r6
 800153a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800153c:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800153e:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001542:	d012      	beq.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001544:	49b2      	ldr	r1, [pc, #712]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001546:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001548:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800154c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001550:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001554:	bf08      	it	eq
 8001556:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001558:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800155c:	bf16      	itet	ne
 800155e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001562:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001564:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800156a:	02d7      	lsls	r7, r2, #11
 800156c:	d510      	bpl.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800156e:	48a8      	ldr	r0, [pc, #672]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001570:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001572:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001576:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800157a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800157e:	ea43 0301 	orr.w	r3, r3, r1
 8001582:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001586:	f000 81a9 	beq.w	80018dc <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800158a:	2900      	cmp	r1, #0
 800158c:	bf08      	it	eq
 800158e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001590:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001594:	bf18      	it	ne
 8001596:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001598:	0690      	lsls	r0, r2, #26
 800159a:	d531      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	4b9c      	ldr	r3, [pc, #624]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800159e:	4f9d      	ldr	r7, [pc, #628]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ba:	f7ff f801 	bl	80005c0 <HAL_GetTick>
 80015be:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	05d9      	lsls	r1, r3, #23
 80015c4:	f140 818c 	bpl.w	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015c8:	4f91      	ldr	r7, [pc, #580]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015cc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015d0:	f040 8191 	bne.w	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015d6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80015da:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80015de:	4a8c      	ldr	r2, [pc, #560]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015e0:	f040 81af 	bne.w	8001942 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80015e4:	6891      	ldr	r1, [r2, #8]
 80015e6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80015ea:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80015ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80015f2:	4301      	orrs	r1, r0
 80015f4:	6091      	str	r1, [r2, #8]
 80015f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	06df      	lsls	r7, r3, #27
 8001604:	d50c      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001606:	4a82      	ldr	r2, [pc, #520]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001608:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800160c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001610:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001614:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001618:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800161a:	4301      	orrs	r1, r0
 800161c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001620:	0458      	lsls	r0, r3, #17
 8001622:	d508      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001624:	497a      	ldr	r1, [pc, #488]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001626:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001628:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800162c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001630:	4302      	orrs	r2, r0
 8001632:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001636:	0419      	lsls	r1, r3, #16
 8001638:	d508      	bpl.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800163a:	4975      	ldr	r1, [pc, #468]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800163c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800163e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001642:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001646:	4302      	orrs	r2, r0
 8001648:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800164c:	03da      	lsls	r2, r3, #15
 800164e:	d508      	bpl.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001650:	496f      	ldr	r1, [pc, #444]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001652:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001654:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001658:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800165c:	4302      	orrs	r2, r0
 800165e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001662:	039f      	lsls	r7, r3, #14
 8001664:	d508      	bpl.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001666:	496a      	ldr	r1, [pc, #424]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001668:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800166a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800166e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001672:	4302      	orrs	r2, r0
 8001674:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001678:	0658      	lsls	r0, r3, #25
 800167a:	d508      	bpl.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800167c:	4964      	ldr	r1, [pc, #400]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800167e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001680:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001684:	f022 0203 	bic.w	r2, r2, #3
 8001688:	4302      	orrs	r2, r0
 800168a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800168e:	0619      	lsls	r1, r3, #24
 8001690:	d508      	bpl.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001692:	495f      	ldr	r1, [pc, #380]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001694:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001696:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800169a:	f022 020c 	bic.w	r2, r2, #12
 800169e:	4302      	orrs	r2, r0
 80016a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016a4:	05da      	lsls	r2, r3, #23
 80016a6:	d508      	bpl.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016a8:	4959      	ldr	r1, [pc, #356]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80016ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016b0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80016b4:	4302      	orrs	r2, r0
 80016b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80016ba:	059f      	lsls	r7, r3, #22
 80016bc:	d508      	bpl.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80016be:	4954      	ldr	r1, [pc, #336]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80016c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80016ca:	4302      	orrs	r2, r0
 80016cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016d0:	0558      	lsls	r0, r3, #21
 80016d2:	d508      	bpl.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016d4:	494e      	ldr	r1, [pc, #312]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016e0:	4302      	orrs	r2, r0
 80016e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80016e6:	0519      	lsls	r1, r3, #20
 80016e8:	d508      	bpl.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80016ea:	4949      	ldr	r1, [pc, #292]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016f6:	4302      	orrs	r2, r0
 80016f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80016fc:	04da      	lsls	r2, r3, #19
 80016fe:	d508      	bpl.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001700:	4943      	ldr	r1, [pc, #268]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001702:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001704:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001708:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800170c:	4302      	orrs	r2, r0
 800170e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001712:	049f      	lsls	r7, r3, #18
 8001714:	d508      	bpl.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001716:	493e      	ldr	r1, [pc, #248]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001718:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800171a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800171e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001722:	4302      	orrs	r2, r0
 8001724:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001728:	0258      	lsls	r0, r3, #9
 800172a:	d508      	bpl.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800172c:	4938      	ldr	r1, [pc, #224]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800172e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001730:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001734:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001738:	4302      	orrs	r2, r0
 800173a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800173e:	0299      	lsls	r1, r3, #10
 8001740:	d50c      	bpl.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001742:	4833      	ldr	r0, [pc, #204]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001744:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001746:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800174a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800174e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001752:	bf08      	it	eq
 8001754:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001756:	430a      	orrs	r2, r1
 8001758:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800175c:	f013 0f08 	tst.w	r3, #8
 8001760:	bf18      	it	ne
 8001762:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001764:	035a      	lsls	r2, r3, #13
 8001766:	d508      	bpl.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001768:	4929      	ldr	r1, [pc, #164]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800176a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800176c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001770:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001774:	4302      	orrs	r2, r0
 8001776:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800177a:	021f      	lsls	r7, r3, #8
 800177c:	d509      	bpl.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001780:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001784:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001788:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800178c:	4302      	orrs	r2, r0
 800178e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001792:	0158      	lsls	r0, r3, #5
 8001794:	d509      	bpl.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001796:	491e      	ldr	r1, [pc, #120]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001798:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800179c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017a0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80017a4:	4302      	orrs	r2, r0
 80017a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80017aa:	0119      	lsls	r1, r3, #4
 80017ac:	d509      	bpl.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80017ae:	4918      	ldr	r1, [pc, #96]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80017b4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80017b8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80017bc:	4302      	orrs	r2, r0
 80017be:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80017c2:	00da      	lsls	r2, r3, #3
 80017c4:	d509      	bpl.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80017c6:	4912      	ldr	r1, [pc, #72]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80017cc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80017d0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80017d4:	4302      	orrs	r2, r0
 80017d6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80017da:	2e01      	cmp	r6, #1
 80017dc:	f000 80b5 	beq.w	800194a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80017e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017e4:	f000 80b1 	beq.w	800194a <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80017e8:	2d01      	cmp	r5, #1
 80017ea:	d175      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80017ec:	4d08      	ldr	r5, [pc, #32]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f6:	f7fe fee3 	bl	80005c0 <HAL_GetTick>
 80017fa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	009f      	lsls	r7, r3, #2
 8001800:	f100 8127 	bmi.w	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001804:	6821      	ldr	r1, [r4, #0]
 8001806:	030e      	lsls	r6, r1, #12
 8001808:	d506      	bpl.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800180a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800180c:	b143      	cbz	r3, 8001820 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800180e:	e003      	b.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000
 8001818:	02cd      	lsls	r5, r1, #11
 800181a:	d51d      	bpl.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800181c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181e:	b9db      	cbnz	r3, 8001858 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001820:	4a93      	ldr	r2, [pc, #588]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001822:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001826:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800182a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001832:	4303      	orrs	r3, r0
 8001834:	6960      	ldr	r0, [r4, #20]
 8001836:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800183a:	69a0      	ldr	r0, [r4, #24]
 800183c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001844:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001848:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800184a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800184e:	3801      	subs	r0, #1
 8001850:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001854:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001858:	0288      	lsls	r0, r1, #10
 800185a:	d515      	bpl.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800185c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800185e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001862:	d111      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001864:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001866:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800186a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800186e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001872:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001876:	4303      	orrs	r3, r0
 8001878:	6960      	ldr	r0, [r4, #20]
 800187a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800187e:	6a20      	ldr	r0, [r4, #32]
 8001880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001888:	070a      	lsls	r2, r1, #28
 800188a:	d519      	bpl.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800188c:	4978      	ldr	r1, [pc, #480]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800188e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001892:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001896:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800189a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189e:	4313      	orrs	r3, r2
 80018a0:	6962      	ldr	r2, [r4, #20]
 80018a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018a6:	69e2      	ldr	r2, [r4, #28]
 80018a8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80018b0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80018b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018ba:	4313      	orrs	r3, r2
 80018bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80018c0:	4c6b      	ldr	r4, [pc, #428]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ca:	f7fe fe79 	bl	80005c0 <HAL_GetTick>
 80018ce:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f140 80c4 	bpl.w	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	e009      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80018dc:	2601      	movs	r6, #1
 80018de:	e657      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7fe fe6e 	bl	80005c0 <HAL_GetTick>
 80018e4:	eba0 0008 	sub.w	r0, r0, r8
 80018e8:	2864      	cmp	r0, #100	; 0x64
 80018ea:	f67f ae69 	bls.w	80015c0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80018ee:	2003      	movs	r0, #3
}
 80018f0:	b003      	add	sp, #12
 80018f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f43f ae69 	beq.w	80015d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001904:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800190a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800190e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001910:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001912:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001916:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800191a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800191c:	07da      	lsls	r2, r3, #31
 800191e:	f57f ae59 	bpl.w	80015d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001922:	f7fe fe4d 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800192a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800192e:	079b      	lsls	r3, r3, #30
 8001930:	f53f ae50 	bmi.w	80015d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7fe fe44 	bl	80005c0 <HAL_GetTick>
 8001938:	eba0 0008 	sub.w	r0, r0, r8
 800193c:	4548      	cmp	r0, r9
 800193e:	d9f5      	bls.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001940:	e7d5      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001942:	6891      	ldr	r1, [r2, #8]
 8001944:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001948:	e654      	b.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800194a:	4e49      	ldr	r6, [pc, #292]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800194c:	6833      	ldr	r3, [r6, #0]
 800194e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001952:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001954:	f7fe fe34 	bl	80005c0 <HAL_GetTick>
 8001958:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800195a:	6833      	ldr	r3, [r6, #0]
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	d472      	bmi.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	07d7      	lsls	r7, r2, #31
 8001964:	d512      	bpl.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001968:	b983      	cbnz	r3, 800198c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800196a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800196e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001976:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800197a:	430b      	orrs	r3, r1
 800197c:	6861      	ldr	r1, [r4, #4]
 800197e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001982:	68a1      	ldr	r1, [r4, #8]
 8001984:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001988:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800198c:	0316      	lsls	r6, r2, #12
 800198e:	d503      	bpl.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001990:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001996:	d005      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001998:	02d0      	lsls	r0, r2, #11
 800199a:	d51e      	bpl.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800199c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a2:	d11a      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80019a4:	4932      	ldr	r1, [pc, #200]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80019aa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80019ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019b6:	4303      	orrs	r3, r0
 80019b8:	6860      	ldr	r0, [r4, #4]
 80019ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019be:	68e0      	ldr	r0, [r4, #12]
 80019c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80019c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80019c8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80019cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ce:	f020 001f 	bic.w	r0, r0, #31
 80019d2:	3b01      	subs	r3, #1
 80019d4:	4303      	orrs	r3, r0
 80019d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019da:	01d1      	lsls	r1, r2, #7
 80019dc:	d511      	bpl.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019de:	4924      	ldr	r1, [pc, #144]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019e0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80019e4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80019e8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019ec:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019f0:	4303      	orrs	r3, r0
 80019f2:	6860      	ldr	r0, [r4, #4]
 80019f4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019f8:	6920      	ldr	r0, [r4, #16]
 80019fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80019fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a02:	0192      	lsls	r2, r2, #6
 8001a04:	d50d      	bpl.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a06:	6923      	ldr	r3, [r4, #16]
 8001a08:	6862      	ldr	r2, [r4, #4]
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a10:	68e2      	ldr	r2, [r4, #12]
 8001a12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a16:	68a2      	ldr	r2, [r4, #8]
 8001a18:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001a22:	4e13      	ldr	r6, [pc, #76]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a24:	6833      	ldr	r3, [r6, #0]
 8001a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a2a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a2c:	f7fe fdc8 	bl	80005c0 <HAL_GetTick>
 8001a30:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a32:	6833      	ldr	r3, [r6, #0]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	f53f aed7 	bmi.w	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a3a:	f7fe fdc1 	bl	80005c0 <HAL_GetTick>
 8001a3e:	1bc0      	subs	r0, r0, r7
 8001a40:	2864      	cmp	r0, #100	; 0x64
 8001a42:	d9f6      	bls.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001a44:	e753      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a46:	f7fe fdbb 	bl	80005c0 <HAL_GetTick>
 8001a4a:	1bc0      	subs	r0, r0, r7
 8001a4c:	2864      	cmp	r0, #100	; 0x64
 8001a4e:	d984      	bls.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001a50:	e74d      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a52:	f7fe fdb5 	bl	80005c0 <HAL_GetTick>
 8001a56:	1b80      	subs	r0, r0, r6
 8001a58:	2864      	cmp	r0, #100	; 0x64
 8001a5a:	f67f aecf 	bls.w	80017fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001a5e:	e746      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a60:	f7fe fdae 	bl	80005c0 <HAL_GetTick>
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	2864      	cmp	r0, #100	; 0x64
 8001a68:	f67f af32 	bls.w	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001a6c:	e73f      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a7c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a86:	2320      	movs	r3, #32
 8001a88:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6603      	str	r3, [r0, #96]	; 0x60
 8001a8e:	4770      	bx	lr

08001a90 <HAL_UART_TxCpltCallback>:
 8001a90:	4770      	bx	lr

08001a92 <HAL_UART_ErrorCallback>:
 8001a92:	4770      	bx	lr

08001a94 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a98:	6819      	ldr	r1, [r3, #0]
{
 8001a9a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001a9c:	0716      	lsls	r6, r2, #28
{
 8001a9e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001aa0:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8001aa2:	d109      	bne.n	8001ab8 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001aa4:	0695      	lsls	r5, r2, #26
 8001aa6:	d563      	bpl.n	8001b70 <HAL_UART_IRQHandler+0xdc>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001aa8:	068e      	lsls	r6, r1, #26
 8001aaa:	d561      	bpl.n	8001b70 <HAL_UART_IRQHandler+0xdc>
      if (huart->RxISR != NULL)
 8001aac:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d075      	beq.n	8001b9e <HAL_UART_IRQHandler+0x10a>
}
 8001ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001ab6:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001ab8:	f015 0001 	ands.w	r0, r5, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_UART_IRQHandler+0x30>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001abe:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ac2:	d055      	beq.n	8001b70 <HAL_UART_IRQHandler+0xdc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ac4:	07d5      	lsls	r5, r2, #31
 8001ac6:	d507      	bpl.n	8001ad8 <HAL_UART_IRQHandler+0x44>
 8001ac8:	05ce      	lsls	r6, r1, #23
 8001aca:	d505      	bpl.n	8001ad8 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001acc:	2501      	movs	r5, #1
 8001ace:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ad0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001ad2:	f045 0501 	orr.w	r5, r5, #1
 8001ad6:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ad8:	0795      	lsls	r5, r2, #30
 8001ada:	d506      	bpl.n	8001aea <HAL_UART_IRQHandler+0x56>
 8001adc:	b128      	cbz	r0, 8001aea <HAL_UART_IRQHandler+0x56>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ade:	2502      	movs	r5, #2
 8001ae0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ae2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001ae4:	f045 0504 	orr.w	r5, r5, #4
 8001ae8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001aea:	0756      	lsls	r6, r2, #29
 8001aec:	d506      	bpl.n	8001afc <HAL_UART_IRQHandler+0x68>
 8001aee:	b128      	cbz	r0, 8001afc <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001af0:	2504      	movs	r5, #4
 8001af2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001af4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001af6:	f045 0502 	orr.w	r5, r5, #2
 8001afa:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001afc:	0715      	lsls	r5, r2, #28
 8001afe:	d507      	bpl.n	8001b10 <HAL_UART_IRQHandler+0x7c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b00:	068e      	lsls	r6, r1, #26
 8001b02:	d400      	bmi.n	8001b06 <HAL_UART_IRQHandler+0x72>
 8001b04:	b120      	cbz	r0, 8001b10 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b06:	2008      	movs	r0, #8
 8001b08:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b0a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b0c:	4303      	orrs	r3, r0
 8001b0e:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b10:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d043      	beq.n	8001b9e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b16:	0695      	lsls	r5, r2, #26
 8001b18:	d505      	bpl.n	8001b26 <HAL_UART_IRQHandler+0x92>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b1a:	0688      	lsls	r0, r1, #26
 8001b1c:	d503      	bpl.n	8001b26 <HAL_UART_IRQHandler+0x92>
        if (huart->RxISR != NULL)
 8001b1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001b20:	b10b      	cbz	r3, 8001b26 <HAL_UART_IRQHandler+0x92>
          huart->RxISR(huart);
 8001b22:	4620      	mov	r0, r4
 8001b24:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b26:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 8001b28:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8001b2a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b2c:	6892      	ldr	r2, [r2, #8]
 8001b2e:	0651      	lsls	r1, r2, #25
 8001b30:	d402      	bmi.n	8001b38 <HAL_UART_IRQHandler+0xa4>
 8001b32:	f015 0508 	ands.w	r5, r5, #8
 8001b36:	d017      	beq.n	8001b68 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8001b38:	f7ff ff9c 	bl	8001a74 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	0652      	lsls	r2, r2, #25
 8001b42:	d50d      	bpl.n	8001b60 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b44:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b46:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b4c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b4e:	b138      	cbz	r0, 8001b60 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_UART_IRQHandler+0x10c>)
 8001b52:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b54:	f7ff f8ab 	bl	8000cae <HAL_DMA_Abort_IT>
 8001b58:	b308      	cbz	r0, 8001b9e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b5a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b5c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b5e:	e7a8      	b.n	8001ab2 <HAL_UART_IRQHandler+0x1e>
            HAL_UART_ErrorCallback(huart);
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff ff96 	bl	8001a92 <HAL_UART_ErrorCallback>
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b68:	f7ff ff93 	bl	8001a92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6c:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001b70:	0616      	lsls	r6, r2, #24
 8001b72:	d505      	bpl.n	8001b80 <HAL_UART_IRQHandler+0xec>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001b74:	060d      	lsls	r5, r1, #24
 8001b76:	d503      	bpl.n	8001b80 <HAL_UART_IRQHandler+0xec>
    if (huart->TxISR != NULL)
 8001b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b7a:	b183      	cbz	r3, 8001b9e <HAL_UART_IRQHandler+0x10a>
      huart->TxISR(huart);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	e798      	b.n	8001ab2 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001b80:	0650      	lsls	r0, r2, #25
 8001b82:	d50c      	bpl.n	8001b9e <HAL_UART_IRQHandler+0x10a>
 8001b84:	064a      	lsls	r2, r1, #25
 8001b86:	d50a      	bpl.n	8001b9e <HAL_UART_IRQHandler+0x10a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b88:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b8a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001b92:	2320      	movs	r3, #32
 8001b94:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001b9a:	f7ff ff79 	bl	8001a90 <HAL_UART_TxCpltCallback>
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	08001ba5 	.word	0x08001ba5

08001ba4 <UART_DMAAbortOnError>:
{
 8001ba4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001ba6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001bae:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001bb2:	f7ff ff6e 	bl	8001a92 <HAL_UART_ErrorCallback>
 8001bb6:	bd08      	pop	{r3, pc}

08001bb8 <UART_SetConfig>:
{
 8001bb8:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bba:	69c2      	ldr	r2, [r0, #28]
{
 8001bbc:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bbe:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bc0:	6881      	ldr	r1, [r0, #8]
 8001bc2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bc4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bc6:	4301      	orrs	r1, r0
 8001bc8:	6960      	ldr	r0, [r4, #20]
 8001bca:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bcc:	4890      	ldr	r0, [pc, #576]	; (8001e10 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bce:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bd0:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 8001bd2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bd4:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bd8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001be0:	4301      	orrs	r1, r0
 8001be2:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001be4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001be6:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001be8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bea:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001bee:	4301      	orrs	r1, r0
 8001bf0:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bf2:	4988      	ldr	r1, [pc, #544]	; (8001e14 <UART_SetConfig+0x25c>)
 8001bf4:	428b      	cmp	r3, r1
 8001bf6:	d117      	bne.n	8001c28 <UART_SetConfig+0x70>
 8001bf8:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <UART_SetConfig+0x260>)
 8001bfa:	4988      	ldr	r1, [pc, #544]	; (8001e1c <UART_SetConfig+0x264>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c04:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	d129      	bne.n	8001c60 <UART_SetConfig+0xa8>
    switch (clocksource)
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 809d 	bhi.w	8001d4c <UART_SetConfig+0x194>
 8001c12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c16:	008c      	.short	0x008c
 8001c18:	00ee00e8 	.word	0x00ee00e8
 8001c1c:	00fa009b 	.word	0x00fa009b
 8001c20:	009b009b 	.word	0x009b009b
 8001c24:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c28:	497d      	ldr	r1, [pc, #500]	; (8001e20 <UART_SetConfig+0x268>)
 8001c2a:	428b      	cmp	r3, r1
 8001c2c:	d106      	bne.n	8001c3c <UART_SetConfig+0x84>
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <UART_SetConfig+0x260>)
 8001c30:	497c      	ldr	r1, [pc, #496]	; (8001e24 <UART_SetConfig+0x26c>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	e7e3      	b.n	8001c04 <UART_SetConfig+0x4c>
 8001c3c:	497a      	ldr	r1, [pc, #488]	; (8001e28 <UART_SetConfig+0x270>)
 8001c3e:	428b      	cmp	r3, r1
 8001c40:	d11d      	bne.n	8001c7e <UART_SetConfig+0xc6>
 8001c42:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <UART_SetConfig+0x260>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	f000 80d9 	beq.w	8001e04 <UART_SetConfig+0x24c>
 8001c52:	d80e      	bhi.n	8001c72 <UART_SetConfig+0xba>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d067      	beq.n	8001d28 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c58:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c5c:	d076      	beq.n	8001d4c <UART_SetConfig+0x194>
 8001c5e:	2310      	movs	r3, #16
    switch (clocksource)
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d873      	bhi.n	8001d4c <UART_SetConfig+0x194>
 8001c64:	e8df f003 	tbb	[pc, r3]
 8001c68:	72a29f99 	.word	0x72a29f99
 8001c6c:	727272b4 	.word	0x727272b4
 8001c70:	b7          	.byte	0xb7
 8001c71:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	f000 80ba 	beq.w	8001dec <UART_SetConfig+0x234>
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	d03f      	beq.n	8001cfc <UART_SetConfig+0x144>
 8001c7c:	e7ec      	b.n	8001c58 <UART_SetConfig+0xa0>
 8001c7e:	496b      	ldr	r1, [pc, #428]	; (8001e2c <UART_SetConfig+0x274>)
 8001c80:	428b      	cmp	r3, r1
 8001c82:	d10d      	bne.n	8001ca0 <UART_SetConfig+0xe8>
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <UART_SetConfig+0x260>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	f000 80b8 	beq.w	8001e04 <UART_SetConfig+0x24c>
 8001c94:	d9de      	bls.n	8001c54 <UART_SetConfig+0x9c>
 8001c96:	2b80      	cmp	r3, #128	; 0x80
 8001c98:	f000 80a8 	beq.w	8001dec <UART_SetConfig+0x234>
 8001c9c:	2bc0      	cmp	r3, #192	; 0xc0
 8001c9e:	e7ec      	b.n	8001c7a <UART_SetConfig+0xc2>
 8001ca0:	4963      	ldr	r1, [pc, #396]	; (8001e30 <UART_SetConfig+0x278>)
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d110      	bne.n	8001cc8 <UART_SetConfig+0x110>
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <UART_SetConfig+0x260>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb4:	f000 80a6 	beq.w	8001e04 <UART_SetConfig+0x24c>
 8001cb8:	d9cc      	bls.n	8001c54 <UART_SetConfig+0x9c>
 8001cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbe:	f000 8095 	beq.w	8001dec <UART_SetConfig+0x234>
 8001cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cc6:	e7d8      	b.n	8001c7a <UART_SetConfig+0xc2>
 8001cc8:	495a      	ldr	r1, [pc, #360]	; (8001e34 <UART_SetConfig+0x27c>)
 8001cca:	428b      	cmp	r3, r1
 8001ccc:	d11e      	bne.n	8001d0c <UART_SetConfig+0x154>
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <UART_SetConfig+0x260>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	f000 8092 	beq.w	8001e04 <UART_SetConfig+0x24c>
 8001ce0:	d806      	bhi.n	8001cf0 <UART_SetConfig+0x138>
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d07c      	beq.n	8001de0 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cea:	d12f      	bne.n	8001d4c <UART_SetConfig+0x194>
 8001cec:	2310      	movs	r3, #16
 8001cee:	e78d      	b.n	8001c0c <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf4:	d07a      	beq.n	8001dec <UART_SetConfig+0x234>
 8001cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001cfa:	d1f4      	bne.n	8001ce6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cfc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d00:	d169      	bne.n	8001dd6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d02:	6863      	ldr	r3, [r4, #4]
 8001d04:	0858      	lsrs	r0, r3, #1
 8001d06:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001d0a:	e078      	b.n	8001dfe <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d0c:	494a      	ldr	r1, [pc, #296]	; (8001e38 <UART_SetConfig+0x280>)
 8001d0e:	428b      	cmp	r3, r1
 8001d10:	d124      	bne.n	8001d5c <UART_SetConfig+0x1a4>
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <UART_SetConfig+0x260>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d20:	d070      	beq.n	8001e04 <UART_SetConfig+0x24c>
 8001d22:	d815      	bhi.n	8001d50 <UART_SetConfig+0x198>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1de      	bne.n	8001ce6 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d2c:	d135      	bne.n	8001d9a <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d2e:	f7ff fbd3 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d32:	6862      	ldr	r2, [r4, #4]
 8001d34:	0853      	lsrs	r3, r2, #1
 8001d36:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001d3a:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d3e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d40:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001d44:	f1a0 0210 	sub.w	r2, r0, #16
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d91a      	bls.n	8001d82 <UART_SetConfig+0x1ca>
      ret = HAL_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e020      	b.n	8001d92 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d54:	d04a      	beq.n	8001dec <UART_SetConfig+0x234>
 8001d56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d5a:	e7ce      	b.n	8001cfa <UART_SetConfig+0x142>
 8001d5c:	4937      	ldr	r1, [pc, #220]	; (8001e3c <UART_SetConfig+0x284>)
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	d1f4      	bne.n	8001d4c <UART_SetConfig+0x194>
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <UART_SetConfig+0x260>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d70:	d048      	beq.n	8001e04 <UART_SetConfig+0x24c>
 8001d72:	f67f af6f 	bls.w	8001c54 <UART_SetConfig+0x9c>
 8001d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7a:	d037      	beq.n	8001dec <UART_SetConfig+0x234>
 8001d7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d80:	e77b      	b.n	8001c7a <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d82:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d86:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	4318      	orrs	r0, r3
 8001d8e:	60d0      	str	r0, [r2, #12]
 8001d90:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001d96:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d9a:	f7ff fb9d 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001da4:	e008      	b.n	8001db8 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001da6:	f7ff fba7 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
 8001daa:	e7f8      	b.n	8001d9e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	0858      	lsrs	r0, r3, #1
 8001db0:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001db4:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001db8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dbc:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dbe:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001dc2:	f1a0 0210 	sub.w	r2, r0, #16
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8c0      	bhi.n	8001d4c <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	60d8      	str	r0, [r3, #12]
 8001dce:	e7df      	b.n	8001d90 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dd0:	f7ff fabe 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 8001dd4:	e7e3      	b.n	8001d9e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001dd6:	6863      	ldr	r3, [r4, #4]
 8001dd8:	0858      	lsrs	r0, r3, #1
 8001dda:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001dde:	e7eb      	b.n	8001db8 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001de0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001de4:	d1df      	bne.n	8001da6 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001de6:	f7ff fb87 	bl	80014f8 <HAL_RCC_GetPCLK2Freq>
 8001dea:	e7a2      	b.n	8001d32 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001df0:	d1dc      	bne.n	8001dac <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001df2:	6863      	ldr	r3, [r4, #4]
 8001df4:	0858      	lsrs	r0, r3, #1
 8001df6:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001dfa:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001dfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e02:	e79c      	b.n	8001d3e <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e04:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e08:	d1e2      	bne.n	8001dd0 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e0a:	f7ff faa1 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 8001e0e:	e790      	b.n	8001d32 <UART_SetConfig+0x17a>
 8001e10:	efff69f3 	.word	0xefff69f3
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08002688 	.word	0x08002688
 8001e20:	40004400 	.word	0x40004400
 8001e24:	0800268c 	.word	0x0800268c
 8001e28:	40004800 	.word	0x40004800
 8001e2c:	40004c00 	.word	0x40004c00
 8001e30:	40005000 	.word	0x40005000
 8001e34:	40011400 	.word	0x40011400
 8001e38:	40007800 	.word	0x40007800
 8001e3c:	40007c00 	.word	0x40007c00

08001e40 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e42:	07da      	lsls	r2, r3, #31
{
 8001e44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e46:	d506      	bpl.n	8001e56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e48:	6801      	ldr	r1, [r0, #0]
 8001e4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e4c:	684a      	ldr	r2, [r1, #4]
 8001e4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e52:	4322      	orrs	r2, r4
 8001e54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e56:	079c      	lsls	r4, r3, #30
 8001e58:	d506      	bpl.n	8001e68 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e5e:	684a      	ldr	r2, [r1, #4]
 8001e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e64:	4322      	orrs	r2, r4
 8001e66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e68:	0759      	lsls	r1, r3, #29
 8001e6a:	d506      	bpl.n	8001e7a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e6c:	6801      	ldr	r1, [r0, #0]
 8001e6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e70:	684a      	ldr	r2, [r1, #4]
 8001e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e76:	4322      	orrs	r2, r4
 8001e78:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e7a:	071a      	lsls	r2, r3, #28
 8001e7c:	d506      	bpl.n	8001e8c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e7e:	6801      	ldr	r1, [r0, #0]
 8001e80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e82:	684a      	ldr	r2, [r1, #4]
 8001e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e88:	4322      	orrs	r2, r4
 8001e8a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e8c:	06dc      	lsls	r4, r3, #27
 8001e8e:	d506      	bpl.n	8001e9e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e90:	6801      	ldr	r1, [r0, #0]
 8001e92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001e94:	688a      	ldr	r2, [r1, #8]
 8001e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9a:	4322      	orrs	r2, r4
 8001e9c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e9e:	0699      	lsls	r1, r3, #26
 8001ea0:	d506      	bpl.n	8001eb0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ea2:	6801      	ldr	r1, [r0, #0]
 8001ea4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ea6:	688a      	ldr	r2, [r1, #8]
 8001ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eac:	4322      	orrs	r2, r4
 8001eae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001eb0:	065a      	lsls	r2, r3, #25
 8001eb2:	d510      	bpl.n	8001ed6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001eb4:	6801      	ldr	r1, [r0, #0]
 8001eb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001eb8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ebe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001ec2:	ea42 0204 	orr.w	r2, r2, r4
 8001ec6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ec8:	d105      	bne.n	8001ed6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001eca:	684a      	ldr	r2, [r1, #4]
 8001ecc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ece:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001ed2:	4322      	orrs	r2, r4
 8001ed4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ed6:	061b      	lsls	r3, r3, #24
 8001ed8:	d506      	bpl.n	8001ee8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001eda:	6802      	ldr	r2, [r0, #0]
 8001edc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ede:	6853      	ldr	r3, [r2, #4]
 8001ee0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6053      	str	r3, [r2, #4]
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <UART_WaitOnFlagUntilTimeout>:
{
 8001eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eee:	9d06      	ldr	r5, [sp, #24]
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	460f      	mov	r7, r1
 8001ef4:	4616      	mov	r6, r2
 8001ef6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ef8:	6821      	ldr	r1, [r4, #0]
 8001efa:	69ca      	ldr	r2, [r1, #28]
 8001efc:	ea37 0302 	bics.w	r3, r7, r2
 8001f00:	bf0c      	ite	eq
 8001f02:	2201      	moveq	r2, #1
 8001f04:	2200      	movne	r2, #0
 8001f06:	42b2      	cmp	r2, r6
 8001f08:	d002      	beq.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001f0a:	2000      	movs	r0, #0
}
 8001f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f10:	1c6b      	adds	r3, r5, #1
 8001f12:	d0f2      	beq.n	8001efa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f14:	f7fe fb54 	bl	80005c0 <HAL_GetTick>
 8001f18:	eba0 0008 	sub.w	r0, r0, r8
 8001f1c:	4285      	cmp	r5, r0
 8001f1e:	d301      	bcc.n	8001f24 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	d1e9      	bne.n	8001ef8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f24:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001f26:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f48 <HAL_UART_Transmit>:
{
 8001f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001f4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001f50:	4604      	mov	r4, r0
 8001f52:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001f54:	2b20      	cmp	r3, #32
{
 8001f56:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001f58:	d14b      	bne.n	8001ff2 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d047      	beq.n	8001fee <HAL_UART_Transmit+0xa6>
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d045      	beq.n	8001fee <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001f62:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d043      	beq.n	8001ff2 <HAL_UART_Transmit+0xaa>
 8001f6a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001f6e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f72:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f74:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f76:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001f78:	f7fe fb22 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001f7e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001f80:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001f88:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8c:	d103      	bne.n	8001f96 <HAL_UART_Transmit+0x4e>
 8001f8e:	6923      	ldr	r3, [r4, #16]
 8001f90:	b90b      	cbnz	r3, 8001f96 <HAL_UART_Transmit+0x4e>
 8001f92:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001f94:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001f96:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	b94a      	cbnz	r2, 8001fb8 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff9f 	bl	8001eea <UART_WaitOnFlagUntilTimeout>
 8001fac:	b950      	cbnz	r0, 8001fc4 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8001fae:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001fb0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001fb4:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001fb6:	e006      	b.n	8001fc6 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff ff94 	bl	8001eea <UART_WaitOnFlagUntilTimeout>
 8001fc2:	b118      	cbz	r0, 8001fcc <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
}
 8001fc6:	b003      	add	sp, #12
 8001fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fcc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001fce:	b95e      	cbnz	r6, 8001fe8 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fd0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fd8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001fda:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001fe6:	e7d6      	b.n	8001f96 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe8:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001fec:	e7f4      	b.n	8001fd8 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
 8001ff0:	e7e9      	b.n	8001fc6 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	e7e7      	b.n	8001fc6 <HAL_UART_Transmit+0x7e>

08001ff6 <UART_CheckIdleState>:
{
 8001ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff8:	2500      	movs	r5, #0
{
 8001ffa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffc:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001ffe:	f7fe fadf 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002002:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002004:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	0712      	lsls	r2, r2, #28
 800200a:	d407      	bmi.n	800201c <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800200c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800200e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002010:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002012:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002016:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002018:	b003      	add	sp, #12
 800201a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800201c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002020:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002024:	4620      	mov	r0, r4
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	462a      	mov	r2, r5
 800202a:	f7ff ff5e 	bl	8001eea <UART_WaitOnFlagUntilTimeout>
 800202e:	2800      	cmp	r0, #0
 8002030:	d0ec      	beq.n	800200c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002032:	2003      	movs	r0, #3
 8002034:	e7f0      	b.n	8002018 <UART_CheckIdleState+0x22>

08002036 <HAL_UART_Init>:
{
 8002036:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002038:	4604      	mov	r4, r0
 800203a:	b340      	cbz	r0, 800208e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800203c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800203e:	b91b      	cbnz	r3, 8002048 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002040:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002044:	f000 fa44 	bl	80024d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002048:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800204a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800204c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800204e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002058:	f7ff fdae 	bl	8001bb8 <UART_SetConfig>
 800205c:	2801      	cmp	r0, #1
 800205e:	d016      	beq.n	800208e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002062:	b113      	cbz	r3, 800206a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002064:	4620      	mov	r0, r4
 8002066:	f7ff feeb 	bl	8001e40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800206c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002074:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800207c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
}
 8002084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002088:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800208a:	f7ff bfb4 	b.w	8001ff6 <UART_CheckIdleState>
}
 800208e:	2001      	movs	r0, #1
 8002090:	bd10      	pop	{r4, pc}
	...

08002094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002094:	b510      	push	{r4, lr}
 8002096:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002098:	2234      	movs	r2, #52	; 0x34
 800209a:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800209c:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	a807      	add	r0, sp, #28
 80020a0:	f000 fada 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	2214      	movs	r2, #20
 80020a6:	2100      	movs	r1, #0
 80020a8:	a802      	add	r0, sp, #8
 80020aa:	f000 fad5 	bl	8002658 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ae:	2100      	movs	r1, #0
 80020b0:	2290      	movs	r2, #144	; 0x90
 80020b2:	a814      	add	r0, sp, #80	; 0x50
 80020b4:	f000 fad0 	bl	8002658 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <SystemClock_Config+0x8c>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ba:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020de:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ec:	2301      	movs	r3, #1
 80020ee:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f0:	2310      	movs	r3, #16
 80020f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f4:	f7fe ff98 	bl	8001028 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020fa:	4621      	mov	r1, r4
 80020fc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020fe:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002100:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002106:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002108:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800210a:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800210c:	f7ff f946 	bl	800139c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002110:	2380      	movs	r3, #128	; 0x80
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002112:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002114:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002116:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f7ff f9fe 	bl	8001518 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800211c:	b038      	add	sp, #224	; 0xe0
 800211e:	bd10      	pop	{r4, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <main>:
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212c:	4d9d      	ldr	r5, [pc, #628]	; (80023a4 <main+0x27c>)
  HAL_Init();
 800212e:	f7fe fa2f 	bl	8000590 <HAL_Init>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2400      	movs	r4, #0
  SystemClock_Config();
 8002134:	f7ff ffae 	bl	8002094 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	2214      	movs	r2, #20
 800213a:	2100      	movs	r1, #0
 800213c:	a807      	add	r0, sp, #28
 800213e:	f000 fa8b 	bl	8002658 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800214e:	4896      	ldr	r0, [pc, #600]	; (80023a8 <main+0x280>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002150:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	632b      	str	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800215e:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2701      	movs	r7, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800216e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002172:	632b      	str	r3, [r5, #48]	; 0x30
 8002174:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	632b      	str	r3, [r5, #48]	; 0x30
 8002186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	9303      	str	r3, [sp, #12]
 800218e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	632b      	str	r3, [r5, #48]	; 0x30
 8002198:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	9304      	str	r3, [sp, #16]
 80021a0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	632b      	str	r3, [r5, #48]	; 0x30
 80021aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	9305      	str	r3, [sp, #20]
 80021b2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	632b      	str	r3, [r5, #48]	; 0x30
 80021bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	9306      	str	r3, [sp, #24]
 80021c4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021c6:	f7fe ff29 	bl	800101c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4877      	ldr	r0, [pc, #476]	; (80023ac <main+0x284>)
 80021d0:	f7fe ff24 	bl	800101c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d4:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <main+0x288>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021d6:	a907      	add	r1, sp, #28
 80021d8:	4876      	ldr	r0, [pc, #472]	; (80023b4 <main+0x28c>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021da:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021de:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f7fe fe31 	bl	8000e48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021e6:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e8:	a907      	add	r1, sp, #28
 80021ea:	4872      	ldr	r0, [pc, #456]	; (80023b4 <main+0x28c>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f7fe fe25 	bl	8000e48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021fe:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	a907      	add	r1, sp, #28
 8002202:	486d      	ldr	r0, [pc, #436]	; (80023b8 <main+0x290>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002204:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800220e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f7fe fe19 	bl	8000e48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002216:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	a907      	add	r1, sp, #28
 800221c:	4862      	ldr	r0, [pc, #392]	; (80023a8 <main+0x280>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800221e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f7fe fe0f 	bl	8000e48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800222a:	a907      	add	r1, sp, #28
 800222c:	485e      	ldr	r0, [pc, #376]	; (80023a8 <main+0x280>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800222e:	f8cd a01c 	str.w	sl, [sp, #28]
  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002232:	f04f 0a07 	mov.w	sl, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800223e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002242:	f7fe fe01 	bl	8000e48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002246:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224a:	a907      	add	r1, sp, #28
 800224c:	485b      	ldr	r0, [pc, #364]	; (80023bc <main+0x294>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800224e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002258:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225c:	f7fe fdf4 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002260:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002262:	a907      	add	r1, sp, #28
 8002264:	4851      	ldr	r0, [pc, #324]	; (80023ac <main+0x284>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002266:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800226e:	f7fe fdeb 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002272:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002274:	a907      	add	r1, sp, #28
 8002276:	484d      	ldr	r0, [pc, #308]	; (80023ac <main+0x284>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002278:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800227e:	f7fe fde3 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002282:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	a907      	add	r1, sp, #28
 8002288:	484b      	ldr	r0, [pc, #300]	; (80023b8 <main+0x290>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800228a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800228c:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002290:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f7fe fdd6 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800229c:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022a0:	a907      	add	r1, sp, #28
 80022a2:	4845      	ldr	r0, [pc, #276]	; (80023b8 <main+0x290>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022a4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f7fe fdcd 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80022ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b2:	a907      	add	r1, sp, #28
 80022b4:	483d      	ldr	r0, [pc, #244]	; (80023ac <main+0x284>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80022b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022c0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c4:	f7fe fdc0 	bl	8000e48 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022ca:	4622      	mov	r2, r4
 80022cc:	4621      	mov	r1, r4
 80022ce:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d4:	632b      	str	r3, [r5, #48]	; 0x30
 80022d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 80022d8:	4d39      	ldr	r5, [pc, #228]	; (80023c0 <main+0x298>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022e2:	f7fe fbb7 	bl	8000a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022e6:	2038      	movs	r0, #56	; 0x38
 80022e8:	f7fe fbec 	bl	8000ac4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80022ec:	4621      	mov	r1, r4
 80022ee:	2210      	movs	r2, #16
 80022f0:	a807      	add	r0, sp, #28
 80022f2:	f000 f9b1 	bl	8002658 <memset>
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80022f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022fa:	4932      	ldr	r1, [pc, #200]	; (80023c4 <main+0x29c>)
 80022fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002300:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002302:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002304:	61af      	str	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002306:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800230a:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800230c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800230e:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002312:	616f      	str	r7, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 8002314:	61ee      	str	r6, [r5, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002316:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <main+0x2a0>)
 800231c:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800231e:	f7fe f967 	bl	80005f0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	a907      	add	r1, sp, #28
 8002324:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8002326:	9407      	str	r4, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002328:	9708      	str	r7, [sp, #32]
  huart2.Init.BaudRate = 115200;
 800232a:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800232e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002332:	f7fe fadd 	bl	80008f0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8002336:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002338:	a907      	add	r1, sp, #28
 800233a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800233c:	9608      	str	r6, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_9;
 800233e:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002340:	f7fe fad6 	bl	80008f0 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 8002344:	4821      	ldr	r0, [pc, #132]	; (80023cc <main+0x2a4>)
  huart2.Init.BaudRate = 115200;
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <main+0x2a8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002348:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800234a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800234c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002354:	6244      	str	r4, [r0, #36]	; 0x24
		  u8valview[i]=u8valarray[i];
 8002356:	4c1f      	ldr	r4, [pc, #124]	; (80023d4 <main+0x2ac>)
  huart2.Init.BaudRate = 115200;
 8002358:	e880 0088 	stmia.w	r0, {r3, r7}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800235c:	230c      	movs	r3, #12
 800235e:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002360:	f7ff fe69 	bl	8002036 <HAL_UART_Init>
HAL_ADC_Start_DMA(&hadc1,(uint32_t*)u8valarray,2);
 8002364:	4628      	mov	r0, r5
	  for(i=0;i<3;i++)
 8002366:	4d1c      	ldr	r5, [pc, #112]	; (80023d8 <main+0x2b0>)
HAL_ADC_Start_DMA(&hadc1,(uint32_t*)u8valarray,2);
 8002368:	4632      	mov	r2, r6
 800236a:	491a      	ldr	r1, [pc, #104]	; (80023d4 <main+0x2ac>)
 800236c:	f7fe f9e6 	bl	800073c <HAL_ADC_Start_DMA>
	  for(i=0;i<3;i++)
 8002370:	2300      	movs	r3, #0
		  u8valview[i]=u8valarray[i];
 8002372:	481a      	ldr	r0, [pc, #104]	; (80023dc <main+0x2b4>)
	  for(i=0;i<3;i++)
 8002374:	4619      	mov	r1, r3
 8002376:	702b      	strb	r3, [r5, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	2a03      	cmp	r2, #3
 800237c:	d10c      	bne.n	8002398 <main+0x270>
 800237e:	b101      	cbz	r1, 8002382 <main+0x25a>
 8002380:	702a      	strb	r2, [r5, #0]
	  HAL_UART_Transmit(&huart2,u8valarray,sizeof(u8valarray),1000);
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	2202      	movs	r2, #2
 8002388:	4621      	mov	r1, r4
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <main+0x2a4>)
 800238c:	f7ff fddc 	bl	8001f48 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8002390:	20fa      	movs	r0, #250	; 0xfa
 8002392:	f7fe f91b 	bl	80005cc <HAL_Delay>
	  for(i=0;i<3;i++)
 8002396:	e7eb      	b.n	8002370 <main+0x248>
		  u8valview[i]=u8valarray[i];
 8002398:	5d1a      	ldrb	r2, [r3, r4]
 800239a:	2101      	movs	r1, #1
 800239c:	541a      	strb	r2, [r3, r0]
 800239e:	3301      	adds	r3, #1
 80023a0:	e7ea      	b.n	8002378 <main+0x250>
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	10110000 	.word	0x10110000
 80023b4:	40020800 	.word	0x40020800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	20000034 	.word	0x20000034
 80023c4:	40012000 	.word	0x40012000
 80023c8:	0f000001 	.word	0x0f000001
 80023cc:	200000e0 	.word	0x200000e0
 80023d0:	40004400 	.word	0x40004400
 80023d4:	20000030 	.word	0x20000030
 80023d8:	20000028 	.word	0x20000028
 80023dc:	200000dc 	.word	0x200000dc

080023e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_MspInit+0x2c>)
{
 80023e6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
 80023f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	b002      	add	sp, #8
 800240e:	4770      	bx	lr
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	2214      	movs	r2, #20
 800241c:	2100      	movs	r1, #0
 800241e:	a803      	add	r0, sp, #12
 8002420:	f000 f91a 	bl	8002658 <memset>
  if(hadc->Instance==ADC1)
 8002424:	6832      	ldr	r2, [r6, #0]
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_ADC_MspInit+0xa8>)
 8002428:	429a      	cmp	r2, r3
 800242a:	d145      	bne.n	80024b8 <HAL_ADC_MspInit+0xa4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002430:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	a903      	add	r1, sp, #12
 8002434:	4822      	ldr	r0, [pc, #136]	; (80024c0 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002436:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2500      	movs	r5, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800243a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
 8002440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002442:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002446:	9200      	str	r2, [sp, #0]
 8002448:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f002 0201 	and.w	r2, r2, #1
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002466:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	9302      	str	r3, [sp, #8]
 800246e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002470:	2301      	movs	r3, #1
 8002472:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f7fe fce8 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002478:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	4812      	ldr	r0, [pc, #72]	; (80024c4 <HAL_ADC_MspInit+0xb0>)
 800247c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800247e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002480:	9303      	str	r3, [sp, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002482:	4c11      	ldr	r4, [pc, #68]	; (80024c8 <HAL_ADC_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f7fe fcdf 	bl	8000e48 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800248c:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248e:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002492:	6165      	str	r5, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002494:	61a5      	str	r5, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002498:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800249a:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a2:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024aa:	f7fe fb45 	bl	8000b38 <HAL_DMA_Init>
 80024ae:	b108      	cbz	r0, 80024b4 <HAL_ADC_MspInit+0xa0>
    {
      Error_Handler();
 80024b0:	f7ff ff96 	bl	80023e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024b4:	63b4      	str	r4, [r6, #56]	; 0x38
 80024b6:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024b8:	b008      	add	sp, #32
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	40012000 	.word	0x40012000
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	2000007c 	.word	0x2000007c
 80024cc:	40026410 	.word	0x40026410

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b510      	push	{r4, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	2214      	movs	r2, #20
 80024d8:	2100      	movs	r1, #0
 80024da:	a803      	add	r0, sp, #12
 80024dc:	f000 f8bc 	bl	8002658 <memset>
  if(huart->Instance==USART2)
 80024e0:	6822      	ldr	r2, [r4, #0]
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_UART_MspInit+0x6c>)
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d127      	bne.n	8002538 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024e8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ec:	a903      	add	r1, sp, #12
 80024ee:	4814      	ldr	r0, [pc, #80]	; (8002540 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
 80024f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002504:	f042 0208 	orr.w	r2, r2, #8
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002514:	2360      	movs	r3, #96	; 0x60
 8002516:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002520:	2307      	movs	r3, #7
 8002522:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002524:	f7fe fc90 	bl	8000e48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2026      	movs	r0, #38	; 0x26
 800252c:	4611      	mov	r1, r2
 800252e:	f7fe fa91 	bl	8000a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002532:	2026      	movs	r0, #38	; 0x26
 8002534:	f7fe fac6 	bl	8000ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002538:	b008      	add	sp, #32
 800253a:	bd10      	pop	{r4, pc}
 800253c:	40004400 	.word	0x40004400
 8002540:	40020c00 	.word	0x40020c00

08002544 <NMI_Handler>:
 8002544:	4770      	bx	lr

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	e7fe      	b.n	8002548 <MemManage_Handler>

0800254a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254a:	e7fe      	b.n	800254a <BusFault_Handler>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler>

0800254e <SVC_Handler>:
 800254e:	4770      	bx	lr

08002550 <DebugMon_Handler>:
 8002550:	4770      	bx	lr

08002552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002552:	4770      	bx	lr

08002554 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002554:	f7fe b828 	b.w	80005a8 <HAL_IncTick>

08002558 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <USART2_IRQHandler+0x8>)
 800255a:	f7ff ba9b 	b.w	8001a94 <HAL_UART_IRQHandler>
 800255e:	bf00      	nop
 8002560:	200000e0 	.word	0x200000e0

08002564 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002564:	4801      	ldr	r0, [pc, #4]	; (800256c <DMA2_Stream0_IRQHandler+0x8>)
 8002566:	f7fe bbb5 	b.w	8000cd4 <HAL_DMA_IRQHandler>
 800256a:	bf00      	nop
 800256c:	2000007c 	.word	0x2000007c

08002570 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002570:	490f      	ldr	r1, [pc, #60]	; (80025b0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002572:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <SystemInit+0x44>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800258a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002592:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002596:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <SystemInit+0x48>)
 800259a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025aa:	608b      	str	r3, [r1, #8]
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000ed00 	.word	0xe000ed00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	24003010 	.word	0x24003010

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025c2:	e003      	b.n	80025cc <LoopCopyDataInit>

080025c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ca:	3104      	adds	r1, #4

080025cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025d4:	d3f6      	bcc.n	80025c4 <CopyDataInit>
  ldr  r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025d8:	e002      	b.n	80025e0 <LoopFillZerobss>

080025da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025dc:	f842 3b04 	str.w	r3, [r2], #4

080025e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025e4:	d3f9      	bcc.n	80025da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffc3 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f000 f811 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7ff fd9b 	bl	8002128 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80025f8:	080026c4 	.word	0x080026c4
  ldr  r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002600:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002604:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002608:	20000160 	.word	0x20000160

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4e0d      	ldr	r6, [pc, #52]	; (8002648 <__libc_init_array+0x38>)
 8002614:	4c0d      	ldr	r4, [pc, #52]	; (800264c <__libc_init_array+0x3c>)
 8002616:	1ba4      	subs	r4, r4, r6
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	2500      	movs	r5, #0
 800261c:	42a5      	cmp	r5, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	4e0b      	ldr	r6, [pc, #44]	; (8002650 <__libc_init_array+0x40>)
 8002622:	4c0c      	ldr	r4, [pc, #48]	; (8002654 <__libc_init_array+0x44>)
 8002624:	f000 f820 	bl	8002668 <_init>
 8002628:	1ba4      	subs	r4, r4, r6
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	2500      	movs	r5, #0
 800262e:	42a5      	cmp	r5, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002638:	4798      	blx	r3
 800263a:	3501      	adds	r5, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002642:	4798      	blx	r3
 8002644:	3501      	adds	r5, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	080026bc 	.word	0x080026bc
 800264c:	080026bc 	.word	0x080026bc
 8002650:	080026bc 	.word	0x080026bc
 8002654:	080026c0 	.word	0x080026c0

08002658 <memset>:
 8002658:	4402      	add	r2, r0
 800265a:	4603      	mov	r3, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <_init>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	bf00      	nop
 800266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266e:	bc08      	pop	{r3}
 8002670:	469e      	mov	lr, r3
 8002672:	4770      	bx	lr

08002674 <_fini>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr
