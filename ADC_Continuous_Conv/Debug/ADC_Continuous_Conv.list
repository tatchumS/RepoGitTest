
ADC_Continuous_Conv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002964  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b5c  08002b5c  00012b5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000538  2000000c  08002ba4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000544  08002ba4  00020544  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011b5a  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a49  00000000  00000000  00031b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006f4f  00000000  00000000  000345dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ac8  00000000  00000000  0003b530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e28  00000000  00000000  0003bff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005ed2  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004ce9  00000000  00000000  00042cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000479db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d78  00000000  00000000  00047a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002b44 	.word	0x08002b44

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002b44 	.word	0x08002b44

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 fa58 	bl	8000a14 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 fa08 	bl	8000988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f9e6 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f002 f8f9 	bl	8002794 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005f2:	4604      	mov	r4, r0
 80005f4:	2800      	cmp	r0, #0
 80005f6:	f000 809b 	beq.w	8000730 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005fc:	b925      	cbnz	r5, 8000608 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005fe:	f002 f8e1 	bl	80027c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000602:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000604:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800060a:	06db      	lsls	r3, r3, #27
 800060c:	f100 808e 	bmi.w	800072c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ADC_Init+0x144>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000628:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	6861      	ldr	r1, [r4, #4]
 800062e:	430a      	orrs	r2, r1
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000632:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000634:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800063c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000644:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000646:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800064e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000654:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000656:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800065e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000664:	4934      	ldr	r1, [pc, #208]	; (8000738 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000666:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000668:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800066a:	428a      	cmp	r2, r1
 800066c:	d052      	beq.n	8000714 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000674:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000676:	6899      	ldr	r1, [r3, #8]
 8000678:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800067a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800067c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800068a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800068c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800068e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000690:	f022 0202 	bic.w	r2, r2, #2
 8000694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800069c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800069e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d03e      	beq.n	8000724 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006a6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ae:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80006b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006b8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006c0:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80006c2:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006c6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006cc:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006d6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ea:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006fc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006fe:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800070c:	2300      	movs	r3, #0
 800070e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000712:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800071a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000722:	e7b2      	b.n	800068a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800072a:	e7c9      	b.n	80006c0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800072c:	2001      	movs	r0, #1
 800072e:	e7ed      	b.n	800070c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
}
 8000732:	bd38      	pop	{r3, r4, r5, pc}
 8000734:	40012300 	.word	0x40012300
 8000738:	0f000001 	.word	0x0f000001

0800073c <HAL_ADC_Start>:
  __IO uint32_t counter = 0;
 800073c:	2300      	movs	r3, #0
{
 800073e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000740:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000742:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000746:	2b01      	cmp	r3, #1
 8000748:	d05c      	beq.n	8000804 <HAL_ADC_Start+0xc8>
 800074a:	2301      	movs	r3, #1
 800074c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	07d2      	lsls	r2, r2, #31
 8000756:	d505      	bpl.n	8000764 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	07d1      	lsls	r1, r2, #31
 800075c:	d414      	bmi.n	8000788 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800075e:	2000      	movs	r0, #0
}
 8000760:	b002      	add	sp, #8
 8000762:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000764:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000766:	4928      	ldr	r1, [pc, #160]	; (8000808 <HAL_ADC_Start+0xcc>)
    __HAL_ADC_ENABLE(hadc);
 8000768:	f042 0201 	orr.w	r2, r2, #1
 800076c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800076e:	4a27      	ldr	r2, [pc, #156]	; (800080c <HAL_ADC_Start+0xd0>)
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	fbb2 f2f1 	udiv	r2, r2, r1
 8000776:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800077a:	9201      	str	r2, [sp, #4]
    while(counter != 0)
 800077c:	9a01      	ldr	r2, [sp, #4]
 800077e:	2a00      	cmp	r2, #0
 8000780:	d0ea      	beq.n	8000758 <HAL_ADC_Start+0x1c>
      counter--;
 8000782:	9a01      	ldr	r2, [sp, #4]
 8000784:	3a01      	subs	r2, #1
 8000786:	e7f8      	b.n	800077a <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000788:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800078a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800078e:	f022 0201 	bic.w	r2, r2, #1
 8000792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000796:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	0552      	lsls	r2, r2, #21
 800079c:	d505      	bpl.n	80007aa <HAL_ADC_Start+0x6e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800079e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80007a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80007a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007a8:	6402      	str	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80007ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007b0:	d002      	beq.n	80007b8 <HAL_ADC_Start+0x7c>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80007b4:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80007b8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007c4:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <HAL_ADC_Start+0xd4>)
 80007c8:	6851      	ldr	r1, [r2, #4]
 80007ca:	06c9      	lsls	r1, r1, #27
 80007cc:	d108      	bne.n	80007e0 <HAL_ADC_Start+0xa4>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007ce:	6898      	ldr	r0, [r3, #8]
 80007d0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007d4:	d1c3      	bne.n	800075e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	e7bf      	b.n	8000760 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <HAL_ADC_Start+0xd8>)
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d107      	bne.n	80007f6 <HAL_ADC_Start+0xba>
 80007e6:	6899      	ldr	r1, [r3, #8]
 80007e8:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80007ec:	d103      	bne.n	80007f6 <HAL_ADC_Start+0xba>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007ee:	6899      	ldr	r1, [r3, #8]
 80007f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80007f4:	6099      	str	r1, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80007f6:	6852      	ldr	r2, [r2, #4]
 80007f8:	06d2      	lsls	r2, r2, #27
 80007fa:	d4b0      	bmi.n	800075e <HAL_ADC_Start+0x22>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_ADC_Start+0xdc>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d1ad      	bne.n	800075e <HAL_ADC_Start+0x22>
 8000802:	e7e4      	b.n	80007ce <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000804:	2002      	movs	r0, #2
 8000806:	e7ab      	b.n	8000760 <HAL_ADC_Start+0x24>
 8000808:	000f4240 	.word	0x000f4240
 800080c:	20000008 	.word	0x20000008
 8000810:	40012300 	.word	0x40012300
 8000814:	40012000 	.word	0x40012000
 8000818:	40012200 	.word	0x40012200

0800081c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000820:	4770      	bx	lr
	...

08000824 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8000824:	2300      	movs	r3, #0
{
 8000826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000828:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800082a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800082e:	2b01      	cmp	r3, #1
 8000830:	d071      	beq.n	8000916 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000832:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8000834:	2301      	movs	r3, #1
 8000836:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000838:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800083a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800083e:	b2ae      	uxth	r6, r5
 8000840:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000842:	d931      	bls.n	80008a8 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000844:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000848:	f04f 0e07 	mov.w	lr, #7
 800084c:	68e7      	ldr	r7, [r4, #12]
 800084e:	3b1e      	subs	r3, #30
 8000850:	fa0e fe03 	lsl.w	lr, lr, r3
 8000854:	ea27 070e 	bic.w	r7, r7, lr
 8000858:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800085a:	4f3d      	ldr	r7, [pc, #244]	; (8000950 <HAL_ADC_ConfigChannel+0x12c>)
 800085c:	42bd      	cmp	r5, r7
 800085e:	d11e      	bne.n	800089e <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000860:	68e3      	ldr	r3, [r4, #12]
 8000862:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000866:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8000868:	684a      	ldr	r2, [r1, #4]
 800086a:	2a06      	cmp	r2, #6
 800086c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000870:	d82a      	bhi.n	80008c8 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000872:	4413      	add	r3, r2
 8000874:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000876:	1f59      	subs	r1, r3, #5
 8000878:	231f      	movs	r3, #31
 800087a:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800087c:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000880:	ea27 0303 	bic.w	r3, r7, r3
 8000884:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000886:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000888:	4311      	orrs	r1, r2
 800088a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800088c:	4b31      	ldr	r3, [pc, #196]	; (8000954 <HAL_ADC_ConfigChannel+0x130>)
 800088e:	429c      	cmp	r4, r3
 8000890:	d039      	beq.n	8000906 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8000892:	2300      	movs	r3, #0
 8000894:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000898:	4618      	mov	r0, r3
}
 800089a:	b003      	add	sp, #12
 800089c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800089e:	68e7      	ldr	r7, [r4, #12]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	433b      	orrs	r3, r7
 80008a6:	e7de      	b.n	8000866 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008ac:	f04f 0e07 	mov.w	lr, #7
 80008b0:	6927      	ldr	r7, [r4, #16]
 80008b2:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008ba:	ea27 070e 	bic.w	r7, r7, lr
 80008be:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008c0:	6927      	ldr	r7, [r4, #16]
 80008c2:	433b      	orrs	r3, r7
 80008c4:	6123      	str	r3, [r4, #16]
 80008c6:	e7cf      	b.n	8000868 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 80008c8:	2a0c      	cmp	r2, #12
 80008ca:	d80e      	bhi.n	80008ea <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008cc:	4413      	add	r3, r2
 80008ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80008d0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80008d4:	231f      	movs	r3, #31
 80008d6:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80008d8:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008dc:	ea21 0303 	bic.w	r3, r1, r3
 80008e0:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80008e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008e4:	431a      	orrs	r2, r3
 80008e6:	6322      	str	r2, [r4, #48]	; 0x30
 80008e8:	e7d0      	b.n	800088c <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008ea:	4413      	add	r3, r2
 80008ec:	221f      	movs	r2, #31
 80008ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008f0:	3b41      	subs	r3, #65	; 0x41
 80008f2:	409a      	lsls	r2, r3
 80008f4:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008f8:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000900:	4311      	orrs	r1, r2
 8000902:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000904:	e7c2      	b.n	800088c <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000906:	2d12      	cmp	r5, #18
 8000908:	d107      	bne.n	800091a <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <HAL_ADC_ConfigChannel+0x134>)
 800090c:	6853      	ldr	r3, [r2, #4]
 800090e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000912:	6053      	str	r3, [r2, #4]
 8000914:	e7bd      	b.n	8000892 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8000916:	2002      	movs	r0, #2
 8000918:	e7bf      	b.n	800089a <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_ADC_ConfigChannel+0x12c>)
 800091c:	429d      	cmp	r5, r3
 800091e:	d001      	beq.n	8000924 <HAL_ADC_ConfigChannel+0x100>
 8000920:	2d11      	cmp	r5, #17
 8000922:	d1b6      	bne.n	8000892 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000926:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000928:	684a      	ldr	r2, [r1, #4]
 800092a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800092e:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000930:	d1af      	bne.n	8000892 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_ADC_ConfigChannel+0x138>)
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_ADC_ConfigChannel+0x13c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	fbb3 f2f2 	udiv	r2, r3, r2
 800093c:	230a      	movs	r3, #10
 800093e:	4353      	muls	r3, r2
        counter--;
 8000940:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000942:	9b01      	ldr	r3, [sp, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0a4      	beq.n	8000892 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8000948:	9b01      	ldr	r3, [sp, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	e7f8      	b.n	8000940 <HAL_ADC_ConfigChannel+0x11c>
 800094e:	bf00      	nop
 8000950:	10000012 	.word	0x10000012
 8000954:	40012000 	.word	0x40012000
 8000958:	40012300 	.word	0x40012300
 800095c:	20000008 	.word	0x20000008
 8000960:	000f4240 	.word	0x000f4240

08000964 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000966:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000972:	041b      	lsls	r3, r3, #16
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800097e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000980:	60d3      	str	r3, [r2, #12]
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b530      	push	{r4, r5, lr}
 800098c:	68dc      	ldr	r4, [r3, #12]
 800098e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000992:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	2b04      	cmp	r3, #4
 800099a:	bf28      	it	cs
 800099c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a4:	bf8c      	ite	hi
 80009a6:	3c03      	subhi	r4, #3
 80009a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009aa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80009ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80009b4:	ea01 0103 	and.w	r1, r1, r3
 80009b8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	fa05 f404 	lsl.w	r4, r5, r4
 80009c0:	f104 34ff 	add.w	r4, r4, #4294967295
 80009c4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	ea42 0201 	orr.w	r2, r2, r1
 80009cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80009d0:	db07      	blt.n	80009e2 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009dc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80009e0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	f000 000f 	and.w	r0, r0, #15
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_NVIC_SetPriority+0x6c>)
 80009ea:	541a      	strb	r2, [r3, r0]
 80009ec:	bd30      	pop	{r4, r5, pc}
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	e000ed14 	.word	0xe000ed14

080009f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009f8:	2800      	cmp	r0, #0
 80009fa:	db08      	blt.n	8000a0e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fc:	0942      	lsrs	r2, r0, #5
 80009fe:	2301      	movs	r3, #1
 8000a00:	f000 001f 	and.w	r0, r0, #31
 8000a04:	fa03 f000 	lsl.w	r0, r3, r0
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_NVIC_EnableIRQ+0x18>)
 8000a0a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	3801      	subs	r0, #1
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d20a      	bcs.n	8000a32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	21f0      	movs	r1, #240	; 0xf0
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a40:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d003      	beq.n	8000a50 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a50:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a52:	2305      	movs	r3, #5
 8000a54:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 8000a58:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	4770      	bx	lr

08000a64 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000a68:	b129      	cbz	r1, 8000a76 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a6e:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a74:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000a76:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000a78:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000a7a:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8000a7c:	68e0      	ldr	r0, [r4, #12]
 8000a7e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000a80:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000a82:	bf08      	it	eq
 8000a84:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000a88:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000a8c:	482e      	ldr	r0, [pc, #184]	; (8000b48 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000a8e:	bf18      	it	ne
 8000a90:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000a92:	4028      	ands	r0, r5
 8000a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a98:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a9a:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000a9c:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000a9e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000aa0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000aa2:	f7ff fd93 	bl	80005cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000aa6:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000aa8:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000aaa:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000aac:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000aae:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000ab0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ab2:	f7ff fd8b 	bl	80005cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000ab6:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ab8:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000aba:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000abc:	2500      	movs	r5, #0
 8000abe:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000ac0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8000ac2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000ac4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000ac8:	0412      	lsls	r2, r2, #16
 8000aca:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000acc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000ad0:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000ad2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ad4:	f7ff fd7a 	bl	80005cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000ad8:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ada:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000adc:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000ade:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000ae0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ae2:	f7ff fd73 	bl	80005cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000ae6:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ae8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000aec:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8000aee:	f241 0518 	movw	r5, #4120	; 0x1018
 8000af2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000af4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000af6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000afa:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000afe:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000b00:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b02:	f7ff fd63 	bl	80005cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000b06:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b08:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000b0c:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b12:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000b14:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000b16:	f7ff fd59 	bl	80005cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000b20:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000b22:	69a3      	ldr	r3, [r4, #24]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d107      	bne.n	8000b38 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000b28:	f241 011c 	movw	r1, #4124	; 0x101c
 8000b2c:	5853      	ldr	r3, [r2, r1]
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000b38:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000b3a:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000b3c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000b3e:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000b40:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <ETH_MACDMAConfig+0xf4>)
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
 8000b48:	ff20810f 	.word	0xff20810f
 8000b4c:	f8de3f23 	.word	0xf8de3f23
 8000b50:	02c12080 	.word	0x02c12080
 8000b54:	40028040 	.word	0x40028040
 8000b58:	40028044 	.word	0x40028044

08000b5c <HAL_ETH_ReadPHYRegister>:
{
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b5e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b62:	4605      	mov	r5, r0
 8000b64:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b66:	2b82      	cmp	r3, #130	; 0x82
 8000b68:	d030      	beq.n	8000bcc <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b6a:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b6c:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b6e:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b70:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b74:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b76:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b7a:	f003 011c 	and.w	r1, r3, #28
 8000b7e:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b80:	8a04      	ldrh	r4, [r0, #16]
 8000b82:	02e4      	lsls	r4, r4, #11
 8000b84:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b86:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b88:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b8c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b8e:	f7ff fd17 	bl	80005c0 <HAL_GetTick>
 8000b92:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b94:	f014 0001 	ands.w	r0, r4, #1
 8000b98:	d107      	bne.n	8000baa <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000baa:	f7ff fd09 	bl	80005c0 <HAL_GetTick>
 8000bae:	1bc0      	subs	r0, r0, r7
 8000bb0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bb4:	d307      	bcc.n	8000bc6 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000bb6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bb8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	691c      	ldr	r4, [r3, #16]
 8000bca:	e7e3      	b.n	8000b94 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000bcc:	2002      	movs	r0, #2
}
 8000bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bd0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bd0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bd4:	2b42      	cmp	r3, #66	; 0x42
{
 8000bd6:	b570      	push	{r4, r5, r6, lr}
 8000bd8:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bda:	d02e      	beq.n	8000c3a <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bdc:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000bde:	018c      	lsls	r4, r1, #6
 8000be0:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000be2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000be6:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000bea:	6803      	ldr	r3, [r0, #0]
 8000bec:	f044 0403 	orr.w	r4, r4, #3
 8000bf0:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bf2:	f000 001c 	and.w	r0, r0, #28
 8000bf6:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bf8:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000bfa:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bfc:	02e4      	lsls	r4, r4, #11
 8000bfe:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000c00:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000c02:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c04:	f7ff fcdc 	bl	80005c0 <HAL_GetTick>
 8000c08:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c0a:	f014 0001 	ands.w	r0, r4, #1
 8000c0e:	d103      	bne.n	8000c18 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c18:	f7ff fcd2 	bl	80005c0 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c22:	d307      	bcc.n	8000c34 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000c24:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000c28:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	691c      	ldr	r4, [r3, #16]
 8000c38:	e7e7      	b.n	8000c0a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000c3a:	2002      	movs	r0, #2
}
 8000c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c40 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000c40:	2300      	movs	r3, #0
{
 8000c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000c44:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000c46:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	f000 80dc 	beq.w	8000e06 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c4e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c56:	b91b      	cbnz	r3, 8000c60 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c58:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c5c:	f001 fde0 	bl	8002820 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <HAL_ETH_Init+0x1cc>)
 8000c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c74:	4b66      	ldr	r3, [pc, #408]	; (8000e10 <HAL_ETH_Init+0x1d0>)
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c7c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	6a21      	ldr	r1, [r4, #32]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	f042 0201 	orr.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c94:	f7ff fc94 	bl	80005c0 <HAL_GetTick>
 8000c98:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	07d0      	lsls	r0, r2, #31
 8000ca4:	d41d      	bmi.n	8000ce2 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000ca6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000ca8:	f000 fcb4 	bl	8001614 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000cac:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <HAL_ETH_Init+0x1d4>)
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000cb0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000cb4:	4403      	add	r3, r0
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d822      	bhi.n	8000d00 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000cba:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000cbe:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000cc8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000cca:	f7ff ff81 	bl	8000bd0 <HAL_ETH_WritePHYRegister>
 8000cce:	4605      	mov	r5, r0
 8000cd0:	b368      	cbz	r0, 8000d2e <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000cd2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f7ff fec4 	bl	8000a64 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000cdc:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000ce0:	e00b      	b.n	8000cfa <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000ce2:	f7ff fc6d 	bl	80005c0 <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cec:	d9d5      	bls.n	8000c9a <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cee:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000cf0:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cf2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	b003      	add	sp, #12
 8000cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000d00:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_ETH_Init+0x1dc>)
 8000d02:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <HAL_ETH_Init+0x1e0>)
 8000d04:	4403      	add	r3, r0
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d802      	bhi.n	8000d10 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d0a:	f045 050c 	orr.w	r5, r5, #12
 8000d0e:	e7d6      	b.n	8000cbe <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000d10:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <HAL_ETH_Init+0x1e4>)
 8000d12:	4a45      	ldr	r2, [pc, #276]	; (8000e28 <HAL_ETH_Init+0x1e8>)
 8000d14:	4403      	add	r3, r0
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d9d1      	bls.n	8000cbe <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000d1a:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <HAL_ETH_Init+0x1ec>)
 8000d1c:	4a44      	ldr	r2, [pc, #272]	; (8000e30 <HAL_ETH_Init+0x1f0>)
 8000d1e:	4403      	add	r3, r0
 8000d20:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d22:	bf94      	ite	ls
 8000d24:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d28:	f045 0510 	orrhi.w	r5, r5, #16
 8000d2c:	e7c7      	b.n	8000cbe <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	f7ff fc4c 	bl	80005cc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d34:	6863      	ldr	r3, [r4, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d053      	beq.n	8000de2 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000d3a:	f7ff fc41 	bl	80005c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d3e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d42:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d44:	466a      	mov	r2, sp
 8000d46:	2101      	movs	r1, #1
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f7ff ff07 	bl	8000b5c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d4e:	f7ff fc37 	bl	80005c0 <HAL_GetTick>
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	42b8      	cmp	r0, r7
 8000d56:	d90b      	bls.n	8000d70 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fe82 	bl	8000a64 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d60:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d62:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d6e:	e7c4      	b.n	8000cfa <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	0759      	lsls	r1, r3, #29
 8000d74:	d5e6      	bpl.n	8000d44 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff ff27 	bl	8000bd0 <HAL_ETH_WritePHYRegister>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d1a5      	bne.n	8000cd2 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d86:	f7ff fc1b 	bl	80005c0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d8a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d8e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d90:	466a      	mov	r2, sp
 8000d92:	2101      	movs	r1, #1
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fee1 	bl	8000b5c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d9a:	f7ff fc11 	bl	80005c0 <HAL_GetTick>
 8000d9e:	1b80      	subs	r0, r0, r6
 8000da0:	42b8      	cmp	r0, r7
 8000da2:	d8d9      	bhi.n	8000d58 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000da4:	9b00      	ldr	r3, [sp, #0]
 8000da6:	069a      	lsls	r2, r3, #26
 8000da8:	d5f2      	bpl.n	8000d90 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000daa:	466a      	mov	r2, sp
 8000dac:	211f      	movs	r1, #31
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff fed4 	bl	8000b5c <HAL_ETH_ReadPHYRegister>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d18c      	bne.n	8000cd2 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000db8:	9b00      	ldr	r3, [sp, #0]
 8000dba:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000dbe:	bf18      	it	ne
 8000dc0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000dc4:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000dc6:	bf4c      	ite	mi
 8000dc8:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000dca:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000dce:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000dd0:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f7ff fe45 	bl	8000a64 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000de0:	e78b      	b.n	8000cfa <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000de2:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000de4:	4629      	mov	r1, r5
 8000de6:	68e2      	ldr	r2, [r4, #12]
 8000de8:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000dea:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000dec:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000df0:	b292      	uxth	r2, r2
 8000df2:	f7ff feed 	bl	8000bd0 <HAL_ETH_WritePHYRegister>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	f47f af6b 	bne.w	8000cd2 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000dfc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e00:	f7ff fbe4 	bl	80005cc <HAL_Delay>
 8000e04:	e7e5      	b.n	8000dd2 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000e06:	2501      	movs	r5, #1
 8000e08:	e777      	b.n	8000cfa <HAL_ETH_Init+0xba>
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40013800 	.word	0x40013800
 8000e14:	feced300 	.word	0xfeced300
 8000e18:	00e4e1bf 	.word	0x00e4e1bf
 8000e1c:	fde9f140 	.word	0xfde9f140
 8000e20:	017d783f 	.word	0x017d783f
 8000e24:	fc6c7900 	.word	0xfc6c7900
 8000e28:	026259ff 	.word	0x026259ff
 8000e2c:	fa0a1f00 	.word	0xfa0a1f00
 8000e30:	02faf07f 	.word	0x02faf07f

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e38:	680b      	ldr	r3, [r1, #0]
{
 8000e3a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001000 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e40:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e44:	4a6c      	ldr	r2, [pc, #432]	; (8000ff8 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e46:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001004 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e4a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e50:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e54:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e58:	45b6      	cmp	lr, r6
 8000e5a:	f040 80b3 	bne.w	8000fc4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5e:	684c      	ldr	r4, [r1, #4]
 8000e60:	f024 0710 	bic.w	r7, r4, #16
 8000e64:	2f02      	cmp	r7, #2
 8000e66:	d116      	bne.n	8000e96 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e68:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e6c:	f003 0b07 	and.w	fp, r3, #7
 8000e70:	f04f 0c0f 	mov.w	ip, #15
 8000e74:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000e78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000e7c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e80:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e84:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e88:	690d      	ldr	r5, [r1, #16]
 8000e8a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e8e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000e92:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e96:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e9a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e9c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ea0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ea4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eaa:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eae:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eb2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000eba:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebe:	d811      	bhi.n	8000ee4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ec0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ec6:	68cf      	ldr	r7, [r1, #12]
 8000ec8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ecc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ed0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ed2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ed8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000edc:	409f      	lsls	r7, r3
 8000ede:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ee2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ee4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ee6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ee8:	688f      	ldr	r7, [r1, #8]
 8000eea:	fa07 f70a 	lsl.w	r7, r7, sl
 8000eee:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ef0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	00e5      	lsls	r5, r4, #3
 8000ef4:	d566      	bpl.n	8000fc4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000efa:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000efe:	f003 0e03 	and.w	lr, r3, #3
 8000f02:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f0a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f0e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f16:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f1a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f1e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f22:	9503      	str	r5, [sp, #12]
 8000f24:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f26:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f2a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f2e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f32:	4d32      	ldr	r5, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x1c8>)
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d04c      	beq.n	8000fd2 <HAL_GPIO_Init+0x19e>
 8000f38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	d04a      	beq.n	8000fd6 <HAL_GPIO_Init+0x1a2>
 8000f40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f44:	42a8      	cmp	r0, r5
 8000f46:	d048      	beq.n	8000fda <HAL_GPIO_Init+0x1a6>
 8000f48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4c:	42a8      	cmp	r0, r5
 8000f4e:	d046      	beq.n	8000fde <HAL_GPIO_Init+0x1aa>
 8000f50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d044      	beq.n	8000fe2 <HAL_GPIO_Init+0x1ae>
 8000f58:	4548      	cmp	r0, r9
 8000f5a:	d044      	beq.n	8000fe6 <HAL_GPIO_Init+0x1b2>
 8000f5c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d042      	beq.n	8000fea <HAL_GPIO_Init+0x1b6>
 8000f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d040      	beq.n	8000fee <HAL_GPIO_Init+0x1ba>
 8000f6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f70:	42a8      	cmp	r0, r5
 8000f72:	d03e      	beq.n	8000ff2 <HAL_GPIO_Init+0x1be>
 8000f74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f78:	42a8      	cmp	r0, r5
 8000f7a:	bf14      	ite	ne
 8000f7c:	250a      	movne	r5, #10
 8000f7e:	2509      	moveq	r5, #9
 8000f80:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f84:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f88:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f8c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000f92:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	bf0c      	ite	eq
 8000f96:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f98:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000f9e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fa0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	bf0c      	ite	eq
 8000fa4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fa6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fac:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fae:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	bf0c      	ite	eq
 8000fb2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fb4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fb8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fba:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	bf54      	ite	pl
 8000fbe:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fc0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fc2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	f47f af3f 	bne.w	8000e4a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fcc:	b005      	add	sp, #20
 8000fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	e7d4      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fd6:	2501      	movs	r5, #1
 8000fd8:	e7d2      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fda:	2502      	movs	r5, #2
 8000fdc:	e7d0      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fde:	2503      	movs	r5, #3
 8000fe0:	e7ce      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fe2:	2504      	movs	r5, #4
 8000fe4:	e7cc      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fe6:	2505      	movs	r5, #5
 8000fe8:	e7ca      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fea:	2506      	movs	r5, #6
 8000fec:	e7c8      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000fee:	2507      	movs	r5, #7
 8000ff0:	e7c6      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000ff2:	2508      	movs	r5, #8
 8000ff4:	e7c4      	b.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000ff6:	bf00      	nop
 8000ff8:	40013c00 	.word	0x40013c00
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40023800 	.word	0x40023800
 8001004:	40021400 	.word	0x40021400

08001008 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	b10a      	cbz	r2, 800100e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800100a:	6181      	str	r1, [r0, #24]
 800100c:	4770      	bx	lr
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	e7fb      	b.n	800100a <HAL_GPIO_WritePin+0x2>

08001012 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001012:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001014:	4604      	mov	r4, r0
{
 8001016:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001018:	b330      	cbz	r0, 8001068 <HAL_PCD_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800101a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800101e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001022:	b91b      	cbnz	r3, 800102c <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001024:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001028:	f001 fcba 	bl	80029a0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800102e:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001030:	466e      	mov	r6, sp
 8001032:	1d27      	adds	r7, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 8001034:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001038:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800103c:	f001 f921 	bl	8002282 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001048:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104c:	4625      	mov	r5, r4
 800104e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001052:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001056:	f855 0b10 	ldr.w	r0, [r5], #16
 800105a:	f001 f8d7 	bl	800220c <USB_CoreInit>
 800105e:	4606      	mov	r6, r0
 8001060:	b120      	cbz	r0, 800106c <HAL_PCD_Init+0x5a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001062:	2302      	movs	r3, #2
 8001064:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001068:	2501      	movs	r5, #1
 800106a:	e054      	b.n	8001116 <HAL_PCD_Init+0x104>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800106c:	4601      	mov	r1, r0
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	f001 f90d 	bl	800228e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	4630      	mov	r0, r6
 8001076:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800107a:	261c      	movs	r6, #28
 800107c:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001080:	4601      	mov	r1, r0
 8001082:	b2c2      	uxtb	r2, r0
 8001084:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	4596      	cmp	lr, r2
 8001088:	d81b      	bhi.n	80010c2 <HAL_PCD_Init+0xb0>
 800108a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108c:	261c      	movs	r6, #28
 800108e:	4619      	mov	r1, r3
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001094:	4586      	cmp	lr, r0
 8001096:	d822      	bhi.n	80010de <HAL_PCD_Init+0xcc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	466e      	mov	r6, sp
 800109c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010a6:	e886 0003 	stmia.w	r6, {r0, r1}
 80010aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	f001 f92e 	bl	8002310 <USB_DevInit>
 80010b4:	2301      	movs	r3, #1
 80010b6:	4605      	mov	r5, r0
 80010b8:	b300      	cbz	r0, 80010fc <HAL_PCD_Init+0xea>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ba:	2202      	movs	r2, #2
 80010bc:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 80010c0:	e7d2      	b.n	8001068 <HAL_PCD_Init+0x56>
    hpcd->IN_ep[i].is_in = 1U;
 80010c2:	fb06 4302 	mla	r3, r6, r2, r4
 80010c6:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ce:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010d2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d6:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010d8:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80010da:	6519      	str	r1, [r3, #80]	; 0x50
 80010dc:	e7d1      	b.n	8001082 <HAL_PCD_Init+0x70>
    hpcd->OUT_ep[i].is_in = 0U;
 80010de:	fb06 4200 	mla	r2, r6, r0, r4
 80010e2:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80010e6:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ea:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ee:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010f2:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f6:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80010fa:	e7c9      	b.n	8001090 <HAL_PCD_Init+0x7e>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80010fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001100:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_PCD_Init+0xfe>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800110a:	4620      	mov	r0, r4
 800110c:	f000 f806 	bl	800111c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	f001 f9c1 	bl	8002498 <USB_DevDisconnect>

  return HAL_OK;
}
 8001116:	4628      	mov	r0, r5
 8001118:	b00b      	add	sp, #44	; 0x2c
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800111c <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 800111c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111e:	6802      	ldr	r2, [r0, #0]
{
 8001120:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001122:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001126:	2000      	movs	r0, #0
 8001128:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800112c:	6993      	ldr	r3, [r2, #24]
 800112e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001132:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001134:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	f043 0303 	orr.w	r3, r3, #3
 800113e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8001140:	4770      	bx	lr
	...

08001144 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001144:	4a02      	ldr	r2, [pc, #8]	; (8001150 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001146:	6813      	ldr	r3, [r2, #0]
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4770      	bx	lr
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	4604      	mov	r4, r0
 800115a:	b918      	cbnz	r0, 8001164 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800115c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800115e:	b002      	add	sp, #8
 8001160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	07d8      	lsls	r0, r3, #31
 8001168:	d410      	bmi.n	800118c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	0799      	lsls	r1, r3, #30
 800116e:	d45e      	bmi.n	800122e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	0719      	lsls	r1, r3, #28
 8001174:	f100 80a3 	bmi.w	80012be <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	075a      	lsls	r2, r3, #29
 800117c:	f100 80c4 	bmi.w	8001308 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001180:	69a2      	ldr	r2, [r4, #24]
 8001182:	2a00      	cmp	r2, #0
 8001184:	f040 812e 	bne.w	80013e4 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001188:	2000      	movs	r0, #0
 800118a:	e7e8      	b.n	800115e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118c:	4b93      	ldr	r3, [pc, #588]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f002 020c 	and.w	r2, r2, #12
 8001194:	2a04      	cmp	r2, #4
 8001196:	d007      	beq.n	80011a8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	f002 020c 	and.w	r2, r2, #12
 800119e:	2a08      	cmp	r2, #8
 80011a0:	d10a      	bne.n	80011b8 <HAL_RCC_OscConfig+0x64>
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	025a      	lsls	r2, r3, #9
 80011a6:	d507      	bpl.n	80011b8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	039b      	lsls	r3, r3, #14
 80011ae:	d5dc      	bpl.n	800116a <HAL_RCC_OscConfig+0x16>
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1d9      	bne.n	800116a <HAL_RCC_OscConfig+0x16>
 80011b6:	e7d1      	b.n	800115c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	4d88      	ldr	r5, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d111      	bne.n	80011e6 <HAL_RCC_OscConfig+0x92>
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ca:	f7ff f9f9 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4d83      	ldr	r5, [pc, #524]	; (80013dc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80011d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	039f      	lsls	r7, r3, #14
 80011d6:	d4c8      	bmi.n	800116a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff f9f2 	bl	80005c0 <HAL_GetTick>
 80011dc:	1b80      	subs	r0, r0, r6
 80011de:	2864      	cmp	r0, #100	; 0x64
 80011e0:	d9f7      	bls.n	80011d2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011e2:	2003      	movs	r0, #3
 80011e4:	e7bb      	b.n	800115e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	b99b      	cbnz	r3, 8001210 <HAL_RCC_OscConfig+0xbc>
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	602b      	str	r3, [r5, #0]
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011f8:	f7ff f9e2 	bl	80005c0 <HAL_GetTick>
 80011fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	0398      	lsls	r0, r3, #14
 8001202:	d5b2      	bpl.n	800116a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff f9dc 	bl	80005c0 <HAL_GetTick>
 8001208:	1b80      	subs	r0, r0, r6
 800120a:	2864      	cmp	r0, #100	; 0x64
 800120c:	d9f7      	bls.n	80011fe <HAL_RCC_OscConfig+0xaa>
 800120e:	e7e8      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	d103      	bne.n	8001220 <HAL_RCC_OscConfig+0xcc>
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	602b      	str	r3, [r5, #0]
 800121e:	e7d0      	b.n	80011c2 <HAL_RCC_OscConfig+0x6e>
 8001220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001224:	602b      	str	r3, [r5, #0]
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122c:	e7cc      	b.n	80011c8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122e:	4b6b      	ldr	r3, [pc, #428]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	f012 0f0c 	tst.w	r2, #12
 8001236:	d007      	beq.n	8001248 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	f002 020c 	and.w	r2, r2, #12
 800123e:	2a08      	cmp	r2, #8
 8001240:	d111      	bne.n	8001266 <HAL_RCC_OscConfig+0x112>
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	0259      	lsls	r1, r3, #9
 8001246:	d40e      	bmi.n	8001266 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	0792      	lsls	r2, r2, #30
 800124e:	d502      	bpl.n	8001256 <HAL_RCC_OscConfig+0x102>
 8001250:	68e2      	ldr	r2, [r4, #12]
 8001252:	2a01      	cmp	r2, #1
 8001254:	d182      	bne.n	800115c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	6921      	ldr	r1, [r4, #16]
 800125a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800125e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001262:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001264:	e784      	b.n	8001170 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001266:	68e3      	ldr	r3, [r4, #12]
 8001268:	4d5c      	ldr	r5, [pc, #368]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800126a:	b1bb      	cbz	r3, 800129c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001274:	f7ff f9a4 	bl	80005c0 <HAL_GetTick>
 8001278:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	079f      	lsls	r7, r3, #30
 800127e:	d507      	bpl.n	8001290 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	6922      	ldr	r2, [r4, #16]
 8001284:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001288:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800128c:	602b      	str	r3, [r5, #0]
 800128e:	e76f      	b.n	8001170 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff f996 	bl	80005c0 <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2802      	cmp	r0, #2
 8001298:	d9ef      	bls.n	800127a <HAL_RCC_OscConfig+0x126>
 800129a:	e7a2      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012a4:	f7ff f98c 	bl	80005c0 <HAL_GetTick>
 80012a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	0798      	lsls	r0, r3, #30
 80012ae:	f57f af5f 	bpl.w	8001170 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff f985 	bl	80005c0 <HAL_GetTick>
 80012b6:	1b80      	subs	r0, r0, r6
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0x156>
 80012bc:	e791      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012be:	6963      	ldr	r3, [r4, #20]
 80012c0:	4d46      	ldr	r5, [pc, #280]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80012c2:	b183      	cbz	r3, 80012e6 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80012c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012cc:	f7ff f978 	bl	80005c0 <HAL_GetTick>
 80012d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d4:	079b      	lsls	r3, r3, #30
 80012d6:	f53f af4f 	bmi.w	8001178 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff f971 	bl	80005c0 <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f6      	bls.n	80012d2 <HAL_RCC_OscConfig+0x17e>
 80012e4:	e77d      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012ee:	f7ff f967 	bl	80005c0 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012f6:	079f      	lsls	r7, r3, #30
 80012f8:	f57f af3e 	bpl.w	8001178 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff f960 	bl	80005c0 <HAL_GetTick>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	2802      	cmp	r0, #2
 8001304:	d9f6      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1a0>
 8001306:	e76c      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130c:	00d0      	lsls	r0, r2, #3
 800130e:	d427      	bmi.n	8001360 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001312:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001324:	4d2e      	ldr	r5, [pc, #184]	; (80013e0 <HAL_RCC_OscConfig+0x28c>)
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	05d9      	lsls	r1, r3, #23
 800132a:	d51b      	bpl.n	8001364 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132c:	68a3      	ldr	r3, [r4, #8]
 800132e:	4d2b      	ldr	r5, [pc, #172]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001330:	2b01      	cmp	r3, #1
 8001332:	d127      	bne.n	8001384 <HAL_RCC_OscConfig+0x230>
 8001334:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001340:	f7ff f93e 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	4f25      	ldr	r7, [pc, #148]	; (80013dc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001346:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800134a:	079b      	lsls	r3, r3, #30
 800134c:	d53f      	bpl.n	80013ce <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800134e:	2e00      	cmp	r6, #0
 8001350:	f43f af16 	beq.w	8001180 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001356:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	e70f      	b.n	8001180 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001360:	2600      	movs	r6, #0
 8001362:	e7df      	b.n	8001324 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800136c:	f7ff f928 	bl	80005c0 <HAL_GetTick>
 8001370:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	05da      	lsls	r2, r3, #23
 8001376:	d4d9      	bmi.n	800132c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff f922 	bl	80005c0 <HAL_GetTick>
 800137c:	1bc0      	subs	r0, r0, r7
 800137e:	2864      	cmp	r0, #100	; 0x64
 8001380:	d9f7      	bls.n	8001372 <HAL_RCC_OscConfig+0x21e>
 8001382:	e72e      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	b9ab      	cbnz	r3, 80013b2 <HAL_RCC_OscConfig+0x25e>
 8001386:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	672b      	str	r3, [r5, #112]	; 0x70
 8001392:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800139a:	f7ff f911 	bl	80005c0 <HAL_GetTick>
 800139e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a2:	0798      	lsls	r0, r3, #30
 80013a4:	d5d3      	bpl.n	800134e <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff f90b 	bl	80005c0 <HAL_GetTick>
 80013aa:	1bc0      	subs	r0, r0, r7
 80013ac:	4540      	cmp	r0, r8
 80013ae:	d9f7      	bls.n	80013a0 <HAL_RCC_OscConfig+0x24c>
 80013b0:	e717      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b6:	d103      	bne.n	80013c0 <HAL_RCC_OscConfig+0x26c>
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	672b      	str	r3, [r5, #112]	; 0x70
 80013be:	e7b9      	b.n	8001334 <HAL_RCC_OscConfig+0x1e0>
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	672b      	str	r3, [r5, #112]	; 0x70
 80013c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	e7b5      	b.n	800133a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff f8f7 	bl	80005c0 <HAL_GetTick>
 80013d2:	eba0 0008 	sub.w	r0, r0, r8
 80013d6:	42a8      	cmp	r0, r5
 80013d8:	d9b6      	bls.n	8001348 <HAL_RCC_OscConfig+0x1f4>
 80013da:	e702      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e4:	4d24      	ldr	r5, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x324>)
 80013e6:	68ab      	ldr	r3, [r5, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	f43f aeb5 	beq.w	800115c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80013f2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013fa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fc:	d12f      	bne.n	800145e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80013fe:	f7ff f8df 	bl	80005c0 <HAL_GetTick>
 8001402:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	0199      	lsls	r1, r3, #6
 8001408:	d423      	bmi.n	8001452 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	6a22      	ldr	r2, [r4, #32]
 800140c:	69e3      	ldr	r3, [r4, #28]
 800140e:	4313      	orrs	r3, r2
 8001410:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001412:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800141c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800141e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001424:	4c14      	ldr	r4, [pc, #80]	; (8001478 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001426:	0852      	lsrs	r2, r2, #1
 8001428:	3a01      	subs	r2, #1
 800142a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800142e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001430:	682b      	ldr	r3, [r5, #0]
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001438:	f7ff f8c2 	bl	80005c0 <HAL_GetTick>
 800143c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	019a      	lsls	r2, r3, #6
 8001442:	f53f aea1 	bmi.w	8001188 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff f8bb 	bl	80005c0 <HAL_GetTick>
 800144a:	1b40      	subs	r0, r0, r5
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f6      	bls.n	800143e <HAL_RCC_OscConfig+0x2ea>
 8001450:	e6c7      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f8b5 	bl	80005c0 <HAL_GetTick>
 8001456:	1b80      	subs	r0, r0, r6
 8001458:	2802      	cmp	r0, #2
 800145a:	d9d3      	bls.n	8001404 <HAL_RCC_OscConfig+0x2b0>
 800145c:	e6c1      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800145e:	f7ff f8af 	bl	80005c0 <HAL_GetTick>
 8001462:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001464:	682b      	ldr	r3, [r5, #0]
 8001466:	019b      	lsls	r3, r3, #6
 8001468:	f57f ae8e 	bpl.w	8001188 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f8a8 	bl	80005c0 <HAL_GetTick>
 8001470:	1b00      	subs	r0, r0, r4
 8001472:	2802      	cmp	r0, #2
 8001474:	d9f6      	bls.n	8001464 <HAL_RCC_OscConfig+0x310>
 8001476:	e6b4      	b.n	80011e2 <HAL_RCC_OscConfig+0x8e>
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800147e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001480:	688b      	ldr	r3, [r1, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d003      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0x16>
 800148a:	2b08      	cmp	r3, #8
 800148c:	d003      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001490:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001494:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001496:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001498:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800149c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80014a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014a8:	bf1a      	itte	ne
 80014aa:	480a      	ldrne	r0, [pc, #40]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x58>)
 80014ac:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ae:	4808      	ldreq	r0, [pc, #32]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80014b0:	fba1 0100 	umull	r0, r1, r1, r0
 80014b4:	f7fe fec0 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_RCC_GetSysClockFreq+0x50>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c8:	bd08      	pop	{r3, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	00f42400 	.word	0x00f42400
 80014d4:	007a1200 	.word	0x007a1200

080014d8 <HAL_RCC_ClockConfig>:
{
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014dc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014de:	4604      	mov	r4, r0
 80014e0:	b910      	cbnz	r0, 80014e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_RCC_ClockConfig+0x12c>)
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	428b      	cmp	r3, r1
 80014f2:	d328      	bcc.n	8001546 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	6821      	ldr	r1, [r4, #0]
 80014f6:	078f      	lsls	r7, r1, #30
 80014f8:	d430      	bmi.n	800155c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	07c8      	lsls	r0, r1, #31
 80014fc:	d443      	bmi.n	8001586 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014fe:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_RCC_ClockConfig+0x12c>)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	429d      	cmp	r5, r3
 8001508:	d367      	bcc.n	80015da <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	0751      	lsls	r1, r2, #29
 800150e:	d470      	bmi.n	80015f2 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001510:	0713      	lsls	r3, r2, #28
 8001512:	d507      	bpl.n	8001524 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001514:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
 8001516:	6921      	ldr	r1, [r4, #16]
 8001518:	6893      	ldr	r3, [r2, #8]
 800151a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800151e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001522:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001524:	f7ff ffaa 	bl	800147c <HAL_RCC_GetSysClockFreq>
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
 800152a:	4a38      	ldr	r2, [pc, #224]	; (800160c <HAL_RCC_ClockConfig+0x134>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	40d8      	lsrs	r0, r3
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_ClockConfig+0x138>)
 8001538:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff f804 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8001540:	2000      	movs	r0, #0
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f023 030f 	bic.w	r3, r3, #15
 800154c:	430b      	orrs	r3, r1
 800154e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4299      	cmp	r1, r3
 8001558:	d1c3      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xa>
 800155a:	e7cb      	b.n	80014f4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155c:	f011 0f04 	tst.w	r1, #4
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
 8001562:	d003      	beq.n	800156c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800156a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	070e      	lsls	r6, r1, #28
 800156e:	d503      	bpl.n	8001578 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001576:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	68a0      	ldr	r0, [r4, #8]
 800157c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001580:	4302      	orrs	r2, r0
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e7b9      	b.n	80014fa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	6861      	ldr	r1, [r4, #4]
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
 800158a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	d11c      	bne.n	80015ca <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001590:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	d0a5      	beq.n	80014e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001596:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159c:	4e1a      	ldr	r6, [pc, #104]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159e:	f022 0203 	bic.w	r2, r2, #3
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015a6:	f7ff f80b 	bl	80005c0 <HAL_GetTick>
 80015aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ac:	68b3      	ldr	r3, [r6, #8]
 80015ae:	6862      	ldr	r2, [r4, #4]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015b8:	d0a1      	beq.n	80014fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff f801 	bl	80005c0 <HAL_GetTick>
 80015be:	1bc0      	subs	r0, r0, r7
 80015c0:	4540      	cmp	r0, r8
 80015c2:	d9f3      	bls.n	80015ac <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
}
 80015c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	2902      	cmp	r1, #2
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015d2:	e7df      	b.n	8001594 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d4:	f012 0f02 	tst.w	r2, #2
 80015d8:	e7dc      	b.n	8001594 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	f023 030f 	bic.w	r3, r3, #15
 80015e0:	432b      	orrs	r3, r5
 80015e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	429d      	cmp	r5, r3
 80015ec:	f47f af79 	bne.w	80014e2 <HAL_RCC_ClockConfig+0xa>
 80015f0:	e78b      	b.n	800150a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <HAL_RCC_ClockConfig+0x130>)
 80015f4:	68e0      	ldr	r0, [r4, #12]
 80015f6:	688b      	ldr	r3, [r1, #8]
 80015f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015fc:	4303      	orrs	r3, r0
 80015fe:	608b      	str	r3, [r1, #8]
 8001600:	e786      	b.n	8001510 <HAL_RCC_ClockConfig+0x38>
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08002b6d 	.word	0x08002b6d
 8001610:	20000008 	.word	0x20000008

08001614 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001614:	4b01      	ldr	r3, [pc, #4]	; (800161c <HAL_RCC_GetHCLKFreq+0x8>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800162a:	5cd3      	ldrb	r3, [r2, r3]
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800162e:	6810      	ldr	r0, [r2, #0]
}
 8001630:	40d8      	lsrs	r0, r3
 8001632:	4770      	bx	lr
 8001634:	40023800 	.word	0x40023800
 8001638:	08002b7d 	.word	0x08002b7d
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	4a03      	ldr	r2, [pc, #12]	; (800165c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800164e:	6810      	ldr	r0, [r2, #0]
}
 8001650:	40d8      	lsrs	r0, r3
 8001652:	4770      	bx	lr
 8001654:	40023800 	.word	0x40023800
 8001658:	08002b7d 	.word	0x08002b7d
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001664:	6802      	ldr	r2, [r0, #0]
{
 8001666:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001668:	f012 0601 	ands.w	r6, r2, #1
 800166c:	d00b      	beq.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800166e:	4bba      	ldr	r3, [pc, #744]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001676:	6099      	str	r1, [r3, #8]
 8001678:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800167e:	fab6 f686 	clz	r6, r6
 8001682:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001684:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001686:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800168a:	d012      	beq.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800168c:	49b2      	ldr	r1, [pc, #712]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800168e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001690:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001694:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001698:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800169c:	bf08      	it	eq
 800169e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016a0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016a4:	bf16      	itet	ne
 80016a6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80016aa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016ac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016b2:	02d7      	lsls	r7, r2, #11
 80016b4:	d510      	bpl.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016b6:	48a8      	ldr	r0, [pc, #672]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016ba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016c6:	ea43 0301 	orr.w	r3, r3, r1
 80016ca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016ce:	f000 81a9 	beq.w	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80016d2:	2900      	cmp	r1, #0
 80016d4:	bf08      	it	eq
 80016d6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80016d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80016dc:	bf18      	it	ne
 80016de:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016e0:	0690      	lsls	r0, r2, #26
 80016e2:	d531      	bpl.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b9c      	ldr	r3, [pc, #624]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016e6:	4f9d      	ldr	r7, [pc, #628]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001702:	f7fe ff5d 	bl	80005c0 <HAL_GetTick>
 8001706:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	05d9      	lsls	r1, r3, #23
 800170c:	f140 818c 	bpl.w	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001710:	4f91      	ldr	r7, [pc, #580]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001712:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001714:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001718:	f040 8191 	bne.w	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800171c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800171e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001722:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001726:	4a8c      	ldr	r2, [pc, #560]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001728:	f040 81af 	bne.w	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800172c:	6891      	ldr	r1, [r2, #8]
 800172e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001732:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001736:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800173a:	4301      	orrs	r1, r0
 800173c:	6091      	str	r1, [r2, #8]
 800173e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001742:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001744:	430b      	orrs	r3, r1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	06df      	lsls	r7, r3, #27
 800174c:	d50c      	bpl.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800174e:	4a82      	ldr	r2, [pc, #520]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001750:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001754:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001758:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800175c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001760:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001762:	4301      	orrs	r1, r0
 8001764:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001768:	0458      	lsls	r0, r3, #17
 800176a:	d508      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800176c:	497a      	ldr	r1, [pc, #488]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800176e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001770:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001774:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001778:	4302      	orrs	r2, r0
 800177a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800177e:	0419      	lsls	r1, r3, #16
 8001780:	d508      	bpl.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001782:	4975      	ldr	r1, [pc, #468]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001784:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001786:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800178a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800178e:	4302      	orrs	r2, r0
 8001790:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001794:	03da      	lsls	r2, r3, #15
 8001796:	d508      	bpl.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001798:	496f      	ldr	r1, [pc, #444]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800179a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800179c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017a4:	4302      	orrs	r2, r0
 80017a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017aa:	039f      	lsls	r7, r3, #14
 80017ac:	d508      	bpl.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017ae:	496a      	ldr	r1, [pc, #424]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017b0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80017b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017b6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80017ba:	4302      	orrs	r2, r0
 80017bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017c0:	0658      	lsls	r0, r3, #25
 80017c2:	d508      	bpl.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017c4:	4964      	ldr	r1, [pc, #400]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80017c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017cc:	f022 0203 	bic.w	r2, r2, #3
 80017d0:	4302      	orrs	r2, r0
 80017d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017d6:	0619      	lsls	r1, r3, #24
 80017d8:	d508      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017da:	495f      	ldr	r1, [pc, #380]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80017de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017e2:	f022 020c 	bic.w	r2, r2, #12
 80017e6:	4302      	orrs	r2, r0
 80017e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017ec:	05da      	lsls	r2, r3, #23
 80017ee:	d508      	bpl.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017f0:	4959      	ldr	r1, [pc, #356]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80017f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80017f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017f8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80017fc:	4302      	orrs	r2, r0
 80017fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001802:	059f      	lsls	r7, r3, #22
 8001804:	d508      	bpl.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001806:	4954      	ldr	r1, [pc, #336]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001808:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800180a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800180e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001812:	4302      	orrs	r2, r0
 8001814:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001818:	0558      	lsls	r0, r3, #21
 800181a:	d508      	bpl.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800181c:	494e      	ldr	r1, [pc, #312]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800181e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001820:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001824:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001828:	4302      	orrs	r2, r0
 800182a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800182e:	0519      	lsls	r1, r3, #20
 8001830:	d508      	bpl.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001832:	4949      	ldr	r1, [pc, #292]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001836:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800183a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800183e:	4302      	orrs	r2, r0
 8001840:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001844:	04da      	lsls	r2, r3, #19
 8001846:	d508      	bpl.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001848:	4943      	ldr	r1, [pc, #268]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800184a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800184c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001850:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001854:	4302      	orrs	r2, r0
 8001856:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800185a:	049f      	lsls	r7, r3, #18
 800185c:	d508      	bpl.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800185e:	493e      	ldr	r1, [pc, #248]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001860:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001862:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001866:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800186a:	4302      	orrs	r2, r0
 800186c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001870:	0258      	lsls	r0, r3, #9
 8001872:	d508      	bpl.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001874:	4938      	ldr	r1, [pc, #224]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001876:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001878:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800187c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001880:	4302      	orrs	r2, r0
 8001882:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001886:	0299      	lsls	r1, r3, #10
 8001888:	d50c      	bpl.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800188a:	4833      	ldr	r0, [pc, #204]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800188c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800188e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001892:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001896:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800189a:	bf08      	it	eq
 800189c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800189e:	430a      	orrs	r2, r1
 80018a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80018a4:	f013 0f08 	tst.w	r3, #8
 80018a8:	bf18      	it	ne
 80018aa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018ac:	035a      	lsls	r2, r3, #13
 80018ae:	d508      	bpl.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018b0:	4929      	ldr	r1, [pc, #164]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80018b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018bc:	4302      	orrs	r2, r0
 80018be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80018c2:	021f      	lsls	r7, r3, #8
 80018c4:	d509      	bpl.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018c6:	4924      	ldr	r1, [pc, #144]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018c8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80018cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80018d4:	4302      	orrs	r2, r0
 80018d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80018da:	0158      	lsls	r0, r3, #5
 80018dc:	d509      	bpl.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80018de:	491e      	ldr	r1, [pc, #120]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80018e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018e8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80018ec:	4302      	orrs	r2, r0
 80018ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80018f2:	0119      	lsls	r1, r3, #4
 80018f4:	d509      	bpl.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80018f6:	4918      	ldr	r1, [pc, #96]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80018f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80018fc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001900:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001904:	4302      	orrs	r2, r0
 8001906:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800190a:	00da      	lsls	r2, r3, #3
 800190c:	d509      	bpl.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800190e:	4912      	ldr	r1, [pc, #72]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001910:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001914:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001918:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800191c:	4302      	orrs	r2, r0
 800191e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001922:	2e01      	cmp	r6, #1
 8001924:	f000 80b5 	beq.w	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800192c:	f000 80b1 	beq.w	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001930:	2d01      	cmp	r5, #1
 8001932:	d175      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001934:	4d08      	ldr	r5, [pc, #32]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800193e:	f7fe fe3f 	bl	80005c0 <HAL_GetTick>
 8001942:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001944:	682b      	ldr	r3, [r5, #0]
 8001946:	009f      	lsls	r7, r3, #2
 8001948:	f100 8127 	bmi.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800194c:	6821      	ldr	r1, [r4, #0]
 800194e:	030e      	lsls	r6, r1, #12
 8001950:	d506      	bpl.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001954:	b143      	cbz	r3, 8001968 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001956:	e003      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000
 8001960:	02cd      	lsls	r5, r1, #11
 8001962:	d51d      	bpl.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001966:	b9db      	cbnz	r3, 80019a0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001968:	4a93      	ldr	r2, [pc, #588]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800196a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800196e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001976:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800197a:	4303      	orrs	r3, r0
 800197c:	6960      	ldr	r0, [r4, #20]
 800197e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001982:	69a0      	ldr	r0, [r4, #24]
 8001984:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800198c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001992:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001996:	3801      	subs	r0, #1
 8001998:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800199c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80019a0:	0288      	lsls	r0, r1, #10
 80019a2:	d515      	bpl.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80019a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80019a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019aa:	d111      	bne.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019ac:	4a82      	ldr	r2, [pc, #520]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80019b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019be:	4303      	orrs	r3, r0
 80019c0:	6960      	ldr	r0, [r4, #20]
 80019c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019c6:	6a20      	ldr	r0, [r4, #32]
 80019c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019d0:	070a      	lsls	r2, r1, #28
 80019d2:	d519      	bpl.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019d4:	4978      	ldr	r1, [pc, #480]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80019d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019de:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80019e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e6:	4313      	orrs	r3, r2
 80019e8:	6962      	ldr	r2, [r4, #20]
 80019ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019ee:	69e2      	ldr	r2, [r4, #28]
 80019f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80019f8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80019fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001a08:	4c6b      	ldr	r4, [pc, #428]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a12:	f7fe fdd5 	bl	80005c0 <HAL_GetTick>
 8001a16:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	f140 80c4 	bpl.w	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a20:	2000      	movs	r0, #0
 8001a22:	e009      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001a24:	2601      	movs	r6, #1
 8001a26:	e657      	b.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a28:	f7fe fdca 	bl	80005c0 <HAL_GetTick>
 8001a2c:	eba0 0008 	sub.w	r0, r0, r8
 8001a30:	2864      	cmp	r0, #100	; 0x64
 8001a32:	f67f ae69 	bls.w	8001708 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001a36:	2003      	movs	r0, #3
}
 8001a38:	b003      	add	sp, #12
 8001a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a44:	4293      	cmp	r3, r2
 8001a46:	f43f ae69 	beq.w	800171c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a56:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a5e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a60:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a64:	07da      	lsls	r2, r3, #31
 8001a66:	f57f ae59 	bpl.w	800171c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fda9 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a72:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a76:	079b      	lsls	r3, r3, #30
 8001a78:	f53f ae50 	bmi.w	800171c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7fe fda0 	bl	80005c0 <HAL_GetTick>
 8001a80:	eba0 0008 	sub.w	r0, r0, r8
 8001a84:	4548      	cmp	r0, r9
 8001a86:	d9f5      	bls.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001a88:	e7d5      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a8a:	6891      	ldr	r1, [r2, #8]
 8001a8c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a90:	e654      	b.n	800173c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a92:	4e49      	ldr	r6, [pc, #292]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001a94:	6833      	ldr	r3, [r6, #0]
 8001a96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a9a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a9c:	f7fe fd90 	bl	80005c0 <HAL_GetTick>
 8001aa0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aa2:	6833      	ldr	r3, [r6, #0]
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	d472      	bmi.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	07d7      	lsls	r7, r2, #31
 8001aac:	d512      	bpl.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ab0:	b983      	cbnz	r3, 8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ab2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ab6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001abe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	6861      	ldr	r1, [r4, #4]
 8001ac6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001aca:	68a1      	ldr	r1, [r4, #8]
 8001acc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ad0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ad4:	0316      	lsls	r6, r2, #12
 8001ad6:	d503      	bpl.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ade:	d005      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001ae0:	02d0      	lsls	r0, r2, #11
 8001ae2:	d51e      	bpl.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aea:	d11a      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001aec:	4932      	ldr	r1, [pc, #200]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001aee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001af2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001afa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001afe:	4303      	orrs	r3, r0
 8001b00:	6860      	ldr	r0, [r4, #4]
 8001b02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b06:	68e0      	ldr	r0, [r4, #12]
 8001b08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b10:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b16:	f020 001f 	bic.w	r0, r0, #31
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	4303      	orrs	r3, r0
 8001b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b22:	01d1      	lsls	r1, r2, #7
 8001b24:	d511      	bpl.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b26:	4924      	ldr	r1, [pc, #144]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b28:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b2c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b34:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	6860      	ldr	r0, [r4, #4]
 8001b3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b40:	6920      	ldr	r0, [r4, #16]
 8001b42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b4a:	0192      	lsls	r2, r2, #6
 8001b4c:	d50d      	bpl.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b4e:	6923      	ldr	r3, [r4, #16]
 8001b50:	6862      	ldr	r2, [r4, #4]
 8001b52:	041b      	lsls	r3, r3, #16
 8001b54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b58:	68e2      	ldr	r2, [r4, #12]
 8001b5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b5e:	68a2      	ldr	r2, [r4, #8]
 8001b60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b6a:	4e13      	ldr	r6, [pc, #76]	; (8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001b6c:	6833      	ldr	r3, [r6, #0]
 8001b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b72:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b74:	f7fe fd24 	bl	80005c0 <HAL_GetTick>
 8001b78:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b7a:	6833      	ldr	r3, [r6, #0]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	f53f aed7 	bmi.w	8001930 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b82:	f7fe fd1d 	bl	80005c0 <HAL_GetTick>
 8001b86:	1bc0      	subs	r0, r0, r7
 8001b88:	2864      	cmp	r0, #100	; 0x64
 8001b8a:	d9f6      	bls.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001b8c:	e753      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b8e:	f7fe fd17 	bl	80005c0 <HAL_GetTick>
 8001b92:	1bc0      	subs	r0, r0, r7
 8001b94:	2864      	cmp	r0, #100	; 0x64
 8001b96:	d984      	bls.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001b98:	e74d      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b9a:	f7fe fd11 	bl	80005c0 <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	2864      	cmp	r0, #100	; 0x64
 8001ba2:	f67f aecf 	bls.w	8001944 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001ba6:	e746      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ba8:	f7fe fd0a 	bl	80005c0 <HAL_GetTick>
 8001bac:	1b40      	subs	r0, r0, r5
 8001bae:	2864      	cmp	r0, #100	; 0x64
 8001bb0:	f67f af32 	bls.w	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001bb4:	e73f      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bbc:	6803      	ldr	r3, [r0, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bc4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6603      	str	r3, [r0, #96]	; 0x60
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_UART_TxCpltCallback>:
 8001bd8:	4770      	bx	lr

08001bda <HAL_UART_ErrorCallback>:
 8001bda:	4770      	bx	lr

08001bdc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001bdc:	6803      	ldr	r3, [r0, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001be0:	6819      	ldr	r1, [r3, #0]
{
 8001be2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001be4:	0716      	lsls	r6, r2, #28
{
 8001be6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001be8:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8001bea:	d109      	bne.n	8001c00 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001bec:	0695      	lsls	r5, r2, #26
 8001bee:	d563      	bpl.n	8001cb8 <HAL_UART_IRQHandler+0xdc>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001bf0:	068e      	lsls	r6, r1, #26
 8001bf2:	d561      	bpl.n	8001cb8 <HAL_UART_IRQHandler+0xdc>
      if (huart->RxISR != NULL)
 8001bf4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
}
 8001bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001bfe:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c00:	f015 0001 	ands.w	r0, r5, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_UART_IRQHandler+0x30>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001c06:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c0a:	d055      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xdc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c0c:	07d5      	lsls	r5, r2, #31
 8001c0e:	d507      	bpl.n	8001c20 <HAL_UART_IRQHandler+0x44>
 8001c10:	05ce      	lsls	r6, r1, #23
 8001c12:	d505      	bpl.n	8001c20 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c14:	2501      	movs	r5, #1
 8001c16:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c18:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001c1a:	f045 0501 	orr.w	r5, r5, #1
 8001c1e:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c20:	0795      	lsls	r5, r2, #30
 8001c22:	d506      	bpl.n	8001c32 <HAL_UART_IRQHandler+0x56>
 8001c24:	b128      	cbz	r0, 8001c32 <HAL_UART_IRQHandler+0x56>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c26:	2502      	movs	r5, #2
 8001c28:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c2a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001c2c:	f045 0504 	orr.w	r5, r5, #4
 8001c30:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c32:	0756      	lsls	r6, r2, #29
 8001c34:	d506      	bpl.n	8001c44 <HAL_UART_IRQHandler+0x68>
 8001c36:	b128      	cbz	r0, 8001c44 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001c38:	2504      	movs	r5, #4
 8001c3a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c3c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001c3e:	f045 0502 	orr.w	r5, r5, #2
 8001c42:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c44:	0715      	lsls	r5, r2, #28
 8001c46:	d507      	bpl.n	8001c58 <HAL_UART_IRQHandler+0x7c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c48:	068e      	lsls	r6, r1, #26
 8001c4a:	d400      	bmi.n	8001c4e <HAL_UART_IRQHandler+0x72>
 8001c4c:	b120      	cbz	r0, 8001c58 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c4e:	2008      	movs	r0, #8
 8001c50:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c52:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001c54:	4303      	orrs	r3, r0
 8001c56:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d043      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c5e:	0695      	lsls	r5, r2, #26
 8001c60:	d505      	bpl.n	8001c6e <HAL_UART_IRQHandler+0x92>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c62:	0688      	lsls	r0, r1, #26
 8001c64:	d503      	bpl.n	8001c6e <HAL_UART_IRQHandler+0x92>
        if (huart->RxISR != NULL)
 8001c66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c68:	b10b      	cbz	r3, 8001c6e <HAL_UART_IRQHandler+0x92>
          huart->RxISR(huart);
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c6e:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 8001c70:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8001c72:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c74:	6892      	ldr	r2, [r2, #8]
 8001c76:	0651      	lsls	r1, r2, #25
 8001c78:	d402      	bmi.n	8001c80 <HAL_UART_IRQHandler+0xa4>
 8001c7a:	f015 0508 	ands.w	r5, r5, #8
 8001c7e:	d017      	beq.n	8001cb0 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 8001c80:	f7ff ff9c 	bl	8001bbc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	0652      	lsls	r2, r2, #25
 8001c8a:	d50d      	bpl.n	8001ca8 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8c:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c94:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001c96:	b138      	cbz	r0, 8001ca8 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_UART_IRQHandler+0x10c>)
 8001c9a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c9c:	f7fe fed0 	bl	8000a40 <HAL_DMA_Abort_IT>
 8001ca0:	b308      	cbz	r0, 8001ce6 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ca2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ca4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001ca6:	e7a8      	b.n	8001bfa <HAL_UART_IRQHandler+0x1e>
            HAL_UART_ErrorCallback(huart);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ff96 	bl	8001bda <HAL_UART_ErrorCallback>
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001cb0:	f7ff ff93 	bl	8001bda <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb4:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001cb8:	0616      	lsls	r6, r2, #24
 8001cba:	d505      	bpl.n	8001cc8 <HAL_UART_IRQHandler+0xec>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001cbc:	060d      	lsls	r5, r1, #24
 8001cbe:	d503      	bpl.n	8001cc8 <HAL_UART_IRQHandler+0xec>
    if (huart->TxISR != NULL)
 8001cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cc2:	b183      	cbz	r3, 8001ce6 <HAL_UART_IRQHandler+0x10a>
      huart->TxISR(huart);
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	e798      	b.n	8001bfa <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001cc8:	0650      	lsls	r0, r2, #25
 8001cca:	d50c      	bpl.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
 8001ccc:	064a      	lsls	r2, r1, #25
 8001cce:	d50a      	bpl.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001cd0:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001cd2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001ce2:	f7ff ff79 	bl	8001bd8 <HAL_UART_TxCpltCallback>
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	08001ced 	.word	0x08001ced

08001cec <UART_DMAAbortOnError>:
{
 8001cec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001cee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001cf6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001cfa:	f7ff ff6e 	bl	8001bda <HAL_UART_ErrorCallback>
 8001cfe:	bd08      	pop	{r3, pc}

08001d00 <UART_SetConfig>:
{
 8001d00:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d02:	69c2      	ldr	r2, [r0, #28]
{
 8001d04:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d06:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d08:	6881      	ldr	r1, [r0, #8]
 8001d0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d0c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d0e:	4301      	orrs	r1, r0
 8001d10:	6960      	ldr	r0, [r4, #20]
 8001d12:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d14:	4890      	ldr	r0, [pc, #576]	; (8001f58 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d16:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d18:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 8001d1a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d1c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d1e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d20:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001d28:	4301      	orrs	r1, r0
 8001d2a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d2c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d2e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001d30:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d32:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001d36:	4301      	orrs	r1, r0
 8001d38:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d3a:	4988      	ldr	r1, [pc, #544]	; (8001f5c <UART_SetConfig+0x25c>)
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	d117      	bne.n	8001d70 <UART_SetConfig+0x70>
 8001d40:	4b87      	ldr	r3, [pc, #540]	; (8001f60 <UART_SetConfig+0x260>)
 8001d42:	4988      	ldr	r1, [pc, #544]	; (8001f64 <UART_SetConfig+0x264>)
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d48:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	d129      	bne.n	8001da8 <UART_SetConfig+0xa8>
    switch (clocksource)
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	f200 809d 	bhi.w	8001e94 <UART_SetConfig+0x194>
 8001d5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d5e:	008c      	.short	0x008c
 8001d60:	00ee00e8 	.word	0x00ee00e8
 8001d64:	00fa009b 	.word	0x00fa009b
 8001d68:	009b009b 	.word	0x009b009b
 8001d6c:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d70:	497d      	ldr	r1, [pc, #500]	; (8001f68 <UART_SetConfig+0x268>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d106      	bne.n	8001d84 <UART_SetConfig+0x84>
 8001d76:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <UART_SetConfig+0x260>)
 8001d78:	497c      	ldr	r1, [pc, #496]	; (8001f6c <UART_SetConfig+0x26c>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	e7e3      	b.n	8001d4c <UART_SetConfig+0x4c>
 8001d84:	497a      	ldr	r1, [pc, #488]	; (8001f70 <UART_SetConfig+0x270>)
 8001d86:	428b      	cmp	r3, r1
 8001d88:	d11d      	bne.n	8001dc6 <UART_SetConfig+0xc6>
 8001d8a:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <UART_SetConfig+0x260>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	f000 80d9 	beq.w	8001f4c <UART_SetConfig+0x24c>
 8001d9a:	d80e      	bhi.n	8001dba <UART_SetConfig+0xba>
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d067      	beq.n	8001e70 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001da4:	d076      	beq.n	8001e94 <UART_SetConfig+0x194>
 8001da6:	2310      	movs	r3, #16
    switch (clocksource)
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d873      	bhi.n	8001e94 <UART_SetConfig+0x194>
 8001dac:	e8df f003 	tbb	[pc, r3]
 8001db0:	72a29f99 	.word	0x72a29f99
 8001db4:	727272b4 	.word	0x727272b4
 8001db8:	b7          	.byte	0xb7
 8001db9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	f000 80ba 	beq.w	8001f34 <UART_SetConfig+0x234>
 8001dc0:	2b30      	cmp	r3, #48	; 0x30
 8001dc2:	d03f      	beq.n	8001e44 <UART_SetConfig+0x144>
 8001dc4:	e7ec      	b.n	8001da0 <UART_SetConfig+0xa0>
 8001dc6:	496b      	ldr	r1, [pc, #428]	; (8001f74 <UART_SetConfig+0x274>)
 8001dc8:	428b      	cmp	r3, r1
 8001dca:	d10d      	bne.n	8001de8 <UART_SetConfig+0xe8>
 8001dcc:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <UART_SetConfig+0x260>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	f000 80b8 	beq.w	8001f4c <UART_SetConfig+0x24c>
 8001ddc:	d9de      	bls.n	8001d9c <UART_SetConfig+0x9c>
 8001dde:	2b80      	cmp	r3, #128	; 0x80
 8001de0:	f000 80a8 	beq.w	8001f34 <UART_SetConfig+0x234>
 8001de4:	2bc0      	cmp	r3, #192	; 0xc0
 8001de6:	e7ec      	b.n	8001dc2 <UART_SetConfig+0xc2>
 8001de8:	4963      	ldr	r1, [pc, #396]	; (8001f78 <UART_SetConfig+0x278>)
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d110      	bne.n	8001e10 <UART_SetConfig+0x110>
 8001dee:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <UART_SetConfig+0x260>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfc:	f000 80a6 	beq.w	8001f4c <UART_SetConfig+0x24c>
 8001e00:	d9cc      	bls.n	8001d9c <UART_SetConfig+0x9c>
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	f000 8095 	beq.w	8001f34 <UART_SetConfig+0x234>
 8001e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e0e:	e7d8      	b.n	8001dc2 <UART_SetConfig+0xc2>
 8001e10:	495a      	ldr	r1, [pc, #360]	; (8001f7c <UART_SetConfig+0x27c>)
 8001e12:	428b      	cmp	r3, r1
 8001e14:	d11e      	bne.n	8001e54 <UART_SetConfig+0x154>
 8001e16:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <UART_SetConfig+0x260>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e24:	f000 8092 	beq.w	8001f4c <UART_SetConfig+0x24c>
 8001e28:	d806      	bhi.n	8001e38 <UART_SetConfig+0x138>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d07c      	beq.n	8001f28 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e32:	d12f      	bne.n	8001e94 <UART_SetConfig+0x194>
 8001e34:	2310      	movs	r3, #16
 8001e36:	e78d      	b.n	8001d54 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e3c:	d07a      	beq.n	8001f34 <UART_SetConfig+0x234>
 8001e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001e42:	d1f4      	bne.n	8001e2e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e48:	d169      	bne.n	8001f1e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	0858      	lsrs	r0, r3, #1
 8001e4e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001e52:	e078      	b.n	8001f46 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e54:	494a      	ldr	r1, [pc, #296]	; (8001f80 <UART_SetConfig+0x280>)
 8001e56:	428b      	cmp	r3, r1
 8001e58:	d124      	bne.n	8001ea4 <UART_SetConfig+0x1a4>
 8001e5a:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <UART_SetConfig+0x260>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e68:	d070      	beq.n	8001f4c <UART_SetConfig+0x24c>
 8001e6a:	d815      	bhi.n	8001e98 <UART_SetConfig+0x198>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1de      	bne.n	8001e2e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e74:	d135      	bne.n	8001ee2 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e76:	f7ff fbd3 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e7a:	6862      	ldr	r2, [r4, #4]
 8001e7c:	0853      	lsrs	r3, r2, #1
 8001e7e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001e82:	fbb0 f0f2 	udiv	r0, r0, r2
 8001e86:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001e8c:	f1a0 0210 	sub.w	r2, r0, #16
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d91a      	bls.n	8001eca <UART_SetConfig+0x1ca>
      ret = HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
 8001e96:	e020      	b.n	8001eda <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9c:	d04a      	beq.n	8001f34 <UART_SetConfig+0x234>
 8001e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ea2:	e7ce      	b.n	8001e42 <UART_SetConfig+0x142>
 8001ea4:	4937      	ldr	r1, [pc, #220]	; (8001f84 <UART_SetConfig+0x284>)
 8001ea6:	428b      	cmp	r3, r1
 8001ea8:	d1f4      	bne.n	8001e94 <UART_SetConfig+0x194>
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <UART_SetConfig+0x260>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb8:	d048      	beq.n	8001f4c <UART_SetConfig+0x24c>
 8001eba:	f67f af6f 	bls.w	8001d9c <UART_SetConfig+0x9c>
 8001ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec2:	d037      	beq.n	8001f34 <UART_SetConfig+0x234>
 8001ec4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ec8:	e77b      	b.n	8001dc2 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001eca:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ece:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ed2:	6822      	ldr	r2, [r4, #0]
 8001ed4:	4318      	orrs	r0, r3
 8001ed6:	60d0      	str	r0, [r2, #12]
 8001ed8:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001ede:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ee2:	f7ff fb9d 	bl	8001620 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001eec:	e008      	b.n	8001f00 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001eee:	f7ff fba7 	bl	8001640 <HAL_RCC_GetPCLK2Freq>
 8001ef2:	e7f8      	b.n	8001ee6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ef4:	6863      	ldr	r3, [r4, #4]
 8001ef6:	0858      	lsrs	r0, r3, #1
 8001ef8:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001efc:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f04:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f06:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001f0a:	f1a0 0210 	sub.w	r2, r0, #16
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d8c0      	bhi.n	8001e94 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	60d8      	str	r0, [r3, #12]
 8001f16:	e7df      	b.n	8001ed8 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f18:	f7ff fab0 	bl	800147c <HAL_RCC_GetSysClockFreq>
 8001f1c:	e7e3      	b.n	8001ee6 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f1e:	6863      	ldr	r3, [r4, #4]
 8001f20:	0858      	lsrs	r0, r3, #1
 8001f22:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001f26:	e7eb      	b.n	8001f00 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f2c:	d1df      	bne.n	8001eee <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f2e:	f7ff fb87 	bl	8001640 <HAL_RCC_GetPCLK2Freq>
 8001f32:	e7a2      	b.n	8001e7a <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f38:	d1dc      	bne.n	8001ef4 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	0858      	lsrs	r0, r3, #1
 8001f3e:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001f42:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f4a:	e79c      	b.n	8001e86 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f4c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f50:	d1e2      	bne.n	8001f18 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f52:	f7ff fa93 	bl	800147c <HAL_RCC_GetSysClockFreq>
 8001f56:	e790      	b.n	8001e7a <UART_SetConfig+0x17a>
 8001f58:	efff69f3 	.word	0xefff69f3
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08002b5c 	.word	0x08002b5c
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	08002b60 	.word	0x08002b60
 8001f70:	40004800 	.word	0x40004800
 8001f74:	40004c00 	.word	0x40004c00
 8001f78:	40005000 	.word	0x40005000
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40007800 	.word	0x40007800
 8001f84:	40007c00 	.word	0x40007c00

08001f88 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f8a:	07da      	lsls	r2, r3, #31
{
 8001f8c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f8e:	d506      	bpl.n	8001f9e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f90:	6801      	ldr	r1, [r0, #0]
 8001f92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f94:	684a      	ldr	r2, [r1, #4]
 8001f96:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f9a:	4322      	orrs	r2, r4
 8001f9c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f9e:	079c      	lsls	r4, r3, #30
 8001fa0:	d506      	bpl.n	8001fb0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fa2:	6801      	ldr	r1, [r0, #0]
 8001fa4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fa6:	684a      	ldr	r2, [r1, #4]
 8001fa8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fac:	4322      	orrs	r2, r4
 8001fae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fb0:	0759      	lsls	r1, r3, #29
 8001fb2:	d506      	bpl.n	8001fc2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fb4:	6801      	ldr	r1, [r0, #0]
 8001fb6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001fb8:	684a      	ldr	r2, [r1, #4]
 8001fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fbe:	4322      	orrs	r2, r4
 8001fc0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fc2:	071a      	lsls	r2, r3, #28
 8001fc4:	d506      	bpl.n	8001fd4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fc6:	6801      	ldr	r1, [r0, #0]
 8001fc8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001fca:	684a      	ldr	r2, [r1, #4]
 8001fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd0:	4322      	orrs	r2, r4
 8001fd2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fd4:	06dc      	lsls	r4, r3, #27
 8001fd6:	d506      	bpl.n	8001fe6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fd8:	6801      	ldr	r1, [r0, #0]
 8001fda:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001fdc:	688a      	ldr	r2, [r1, #8]
 8001fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fe2:	4322      	orrs	r2, r4
 8001fe4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fe6:	0699      	lsls	r1, r3, #26
 8001fe8:	d506      	bpl.n	8001ff8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fea:	6801      	ldr	r1, [r0, #0]
 8001fec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001fee:	688a      	ldr	r2, [r1, #8]
 8001ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff4:	4322      	orrs	r2, r4
 8001ff6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ff8:	065a      	lsls	r2, r3, #25
 8001ffa:	d510      	bpl.n	800201e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ffc:	6801      	ldr	r1, [r0, #0]
 8001ffe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002000:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002002:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002006:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800200a:	ea42 0204 	orr.w	r2, r2, r4
 800200e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002010:	d105      	bne.n	800201e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002012:	684a      	ldr	r2, [r1, #4]
 8002014:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002016:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800201a:	4322      	orrs	r2, r4
 800201c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	d506      	bpl.n	8002030 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002022:	6802      	ldr	r2, [r0, #0]
 8002024:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002026:	6853      	ldr	r3, [r2, #4]
 8002028:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800202c:	430b      	orrs	r3, r1
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	bd10      	pop	{r4, pc}

08002032 <UART_WaitOnFlagUntilTimeout>:
{
 8002032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002036:	9d06      	ldr	r5, [sp, #24]
 8002038:	4604      	mov	r4, r0
 800203a:	460f      	mov	r7, r1
 800203c:	4616      	mov	r6, r2
 800203e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002040:	6821      	ldr	r1, [r4, #0]
 8002042:	69ca      	ldr	r2, [r1, #28]
 8002044:	ea37 0302 	bics.w	r3, r7, r2
 8002048:	bf0c      	ite	eq
 800204a:	2201      	moveq	r2, #1
 800204c:	2200      	movne	r2, #0
 800204e:	42b2      	cmp	r2, r6
 8002050:	d002      	beq.n	8002058 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002052:	2000      	movs	r0, #0
}
 8002054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002058:	1c6b      	adds	r3, r5, #1
 800205a:	d0f2      	beq.n	8002042 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205c:	f7fe fab0 	bl	80005c0 <HAL_GetTick>
 8002060:	eba0 0008 	sub.w	r0, r0, r8
 8002064:	4285      	cmp	r5, r0
 8002066:	d301      	bcc.n	800206c <UART_WaitOnFlagUntilTimeout+0x3a>
 8002068:	2d00      	cmp	r5, #0
 800206a:	d1e9      	bne.n	8002040 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800206c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800206e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002076:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002080:	2320      	movs	r3, #32
 8002082:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002084:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002086:	2300      	movs	r3, #0
 8002088:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002090 <HAL_UART_Transmit>:
{
 8002090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002094:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002096:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8002098:	4604      	mov	r4, r0
 800209a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800209c:	2b20      	cmp	r3, #32
{
 800209e:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80020a0:	d14b      	bne.n	800213a <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80020a2:	2900      	cmp	r1, #0
 80020a4:	d047      	beq.n	8002136 <HAL_UART_Transmit+0xa6>
 80020a6:	2a00      	cmp	r2, #0
 80020a8:	d045      	beq.n	8002136 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80020aa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d043      	beq.n	800213a <HAL_UART_Transmit+0xaa>
 80020b2:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80020b6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ba:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020be:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80020c0:	f7fe fa7e 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80020c6:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80020c8:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80020d0:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	d103      	bne.n	80020de <HAL_UART_Transmit+0x4e>
 80020d6:	6923      	ldr	r3, [r4, #16]
 80020d8:	b90b      	cbnz	r3, 80020de <HAL_UART_Transmit+0x4e>
 80020da:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80020dc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80020de:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e2:	463b      	mov	r3, r7
 80020e4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80020e8:	b292      	uxth	r2, r2
 80020ea:	b94a      	cbnz	r2, 8002100 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ff9f 	bl	8002032 <UART_WaitOnFlagUntilTimeout>
 80020f4:	b950      	cbnz	r0, 800210c <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 80020f6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80020f8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80020fc:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80020fe:	e006      	b.n	800210e <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff94 	bl	8002032 <UART_WaitOnFlagUntilTimeout>
 800210a:	b118      	cbz	r0, 8002114 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
}
 800210e:	b003      	add	sp, #12
 8002110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002114:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002116:	b95e      	cbnz	r6, 8002130 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002118:	f835 3b02 	ldrh.w	r3, [r5], #2
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002120:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002122:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002126:	3b01      	subs	r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800212e:	e7d6      	b.n	80020de <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002130:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002134:	e7f4      	b.n	8002120 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002136:	2001      	movs	r0, #1
 8002138:	e7e9      	b.n	800210e <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 800213a:	2002      	movs	r0, #2
 800213c:	e7e7      	b.n	800210e <HAL_UART_Transmit+0x7e>

0800213e <UART_CheckIdleState>:
{
 800213e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002140:	2500      	movs	r5, #0
{
 8002142:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002146:	f7fe fa3b 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800214a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800214c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	0712      	lsls	r2, r2, #28
 8002152:	d407      	bmi.n	8002164 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8002154:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002156:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002158:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800215a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800215e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002160:	b003      	add	sp, #12
 8002162:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002164:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002168:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800216c:	4620      	mov	r0, r4
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	462a      	mov	r2, r5
 8002172:	f7ff ff5e 	bl	8002032 <UART_WaitOnFlagUntilTimeout>
 8002176:	2800      	cmp	r0, #0
 8002178:	d0ec      	beq.n	8002154 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800217a:	2003      	movs	r0, #3
 800217c:	e7f0      	b.n	8002160 <UART_CheckIdleState+0x22>

0800217e <HAL_UART_Init>:
{
 800217e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002180:	4604      	mov	r4, r0
 8002182:	b340      	cbz	r0, 80021d6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002184:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002186:	b91b      	cbnz	r3, 8002190 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002188:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800218c:	f000 fbce 	bl	800292c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002190:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002192:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002194:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002196:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021a0:	f7ff fdae 	bl	8001d00 <UART_SetConfig>
 80021a4:	2801      	cmp	r0, #1
 80021a6:	d016      	beq.n	80021d6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021aa:	b113      	cbz	r3, 80021b2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff feeb 	bl	8001f88 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80021b4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
}
 80021cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80021d0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80021d2:	f7ff bfb4 	b.w	800213e <UART_CheckIdleState>
}
 80021d6:	2001      	movs	r0, #1
 80021d8:	bd10      	pop	{r4, pc}
	...

080021dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80021de:	3b01      	subs	r3, #1
 80021e0:	d101      	bne.n	80021e6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80021e2:	2003      	movs	r0, #3
 80021e4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021e6:	6902      	ldr	r2, [r0, #16]
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	daf8      	bge.n	80021de <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80021ec:	6903      	ldr	r3, [r0, #16]
 80021ee:	4a06      	ldr	r2, [pc, #24]	; (8002208 <USB_CoreReset+0x2c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80021f6:	3a01      	subs	r2, #1
 80021f8:	d0f3      	beq.n	80021e2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80021fa:	6903      	ldr	r3, [r0, #16]
 80021fc:	f013 0301 	ands.w	r3, r3, #1
 8002200:	d1f9      	bne.n	80021f6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002202:	4618      	mov	r0, r3
}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	00030d41 	.word	0x00030d41

0800220c <USB_CoreInit>:
{
 800220c:	b084      	sub	sp, #16
 800220e:	b538      	push	{r3, r4, r5, lr}
 8002210:	ad05      	add	r5, sp, #20
 8002212:	4604      	mov	r4, r0
 8002214:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800221a:	2b01      	cmp	r3, #1
 800221c:	d126      	bne.n	800226c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800221e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002226:	68c3      	ldr	r3, [r0, #12]
 8002228:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800222c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002230:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002232:	68c3      	ldr	r3, [r0, #12]
 8002234:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002238:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800223a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800223c:	2b01      	cmp	r3, #1
 800223e:	d103      	bne.n	8002248 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002240:	68c3      	ldr	r3, [r0, #12]
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff ffc7 	bl	80021dc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800224e:	9b08      	ldr	r3, [sp, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002254:	68a3      	ldr	r3, [r4, #8]
 8002256:	f043 0306 	orr.w	r3, r3, #6
 800225a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800225c:	68a3      	ldr	r3, [r4, #8]
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	60a3      	str	r3, [r4, #8]
}
 8002264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002268:	b004      	add	sp, #16
 800226a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800226c:	68c3      	ldr	r3, [r0, #12]
 800226e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002272:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002274:	f7ff ffb2 	bl	80021dc <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002280:	e7e5      	b.n	800224e <USB_CoreInit+0x42>

08002282 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002282:	6883      	ldr	r3, [r0, #8]
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6083      	str	r3, [r0, #8]
}
 800228a:	2000      	movs	r0, #0
 800228c:	4770      	bx	lr

0800228e <USB_SetCurrentMode>:
{
 800228e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002290:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002292:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002294:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002298:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800229a:	d108      	bne.n	80022ae <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800229c:	68c3      	ldr	r3, [r0, #12]
 800229e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80022a2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80022a4:	2032      	movs	r0, #50	; 0x32
 80022a6:	f7fe f991 	bl	80005cc <HAL_Delay>
  return HAL_OK;
 80022aa:	2000      	movs	r0, #0
 80022ac:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80022ae:	b919      	cbnz	r1, 80022b8 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80022b0:	68c3      	ldr	r3, [r0, #12]
 80022b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022b6:	e7f4      	b.n	80022a2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
}
 80022ba:	bd08      	pop	{r3, pc}

080022bc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80022bc:	0189      	lsls	r1, r1, #6
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <USB_FlushTxFifo+0x20>)
 80022c0:	f041 0120 	orr.w	r1, r1, #32
 80022c4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80022c6:	3a01      	subs	r2, #1
 80022c8:	d005      	beq.n	80022d6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80022ca:	6903      	ldr	r3, [r0, #16]
 80022cc:	f013 0320 	ands.w	r3, r3, #32
 80022d0:	d1f9      	bne.n	80022c6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80022d2:	4618      	mov	r0, r3
 80022d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80022d6:	2003      	movs	r0, #3
}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	00030d41 	.word	0x00030d41

080022e0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80022e0:	2310      	movs	r3, #16
 80022e2:	4a06      	ldr	r2, [pc, #24]	; (80022fc <USB_FlushRxFifo+0x1c>)
 80022e4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80022e6:	3a01      	subs	r2, #1
 80022e8:	d005      	beq.n	80022f6 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80022ea:	6903      	ldr	r3, [r0, #16]
 80022ec:	f013 0310 	ands.w	r3, r3, #16
 80022f0:	d1f9      	bne.n	80022e6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80022f2:	4618      	mov	r0, r3
 80022f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80022f6:	2003      	movs	r0, #3
}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	00030d41 	.word	0x00030d41

08002300 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002300:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002304:	4319      	orrs	r1, r3
 8002306:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800230a:	2000      	movs	r0, #0
 800230c:	4770      	bx	lr
	...

08002310 <USB_DevInit>:
{
 8002310:	b084      	sub	sp, #16
 8002312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002316:	4604      	mov	r4, r0
 8002318:	a809      	add	r0, sp, #36	; 0x24
 800231a:	4688      	mov	r8, r1
 800231c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002324:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002326:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002328:	461d      	mov	r5, r3
 800232a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800232c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002330:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002332:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002336:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002338:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 800233a:	d1f7      	bne.n	800232c <USB_DevInit+0x1c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800233c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800233e:	2e00      	cmp	r6, #0
 8002340:	d171      	bne.n	8002426 <USB_DevInit+0x116>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002346:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002358:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800235a:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800235c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8002360:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002364:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002368:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800236c:	d161      	bne.n	8002432 <USB_DevInit+0x122>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800236e:	2a00      	cmp	r2, #0
 8002370:	d15d      	bne.n	800242e <USB_DevInit+0x11e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002372:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff ffc3 	bl	8002300 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800237a:	2110      	movs	r1, #16
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ff9d 	bl	80022bc <USB_FlushTxFifo>
 8002382:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ffab 	bl	80022e0 <USB_FlushRxFifo>
 800238a:	2800      	cmp	r0, #0
 800238c:	d155      	bne.n	800243a <USB_DevInit+0x12a>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800238e:	1c08      	adds	r0, r1, #0
 8002390:	bf18      	it	ne
 8002392:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800239a:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800239e:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80023a2:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80023a4:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80023a8:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80023aa:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80023ac:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023ae:	4543      	cmp	r3, r8
 80023b0:	d145      	bne.n	800243e <USB_DevInit+0x12e>
 80023b2:	2100      	movs	r1, #0
 80023b4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80023b8:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80023bc:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80023c0:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80023c2:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023c6:	428b      	cmp	r3, r1
 80023c8:	d14c      	bne.n	8002464 <USB_DevInit+0x154>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80023ca:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80023cc:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80023ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d2:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80023d4:	d107      	bne.n	80023e6 <USB_DevInit+0xd6>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <USB_DevInit+0x180>)
 80023d8:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80023da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	f043 0303 	orr.w	r3, r3, #3
 80023e4:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80023ea:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80023ee:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80023f0:	b91f      	cbnz	r7, 80023fa <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80023f2:	69a3      	ldr	r3, [r4, #24]
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80023fa:	69a2      	ldr	r2, [r4, #24]
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <USB_DevInit+0x184>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002404:	b11b      	cbz	r3, 800240e <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002406:	69a3      	ldr	r3, [r4, #24]
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800240e:	2e01      	cmp	r6, #1
 8002410:	d105      	bne.n	800241e <USB_DevInit+0x10e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002412:	69a3      	ldr	r3, [r4, #24]
 8002414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	61a3      	str	r3, [r4, #24]
}
 800241e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002422:	b004      	add	sp, #16
 8002424:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800242a:	63a3      	str	r3, [r4, #56]	; 0x38
 800242c:	e794      	b.n	8002358 <USB_DevInit+0x48>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800242e:	2101      	movs	r1, #1
 8002430:	e7a0      	b.n	8002374 <USB_DevInit+0x64>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002432:	2903      	cmp	r1, #3
 8002434:	d09b      	beq.n	800236e <USB_DevInit+0x5e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002436:	2103      	movs	r1, #3
 8002438:	e79c      	b.n	8002374 <USB_DevInit+0x64>
 800243a:	2001      	movs	r0, #1
 800243c:	e7aa      	b.n	8002394 <USB_DevInit+0x84>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800243e:	f8d2 a000 	ldr.w	sl, [r2]
 8002442:	f1ba 0f00 	cmp.w	sl, #0
 8002446:	da0b      	bge.n	8002460 <USB_DevInit+0x150>
      if (i == 0U)
 8002448:	b93b      	cbnz	r3, 800245a <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800244a:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800244e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002450:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002452:	f8c2 9008 	str.w	r9, [r2, #8]
 8002456:	3220      	adds	r2, #32
 8002458:	e7a9      	b.n	80023ae <USB_DevInit+0x9e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800245a:	f8c2 e000 	str.w	lr, [r2]
 800245e:	e7f6      	b.n	800244e <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002460:	6011      	str	r1, [r2, #0]
 8002462:	e7f4      	b.n	800244e <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002464:	f8d2 a000 	ldr.w	sl, [r2]
 8002468:	f1ba 0f00 	cmp.w	sl, #0
 800246c:	da0c      	bge.n	8002488 <USB_DevInit+0x178>
      if (i == 0U)
 800246e:	b941      	cbnz	r1, 8002482 <USB_DevInit+0x172>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002470:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002474:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002478:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800247a:	f8c2 9008 	str.w	r9, [r2, #8]
 800247e:	3220      	adds	r2, #32
 8002480:	e7a1      	b.n	80023c6 <USB_DevInit+0xb6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002482:	f8c2 c000 	str.w	ip, [r2]
 8002486:	e7f5      	b.n	8002474 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002488:	f8c2 e000 	str.w	lr, [r2]
 800248c:	e7f2      	b.n	8002474 <USB_DevInit+0x164>
 800248e:	bf00      	nop
 8002490:	00800100 	.word	0x00800100
 8002494:	803c3800 	.word	0x803c3800

08002498 <USB_DevDisconnect>:
{
 8002498:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800249a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80024a6:	2003      	movs	r0, #3
 80024a8:	f7fe f890 	bl	80005cc <HAL_Delay>
}
 80024ac:	2000      	movs	r0, #0
 80024ae:	bd08      	pop	{r3, pc}

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b4:	2234      	movs	r2, #52	; 0x34
 80024b6:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024bc:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024be:	f000 fb39 	bl	8002b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c2:	2214      	movs	r2, #20
 80024c4:	2100      	movs	r1, #0
 80024c6:	a802      	add	r0, sp, #8
 80024c8:	f000 fb34 	bl	8002b34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024cc:	2100      	movs	r1, #0
 80024ce:	2290      	movs	r2, #144	; 0x90
 80024d0:	a814      	add	r0, sp, #80	; 0x50
 80024d2:	f000 fb2f 	bl	8002b34 <memset>
  HAL_PWR_EnableBkUpAccess();
 80024d6:	f7fe fe35 	bl	8001144 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <SystemClock_Config+0xac>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024dc:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002500:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002502:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002508:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800250a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002510:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002514:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002516:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800251c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800251e:	2304      	movs	r3, #4
 8002520:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002522:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002524:	f7fe fe16 	bl	8001154 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002528:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800252a:	4629      	mov	r1, r5
 800252c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002530:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800253c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002540:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002542:	f7fe ffc9 	bl	80014d8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <SystemClock_Config+0xb4>)
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002548:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_CLK48;
 800254a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254c:	2300      	movs	r3, #0
 800254e:	9326      	str	r3, [sp, #152]	; 0x98
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002550:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	f7ff f885 	bl	8001660 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002556:	b039      	add	sp, #228	; 0xe4
 8002558:	bd30      	pop	{r4, r5, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40007000 	.word	0x40007000
 8002564:	00200080 	.word	0x00200080

08002568 <main>:
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2400      	movs	r4, #0
  HAL_Init();
 800256e:	f7fe f80f 	bl	8000590 <HAL_Init>
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2601      	movs	r6, #1
  SystemClock_Config();
 8002574:	f7ff ff9c 	bl	80024b0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	2214      	movs	r2, #20
 800257a:	2100      	movs	r1, #0
 800257c:	a807      	add	r0, sp, #28
 800257e:	f000 fad9 	bl	8002b34 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b75      	ldr	r3, [pc, #468]	; (8002758 <main+0x1f0>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002584:	f244 0181 	movw	r1, #16513	; 0x4081
 8002588:	4874      	ldr	r0, [pc, #464]	; (800275c <main+0x1f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800258e:	2707      	movs	r7, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002590:	f04f 0880 	mov.w	r8, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002594:	f042 0204 	orr.w	r2, r2, #4
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
 800259a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259c:	f002 0204 	and.w	r2, r2, #4
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
 80025ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025b2:	9202      	str	r2, [sp, #8]
 80025b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
 80025be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c0:	f002 0201 	and.w	r2, r2, #1
 80025c4:	9203      	str	r2, [sp, #12]
 80025c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	f042 0202 	orr.w	r2, r2, #2
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	f002 0202 	and.w	r2, r2, #2
 80025d6:	9204      	str	r2, [sp, #16]
 80025d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	f002 0208 	and.w	r2, r2, #8
 80025e8:	9205      	str	r2, [sp, #20]
 80025ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	9306      	str	r3, [sp, #24]
 80025fe:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002600:	f7fe fd02 	bl	8001008 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	4855      	ldr	r0, [pc, #340]	; (8002760 <main+0x1f8>)
 800260a:	f7fe fcfd 	bl	8001008 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800260e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002612:	a907      	add	r1, sp, #28
 8002614:	4853      	ldr	r0, [pc, #332]	; (8002764 <main+0x1fc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002616:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <main+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800261c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800261e:	f7fe fc09 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002622:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	a907      	add	r1, sp, #28
 8002628:	484c      	ldr	r0, [pc, #304]	; (800275c <main+0x1f4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800262a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	f7fe fbff 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002636:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800263a:	a907      	add	r1, sp, #28
 800263c:	484b      	ldr	r0, [pc, #300]	; (800276c <main+0x204>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800263e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002648:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264a:	f7fe fbf3 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800264e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002650:	a907      	add	r1, sp, #28
 8002652:	4843      	ldr	r0, [pc, #268]	; (8002760 <main+0x1f8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002654:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800265c:	f7fe fbea 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002660:	a907      	add	r1, sp, #28
 8002662:	483f      	ldr	r0, [pc, #252]	; (8002760 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002668:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800266c:	f7fe fbe2 	bl	8000e34 <HAL_GPIO_Init>
  heth.Instance = ETH;
 8002670:	483f      	ldr	r0, [pc, #252]	; (8002770 <main+0x208>)
  heth.Init.MACAddr[2] =   0xE1;
 8002672:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <main+0x20c>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002676:	8204      	strh	r4, [r0, #16]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002678:	e880 0048 	stmia.w	r0, {r3, r6}
  heth.Init.MACAddr[0] =   0x00;
 800267c:	6943      	ldr	r3, [r0, #20]
 800267e:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002680:	6943      	ldr	r3, [r0, #20]
 8002682:	f883 8001 	strb.w	r8, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 8002686:	6943      	ldr	r3, [r0, #20]
 8002688:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 800268a:	6943      	ldr	r3, [r0, #20]
 800268c:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 800268e:	6943      	ldr	r3, [r0, #20]
 8002690:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 8002692:	6943      	ldr	r3, [r0, #20]
 8002694:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002696:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800269a:	6184      	str	r4, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800269c:	61c4      	str	r4, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800269e:	6203      	str	r3, [r0, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 80026a0:	f7fe face 	bl	8000c40 <HAL_ETH_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026a4:	4834      	ldr	r0, [pc, #208]	; (8002778 <main+0x210>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80026a6:	2306      	movs	r3, #6
 80026a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026ac:	60c5      	str	r5, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026ae:	6104      	str	r4, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026b0:	6185      	str	r5, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80026b2:	61c6      	str	r6, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026b4:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026b6:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026b8:	62c6      	str	r6, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026ba:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Instance = ADC1;
 80026bc:	4d2f      	ldr	r5, [pc, #188]	; (800277c <main+0x214>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80026be:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026c2:	f7fe fca6 	bl	8001012 <HAL_PCD_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80026c6:	2210      	movs	r2, #16
 80026c8:	4621      	mov	r1, r4
 80026ca:	a807      	add	r0, sp, #28
 80026cc:	f000 fa32 	bl	8002b34 <memset>
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80026d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80026d4:	482a      	ldr	r0, [pc, #168]	; (8002780 <main+0x218>)
 80026d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026da:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026dc:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026de:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e2:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026e4:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026e6:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026e8:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026ec:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80026ee:	e885 000b 	stmia.w	r5, {r0, r1, r3}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <main+0x21c>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026f4:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f6:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026f8:	f7fd ff7a 	bl	80005f0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026fc:	a907      	add	r1, sp, #28
 80026fe:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8002700:	9407      	str	r4, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002702:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002704:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002706:	f7fe f88d 	bl	8000824 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 800270a:	4e1f      	ldr	r6, [pc, #124]	; (8002788 <main+0x220>)
  huart2.Init.BaudRate = 9600;
 800270c:	f44f 5716 	mov.w	r7, #9600	; 0x2580
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <main+0x224>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	60b4      	str	r4, [r6, #8]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002714:	4630      	mov	r0, r6
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002716:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002718:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002720:	6274      	str	r4, [r6, #36]	; 0x24
	  n8Value = HAL_ADC_GetValue(&hadc1);
 8002722:	4c1b      	ldr	r4, [pc, #108]	; (8002790 <main+0x228>)
  huart2.Init.BaudRate = 9600;
 8002724:	e886 0088 	stmia.w	r6, {r3, r7}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002728:	230c      	movs	r3, #12
 800272a:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800272c:	f7ff fd27 	bl	800217e <HAL_UART_Init>
	  HAL_ADC_Start(&hadc1);
 8002730:	4628      	mov	r0, r5
 8002732:	f7fe f803 	bl	800073c <HAL_ADC_Start>
	  n8Value = HAL_ADC_GetValue(&hadc1);
 8002736:	4628      	mov	r0, r5
 8002738:	f7fe f870 	bl	800081c <HAL_ADC_GetValue>
	  HAL_UART_Transmit(&huart2,&n8Value,sizeof(n8Value),1000);
 800273c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	  n8Value = HAL_ADC_GetValue(&hadc1);
 8002740:	7020      	strb	r0, [r4, #0]
	  HAL_UART_Transmit(&huart2,&n8Value,sizeof(n8Value),1000);
 8002742:	2201      	movs	r2, #1
 8002744:	4912      	ldr	r1, [pc, #72]	; (8002790 <main+0x228>)
 8002746:	4630      	mov	r0, r6
 8002748:	f7ff fca2 	bl	8002090 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800274c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002750:	f7fd ff3c 	bl	80005cc <HAL_Delay>
 8002754:	e7ec      	b.n	8002730 <main+0x1c8>
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40020400 	.word	0x40020400
 8002760:	40021800 	.word	0x40021800
 8002764:	40020800 	.word	0x40020800
 8002768:	10110000 	.word	0x10110000
 800276c:	40020c00 	.word	0x40020c00
 8002770:	200004fc 	.word	0x200004fc
 8002774:	40028000 	.word	0x40028000
 8002778:	2000002c 	.word	0x2000002c
 800277c:	20000430 	.word	0x20000430
 8002780:	40012000 	.word	0x40012000
 8002784:	0f000001 	.word	0x0f000001
 8002788:	2000047c 	.word	0x2000047c
 800278c:	40004400 	.word	0x40004400
 8002790:	20000478 	.word	0x20000478

08002794 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_MspInit+0x2c>)
{
 8002796:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
 80027a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80027a6:	9200      	str	r2, [sp, #0]
 80027a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027bc:	b002      	add	sp, #8
 80027be:	4770      	bx	lr
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c4:	b510      	push	{r4, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ca:	2214      	movs	r2, #20
 80027cc:	2100      	movs	r1, #0
 80027ce:	a803      	add	r0, sp, #12
 80027d0:	f000 f9b0 	bl	8002b34 <memset>
  if(hadc->Instance==ADC1)
 80027d4:	6822      	ldr	r2, [r4, #0]
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_MspInit+0x54>)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d11b      	bne.n	8002814 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027dc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	a903      	add	r1, sp, #12
 80027e2:	480e      	ldr	r0, [pc, #56]	; (800281c <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
 80027ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80027f2:	9201      	str	r2, [sp, #4]
 80027f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002808:	2301      	movs	r3, #1
 800280a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280c:	2303      	movs	r3, #3
 800280e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f7fe fb10 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002814:	b008      	add	sp, #32
 8002816:	bd10      	pop	{r4, pc}
 8002818:	40012000 	.word	0x40012000
 800281c:	40020000 	.word	0x40020000

08002820 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b08d      	sub	sp, #52	; 0x34
 8002824:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002826:	2214      	movs	r2, #20
 8002828:	2100      	movs	r1, #0
 800282a:	a807      	add	r0, sp, #28
 800282c:	f000 f982 	bl	8002b34 <memset>
  if(heth->Instance==ETH)
 8002830:	6822      	ldr	r2, [r4, #0]
 8002832:	4b39      	ldr	r3, [pc, #228]	; (8002918 <HAL_ETH_MspInit+0xf8>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d16d      	bne.n	8002914 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002838:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002840:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002844:	a907      	add	r1, sp, #28
 8002846:	4835      	ldr	r0, [pc, #212]	; (800291c <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800284a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002856:	9200      	str	r2, [sp, #0]
 8002858:	9a00      	ldr	r2, [sp, #0]
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002864:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002868:	9201      	str	r2, [sp, #4]
 800286a:	9a01      	ldr	r2, [sp, #4]
 800286c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
 8002874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002876:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800287a:	9202      	str	r2, [sp, #8]
 800287c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002880:	f042 0204 	orr.w	r2, r2, #4
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
 8002886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002888:	f002 0204 	and.w	r2, r2, #4
 800288c:	9203      	str	r2, [sp, #12]
 800288e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
 8002898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289a:	f002 0201 	and.w	r2, r2, #1
 800289e:	9204      	str	r2, [sp, #16]
 80028a0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a4:	f042 0202 	orr.w	r2, r2, #2
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
 80028aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ac:	f002 0202 	and.w	r2, r2, #2
 80028b0:	9205      	str	r2, [sp, #20]
 80028b2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028c6:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028c8:	9306      	str	r3, [sp, #24]
 80028ca:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028cc:	2332      	movs	r3, #50	; 0x32
 80028ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d0:	f7fe fab0 	bl	8000e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028d4:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	a907      	add	r1, sp, #28
 80028d8:	4811      	ldr	r0, [pc, #68]	; (8002920 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028e2:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f7fe faa6 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028ec:	a907      	add	r1, sp, #28
 80028ee:	480d      	ldr	r0, [pc, #52]	; (8002924 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028f0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028f8:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028fa:	f7fe fa9b 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80028fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002902:	a907      	add	r1, sp, #28
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002906:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800290e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002910:	f7fe fa90 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002914:	b00d      	add	sp, #52	; 0x34
 8002916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002918:	40028000 	.word	0x40028000
 800291c:	40020800 	.word	0x40020800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40021800 	.word	0x40021800

0800292c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b510      	push	{r4, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002932:	2214      	movs	r2, #20
 8002934:	2100      	movs	r1, #0
 8002936:	a803      	add	r0, sp, #12
 8002938:	f000 f8fc 	bl	8002b34 <memset>
  if(huart->Instance==USART2)
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_UART_MspInit+0x6c>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d127      	bne.n	8002994 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002944:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002948:	a903      	add	r1, sp, #12
 800294a:	4814      	ldr	r0, [pc, #80]	; (800299c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800294c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
 8002954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002956:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800295a:	9201      	str	r2, [sp, #4]
 800295c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002970:	2360      	movs	r3, #96	; 0x60
 8002972:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800297c:	2307      	movs	r3, #7
 800297e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f7fe fa58 	bl	8000e34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2026      	movs	r0, #38	; 0x26
 8002988:	4611      	mov	r1, r2
 800298a:	f7fd fffd 	bl	8000988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800298e:	2026      	movs	r0, #38	; 0x26
 8002990:	f7fe f832 	bl	80009f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002994:	b008      	add	sp, #32
 8002996:	bd10      	pop	{r4, pc}
 8002998:	40004400 	.word	0x40004400
 800299c:	40020c00 	.word	0x40020c00

080029a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029a0:	b510      	push	{r4, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	2214      	movs	r2, #20
 80029a8:	2100      	movs	r1, #0
 80029aa:	a803      	add	r0, sp, #12
 80029ac:	f000 f8c2 	bl	8002b34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029b6:	d132      	bne.n	8002a1e <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	4c1a      	ldr	r4, [pc, #104]	; (8002a24 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	a903      	add	r1, sp, #12
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6323      	str	r3, [r4, #48]	; 0x30
 80029c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029de:	230a      	movs	r3, #10
 80029e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f7fe fa27 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029ea:	a903      	add	r1, sp, #12
 80029ec:	480e      	ldr	r0, [pc, #56]	; (8002a28 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f7fe fa1d 	bl	8000e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	6363      	str	r3, [r4, #52]	; 0x34
 8002a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a12:	6463      	str	r3, [r4, #68]	; 0x44
 8002a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	9302      	str	r3, [sp, #8]
 8002a1c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a1e:	b008      	add	sp, #32
 8002a20:	bd10      	pop	{r4, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <NMI_Handler>:
 8002a2c:	4770      	bx	lr

08002a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	e7fe      	b.n	8002a30 <MemManage_Handler>

08002a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a32:	e7fe      	b.n	8002a32 <BusFault_Handler>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	e7fe      	b.n	8002a34 <UsageFault_Handler>

08002a36 <SVC_Handler>:
 8002a36:	4770      	bx	lr

08002a38 <DebugMon_Handler>:
 8002a38:	4770      	bx	lr

08002a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a3a:	4770      	bx	lr

08002a3c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3c:	f7fd bdb4 	b.w	80005a8 <HAL_IncTick>

08002a40 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a40:	4801      	ldr	r0, [pc, #4]	; (8002a48 <USART2_IRQHandler+0x8>)
 8002a42:	f7ff b8cb 	b.w	8001bdc <HAL_UART_IRQHandler>
 8002a46:	bf00      	nop
 8002a48:	2000047c 	.word	0x2000047c

08002a4c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a4c:	490f      	ldr	r1, [pc, #60]	; (8002a8c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a4e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <SystemInit+0x44>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <SystemInit+0x48>)
 8002a76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a80:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a86:	608b      	str	r3, [r1, #8]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	24003010 	.word	0x24003010

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a9e:	e003      	b.n	8002aa8 <LoopCopyDataInit>

08002aa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002aa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aa6:	3104      	adds	r1, #4

08002aa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002aac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ab0:	d3f6      	bcc.n	8002aa0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ab4:	e002      	b.n	8002abc <LoopFillZerobss>

08002ab6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ab6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ab8:	f842 3b04 	str.w	r3, [r2], #4

08002abc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002abe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ac0:	d3f9      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac2:	f7ff ffc3 	bl	8002a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f000 f811 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7ff fd4d 	bl	8002568 <main>
  bx  lr    
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002ad4:	08002b98 	.word	0x08002b98
  ldr  r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002adc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ae0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ae4:	20000544 	.word	0x20000544

08002ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>
	...

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4e0d      	ldr	r6, [pc, #52]	; (8002b24 <__libc_init_array+0x38>)
 8002af0:	4c0d      	ldr	r4, [pc, #52]	; (8002b28 <__libc_init_array+0x3c>)
 8002af2:	1ba4      	subs	r4, r4, r6
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	2500      	movs	r5, #0
 8002af8:	42a5      	cmp	r5, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	4e0b      	ldr	r6, [pc, #44]	; (8002b2c <__libc_init_array+0x40>)
 8002afe:	4c0c      	ldr	r4, [pc, #48]	; (8002b30 <__libc_init_array+0x44>)
 8002b00:	f000 f820 	bl	8002b44 <_init>
 8002b04:	1ba4      	subs	r4, r4, r6
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	2500      	movs	r5, #0
 8002b0a:	42a5      	cmp	r5, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b14:	4798      	blx	r3
 8002b16:	3501      	adds	r5, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b1e:	4798      	blx	r3
 8002b20:	3501      	adds	r5, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08002b90 	.word	0x08002b90
 8002b28:	08002b90 	.word	0x08002b90
 8002b2c:	08002b90 	.word	0x08002b90
 8002b30:	08002b94 	.word	0x08002b94

08002b34 <memset>:
 8002b34:	4402      	add	r2, r0
 8002b36:	4603      	mov	r3, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <memset+0xa>
 8002b3c:	4770      	bx	lr
 8002b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b42:	e7f9      	b.n	8002b38 <memset+0x4>

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
