
I2C_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003490  08003490  00013490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080035d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000011c  20000070  08003644  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000018c  08003644  0002018c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c882  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ce8  00000000  00000000  0002c920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000058cd  00000000  00000000  0002e608  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000798  00000000  00000000  00033ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a98  00000000  00000000  00034670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000479a  00000000  00000000  00035108  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000033a1  00000000  00000000  000398a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003cc43  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b30  00000000  00000000  0003ccc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003474 	.word	0x08003474

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003474 	.word	0x08003474

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f890 	bl	8000684 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f84e 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 fb87 	bl	8001cb0 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000098 	.word	0x20000098
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000098 	.word	0x20000098

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800063a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000640:	ea01 0103 	and.w	r1, r1, r3
 8000644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800065c:	db07      	blt.n	800066e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000668:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f000 000f 	and.w	r0, r0, #15
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_NVIC_SetPriority+0x6c>)
 8000676:	541a      	strb	r2, [r3, r0]
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	680b      	ldr	r3, [r1, #0]
{
 80006b6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800087c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006bc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006be:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c0:	4a6c      	ldr	r2, [pc, #432]	; (8000874 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006c2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000880 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80006c6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ca:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80006cc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006d4:	45b6      	cmp	lr, r6
 80006d6:	f040 80b3 	bne.w	8000840 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006da:	684c      	ldr	r4, [r1, #4]
 80006dc:	f024 0710 	bic.w	r7, r4, #16
 80006e0:	2f02      	cmp	r7, #2
 80006e2:	d116      	bne.n	8000712 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80006e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006e8:	f003 0b07 	and.w	fp, r3, #7
 80006ec:	f04f 0c0f 	mov.w	ip, #15
 80006f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80006f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80006f8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006fc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000700:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000704:	690d      	ldr	r5, [r1, #16]
 8000706:	fa05 f50b 	lsl.w	r5, r5, fp
 800070a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800070e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000712:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000716:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000718:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800071c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000720:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000726:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800072e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000732:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000736:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073a:	d811      	bhi.n	8000760 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800073c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800073e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000742:	68cf      	ldr	r7, [r1, #12]
 8000744:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000748:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800074c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000750:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000754:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000758:	409f      	lsls	r7, r3
 800075a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800075e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000762:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000764:	688f      	ldr	r7, [r1, #8]
 8000766:	fa07 f70a 	lsl.w	r7, r7, sl
 800076a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800076c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076e:	00e5      	lsls	r5, r4, #3
 8000770:	d566      	bpl.n	8000840 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000776:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800077a:	f003 0e03 	and.w	lr, r3, #3
 800077e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000786:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800078a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000792:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000796:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800079a:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800079e:	9503      	str	r5, [sp, #12]
 80007a0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007a2:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007aa:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007ae:	4d32      	ldr	r5, [pc, #200]	; (8000878 <HAL_GPIO_Init+0x1c8>)
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d04c      	beq.n	800084e <HAL_GPIO_Init+0x19e>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d04a      	beq.n	8000852 <HAL_GPIO_Init+0x1a2>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d048      	beq.n	8000856 <HAL_GPIO_Init+0x1a6>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d046      	beq.n	800085a <HAL_GPIO_Init+0x1aa>
 80007cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d0:	42a8      	cmp	r0, r5
 80007d2:	d044      	beq.n	800085e <HAL_GPIO_Init+0x1ae>
 80007d4:	4548      	cmp	r0, r9
 80007d6:	d044      	beq.n	8000862 <HAL_GPIO_Init+0x1b2>
 80007d8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d042      	beq.n	8000866 <HAL_GPIO_Init+0x1b6>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d040      	beq.n	800086a <HAL_GPIO_Init+0x1ba>
 80007e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	d03e      	beq.n	800086e <HAL_GPIO_Init+0x1be>
 80007f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	bf14      	ite	ne
 80007f8:	250a      	movne	r5, #10
 80007fa:	2509      	moveq	r5, #9
 80007fc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000800:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000804:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000808:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800080a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800080e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf0c      	ite	eq
 8000812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000814:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000816:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800081a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800081c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf0c      	ite	eq
 8000820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000824:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000828:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800082a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800082c:	bf0c      	ite	eq
 800082e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000830:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000832:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000834:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000836:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000838:	bf54      	ite	pl
 800083a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800083c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800083e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000840:	3301      	adds	r3, #1
 8000842:	2b10      	cmp	r3, #16
 8000844:	f47f af3f 	bne.w	80006c6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000848:	b005      	add	sp, #20
 800084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800084e:	2500      	movs	r5, #0
 8000850:	e7d4      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000852:	2501      	movs	r5, #1
 8000854:	e7d2      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000856:	2502      	movs	r5, #2
 8000858:	e7d0      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800085a:	2503      	movs	r5, #3
 800085c:	e7ce      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800085e:	2504      	movs	r5, #4
 8000860:	e7cc      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000862:	2505      	movs	r5, #5
 8000864:	e7ca      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000866:	2506      	movs	r5, #6
 8000868:	e7c8      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800086a:	2507      	movs	r5, #7
 800086c:	e7c6      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 800086e:	2508      	movs	r5, #8
 8000870:	e7c4      	b.n	80007fc <HAL_GPIO_Init+0x14c>
 8000872:	bf00      	nop
 8000874:	40013c00 	.word	0x40013c00
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400

08000884 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000884:	b10a      	cbz	r2, 800088a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000886:	6181      	str	r1, [r0, #24]
 8000888:	4770      	bx	lr
 800088a:	0409      	lsls	r1, r1, #16
 800088c:	e7fb      	b.n	8000886 <HAL_GPIO_WritePin+0x2>

0800088e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	0791      	lsls	r1, r2, #30
 8000894:	d501      	bpl.n	800089a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	07d2      	lsls	r2, r2, #31
 800089e:	d403      	bmi.n	80008a8 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	619a      	str	r2, [r3, #24]
 80008a8:	4770      	bx	lr

080008aa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80008aa:	b530      	push	{r4, r5, lr}
 80008ac:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80008ae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80008b2:	6805      	ldr	r5, [r0, #0]
 80008b4:	4323      	orrs	r3, r4
 80008b6:	0d64      	lsrs	r4, r4, #21
 80008b8:	6868      	ldr	r0, [r5, #4]
 80008ba:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80008be:	4319      	orrs	r1, r3
 80008c0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80008c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80008c8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80008cc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80008d0:	f044 0403 	orr.w	r4, r4, #3
 80008d4:	ea20 0404 	bic.w	r4, r0, r4
 80008d8:	4321      	orrs	r1, r4
 80008da:	6069      	str	r1, [r5, #4]
 80008dc:	bd30      	pop	{r4, r5, pc}

080008de <I2C_WaitOnFlagUntilTimeout>:
{
 80008de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e2:	9f06      	ldr	r7, [sp, #24]
 80008e4:	4604      	mov	r4, r0
 80008e6:	4688      	mov	r8, r1
 80008e8:	4616      	mov	r6, r2
 80008ea:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008ec:	6822      	ldr	r2, [r4, #0]
 80008ee:	6993      	ldr	r3, [r2, #24]
 80008f0:	ea38 0303 	bics.w	r3, r8, r3
 80008f4:	bf0c      	ite	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	2300      	movne	r3, #0
 80008fa:	42b3      	cmp	r3, r6
 80008fc:	d002      	beq.n	8000904 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80008fe:	2000      	movs	r0, #0
}
 8000900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000904:	1c6b      	adds	r3, r5, #1
 8000906:	d0f2      	beq.n	80008ee <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000908:	f7ff fe5a 	bl	80005c0 <HAL_GetTick>
 800090c:	1bc0      	subs	r0, r0, r7
 800090e:	4285      	cmp	r5, r0
 8000910:	d301      	bcc.n	8000916 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000912:	2d00      	cmp	r5, #0
 8000914:	d1ea      	bne.n	80008ec <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000916:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000918:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800091a:	f043 0320 	orr.w	r3, r3, #32
 800091e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000920:	2320      	movs	r3, #32
 8000922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800092c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000934 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000934:	6803      	ldr	r3, [r0, #0]
{
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800093a:	6998      	ldr	r0, [r3, #24]
{
 800093c:	460d      	mov	r5, r1
 800093e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000940:	f010 0010 	ands.w	r0, r0, #16
 8000944:	d116      	bne.n	8000974 <I2C_IsAcknowledgeFailed+0x40>
 8000946:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000948:	1c69      	adds	r1, r5, #1
 800094a:	d014      	beq.n	8000976 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800094c:	f7ff fe38 	bl	80005c0 <HAL_GetTick>
 8000950:	1b80      	subs	r0, r0, r6
 8000952:	4285      	cmp	r5, r0
 8000954:	d300      	bcc.n	8000958 <I2C_IsAcknowledgeFailed+0x24>
 8000956:	b96d      	cbnz	r5, 8000974 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000960:	2320      	movs	r3, #32
 8000962:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000966:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800096a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800096e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8000972:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	6999      	ldr	r1, [r3, #24]
 8000978:	068a      	lsls	r2, r1, #26
 800097a:	d5e5      	bpl.n	8000948 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800097c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800097e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8000980:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000982:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000984:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000986:	f7ff ff82 	bl	800088e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	6853      	ldr	r3, [r2, #4]
 800098e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000992:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000996:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80009a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80009a8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80009ac:	e7db      	b.n	8000966 <I2C_IsAcknowledgeFailed+0x32>

080009ae <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80009ae:	b570      	push	{r4, r5, r6, lr}
 80009b0:	4604      	mov	r4, r0
 80009b2:	460d      	mov	r5, r1
 80009b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	079b      	lsls	r3, r3, #30
 80009bc:	d501      	bpl.n	80009c2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009c2:	4632      	mov	r2, r6
 80009c4:	4629      	mov	r1, r5
 80009c6:	4620      	mov	r0, r4
 80009c8:	f7ff ffb4 	bl	8000934 <I2C_IsAcknowledgeFailed>
 80009cc:	b9a0      	cbnz	r0, 80009f8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80009ce:	1c6a      	adds	r2, r5, #1
 80009d0:	d0f1      	beq.n	80009b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009d2:	f7ff fdf5 	bl	80005c0 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	4285      	cmp	r5, r0
 80009da:	d301      	bcc.n	80009e0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d1ea      	bne.n	80009b6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009e8:	2320      	movs	r3, #32
 80009ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
}
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4604      	mov	r4, r0
 8000a00:	460d      	mov	r5, r1
 8000a02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	069b      	lsls	r3, r3, #26
 8000a0a:	d501      	bpl.n	8000a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a10:	4632      	mov	r2, r6
 8000a12:	4629      	mov	r1, r5
 8000a14:	4620      	mov	r0, r4
 8000a16:	f7ff ff8d 	bl	8000934 <I2C_IsAcknowledgeFailed>
 8000a1a:	b990      	cbnz	r0, 8000a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a1c:	f7ff fdd0 	bl	80005c0 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	4285      	cmp	r5, r0
 8000a24:	d301      	bcc.n	8000a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d1ec      	bne.n	8000a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a2c:	f043 0320 	orr.w	r3, r3, #32
 8000a30:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a32:	2320      	movs	r3, #32
 8000a34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a42:	2001      	movs	r0, #1
}
 8000a44:	bd70      	pop	{r4, r5, r6, pc}

08000a46 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000a46:	b570      	push	{r4, r5, r6, lr}
 8000a48:	4604      	mov	r4, r0
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	075b      	lsls	r3, r3, #29
 8000a54:	d40e      	bmi.n	8000a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a56:	4632      	mov	r2, r6
 8000a58:	4629      	mov	r1, r5
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f7ff ff6a 	bl	8000934 <I2C_IsAcknowledgeFailed>
 8000a60:	b9f0      	cbnz	r0, 8000aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	699a      	ldr	r2, [r3, #24]
 8000a66:	0691      	lsls	r1, r2, #26
 8000a68:	d51c      	bpl.n	8000aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000a6a:	699a      	ldr	r2, [r3, #24]
 8000a6c:	0752      	lsls	r2, r2, #29
 8000a6e:	d503      	bpl.n	8000a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000a70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a72:	b10a      	cbz	r2, 8000a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000a74:	2000      	movs	r0, #0
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a78:	2120      	movs	r1, #32
 8000a7a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000a82:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000a86:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000a94:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000aa0:	2001      	movs	r0, #1
}
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000aa4:	f7ff fd8c 	bl	80005c0 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	4285      	cmp	r5, r0
 8000aac:	d301      	bcc.n	8000ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d1cd      	bne.n	8000a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000aba:	2320      	movs	r3, #32
 8000abc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e7eb      	b.n	8000a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000ac4 <HAL_I2C_Init>:
{
 8000ac4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d04a      	beq.n	8000b62 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000acc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ad0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ad4:	b91b      	cbnz	r3, 8000ade <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000ad6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ada:	f001 f901 	bl	8001ce0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ade:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ae0:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ae6:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000af2:	6862      	ldr	r2, [r4, #4]
 8000af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000af8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000afa:	689a      	ldr	r2, [r3, #8]
 8000afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b04:	d124      	bne.n	8000b50 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b0a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b0c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b10:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000b12:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b24:	6922      	ldr	r2, [r4, #16]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	69a1      	ldr	r1, [r4, #24]
 8000b2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b2e:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000b30:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b32:	69e2      	ldr	r2, [r4, #28]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b40:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b42:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b48:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b4a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000b4e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b50:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b54:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b56:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b58:	d1d8      	bne.n	8000b0c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	e7d4      	b.n	8000b0c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
}
 8000b64:	bd10      	pop	{r4, pc}
	...

08000b68 <HAL_I2C_Master_Transmit>:
{
 8000b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b6c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000b72:	4604      	mov	r4, r0
 8000b74:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b76:	2b20      	cmp	r3, #32
{
 8000b78:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b7a:	f040 8084 	bne.w	8000c86 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000b7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d07f      	beq.n	8000c86 <HAL_I2C_Master_Transmit+0x11e>
 8000b86:	2701      	movs	r7, #1
 8000b88:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000b8c:	f7ff fd18 	bl	80005c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b90:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000b92:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b94:	9000      	str	r0, [sp, #0]
 8000b96:	463a      	mov	r2, r7
 8000b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fe9e 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000ba2:	b118      	cbz	r0, 8000bac <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
}
 8000ba6:	b003      	add	sp, #12
 8000ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000bac:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8000bae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000bb2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000bb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bbe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000bc0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_I2C_Master_Transmit+0x124>)
 8000bcc:	d926      	bls.n	8000c1c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bce:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000bd0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bd2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bd8:	4631      	mov	r1, r6
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f7ff fe65 	bl	80008aa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000be2:	462a      	mov	r2, r5
 8000be4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000be6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b9fb      	cbnz	r3, 8000c2c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bec:	f7ff ff06 	bl	80009fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d1d7      	bne.n	8000ba4 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000c00:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000c04:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000c08:	f022 0201 	bic.w	r2, r2, #1
 8000c0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c0e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c12:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c16:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000c1a:	e7c4      	b.n	8000ba6 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000c1c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000c1e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000c20:	b292      	uxth	r2, r2
 8000c22:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	e7d5      	b.n	8000bd8 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c2c:	f7ff febf 	bl	80009ae <I2C_WaitOnTXISFlagUntilTimeout>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1b7      	bne.n	8000ba4 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c36:	6822      	ldr	r2, [r4, #0]
 8000c38:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000c3c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c3e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000c44:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000c46:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000c48:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000c4a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000c4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c50:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0c3      	beq.n	8000be0 <HAL_I2C_Master_Transmit+0x78>
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d1c1      	bne.n	8000be0 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c5c:	9500      	str	r5, [sp, #0]
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c62:	4620      	mov	r0, r4
 8000c64:	f7ff fe3b 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d19b      	bne.n	8000ba4 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d903      	bls.n	8000c7c <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c74:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c76:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c78:	8522      	strh	r2, [r4, #40]	; 0x28
 8000c7a:	e7ab      	b.n	8000bd4 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000c7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c7e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000c80:	b292      	uxth	r2, r2
 8000c82:	8522      	strh	r2, [r4, #40]	; 0x28
 8000c84:	e7ce      	b.n	8000c24 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000c86:	2002      	movs	r0, #2
 8000c88:	e78d      	b.n	8000ba6 <HAL_I2C_Master_Transmit+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	80002000 	.word	0x80002000

08000c90 <HAL_I2C_Master_Receive>:
{
 8000c90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c94:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	460e      	mov	r6, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9e:	2b20      	cmp	r3, #32
{
 8000ca0:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ca2:	f040 8086 	bne.w	8000db2 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8000ca6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	f000 8081 	beq.w	8000db2 <HAL_I2C_Master_Receive+0x122>
 8000cb0:	2701      	movs	r7, #1
 8000cb2:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000cb6:	f7ff fc83 	bl	80005c0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cba:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000cbc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cbe:	9000      	str	r0, [sp, #0]
 8000cc0:	463a      	mov	r2, r7
 8000cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff fe09 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000ccc:	b118      	cbz	r0, 8000cd6 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
}
 8000cd0:	b003      	add	sp, #12
 8000cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000cd6:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 8000cd8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000cdc:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000cde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000cea:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_I2C_Master_Receive+0x128>)
 8000cf6:	d926      	bls.n	8000d46 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cf8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000cfa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cfc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d02:	4631      	mov	r1, r6
 8000d04:	4620      	mov	r0, r4
 8000d06:	f7ff fdd0 	bl	80008aa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d0c:	462a      	mov	r2, r5
 8000d0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d10:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b9fb      	cbnz	r3, 8000d56 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d16:	f7ff fe71 	bl	80009fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d1d7      	bne.n	8000cce <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	2120      	movs	r1, #32
 8000d22:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d2a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d2e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d38:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d40:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000d44:	e7c4      	b.n	8000cd0 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8000d46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000d48:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	e7d5      	b.n	8000d02 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d56:	f7ff fe76 	bl	8000a46 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d1b7      	bne.n	8000cce <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d5e:	6822      	ldr	r2, [r4, #0]
 8000d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d64:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000d68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d6a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8000d6c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8000d6e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d72:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000d74:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000d76:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0c2      	beq.n	8000d0a <HAL_I2C_Master_Receive+0x7a>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d1c0      	bne.n	8000d0a <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d88:	9500      	str	r5, [sp, #0]
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f7ff fda5 	bl	80008de <I2C_WaitOnFlagUntilTimeout>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d19a      	bne.n	8000cce <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d903      	bls.n	8000da8 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000da0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000da2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000da4:	8522      	strh	r2, [r4, #40]	; 0x28
 8000da6:	e7aa      	b.n	8000cfe <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8000da8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000daa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000dac:	b292      	uxth	r2, r2
 8000dae:	8522      	strh	r2, [r4, #40]	; 0x28
 8000db0:	e7cd      	b.n	8000d4e <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8000db2:	2002      	movs	r0, #2
 8000db4:	e78c      	b.n	8000cd0 <HAL_I2C_Master_Receive+0x40>
 8000db6:	bf00      	nop
 8000db8:	80002400 	.word	0x80002400

08000dbc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	2a20      	cmp	r2, #32
{
 8000dc4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dc6:	d11d      	bne.n	8000e04 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d019      	beq.n	8000e04 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd0:	2324      	movs	r3, #36	; 0x24
 8000dd2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dd6:	6803      	ldr	r3, [r0, #0]
 8000dd8:	681c      	ldr	r4, [r3, #0]
 8000dda:	f024 0401 	bic.w	r4, r4, #1
 8000dde:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000de0:	681c      	ldr	r4, [r3, #0]
 8000de2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000de6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000de8:	681c      	ldr	r4, [r3, #0]
 8000dea:	4321      	orrs	r1, r4
 8000dec:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	f041 0101 	orr.w	r1, r1, #1
 8000df4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000df6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000df8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000dfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e04:	2002      	movs	r0, #2
  }
}
 8000e06:	bd10      	pop	{r4, pc}

08000e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e08:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e0a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000e0e:	b2e4      	uxtb	r4, r4
 8000e10:	2c20      	cmp	r4, #32
 8000e12:	d11c      	bne.n	8000e4e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d018      	beq.n	8000e4e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e1c:	2324      	movs	r3, #36	; 0x24
 8000e1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e22:	6803      	ldr	r3, [r0, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e2c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e2e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e32:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e36:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e40:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e42:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e4e:	2002      	movs	r0, #2
  }
}
 8000e50:	bd10      	pop	{r4, pc}
	...

08000e54 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000e56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e5a:	4c19      	ldr	r4, [pc, #100]	; (8000ec0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e74:	f7ff fba4 	bl	80005c0 <HAL_GetTick>
 8000e78:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e7a:	6863      	ldr	r3, [r4, #4]
 8000e7c:	03da      	lsls	r2, r3, #15
 8000e7e:	d50c      	bpl.n	8000e9a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e86:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e88:	f7ff fb9a 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e8c:	4c0c      	ldr	r4, [pc, #48]	; (8000ec0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000e8e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e90:	6863      	ldr	r3, [r4, #4]
 8000e92:	039b      	lsls	r3, r3, #14
 8000e94:	d50a      	bpl.n	8000eac <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
 8000e98:	e006      	b.n	8000ea8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e9a:	f7ff fb91 	bl	80005c0 <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ea4:	d9e9      	bls.n	8000e7a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
}
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eac:	f7ff fb88 	bl	80005c0 <HAL_GetTick>
 8000eb0:	1b40      	subs	r0, r0, r5
 8000eb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000eb6:	d9eb      	bls.n	8000e90 <HAL_PWREx_EnableOverDrive+0x3c>
 8000eb8:	e7f5      	b.n	8000ea6 <HAL_PWREx_EnableOverDrive+0x52>
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec8:	4604      	mov	r4, r0
 8000eca:	b918      	cbnz	r0, 8000ed4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000ece:	b002      	add	sp, #8
 8000ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	07d8      	lsls	r0, r3, #31
 8000ed8:	d410      	bmi.n	8000efc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	0799      	lsls	r1, r3, #30
 8000ede:	d45e      	bmi.n	8000f9e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	0719      	lsls	r1, r3, #28
 8000ee4:	f100 80a3 	bmi.w	800102e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	075a      	lsls	r2, r3, #29
 8000eec:	f100 80c4 	bmi.w	8001078 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ef0:	69a2      	ldr	r2, [r4, #24]
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	f040 812e 	bne.w	8001154 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000ef8:	2000      	movs	r0, #0
 8000efa:	e7e8      	b.n	8000ece <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efc:	4b93      	ldr	r3, [pc, #588]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	f002 020c 	and.w	r2, r2, #12
 8000f04:	2a04      	cmp	r2, #4
 8000f06:	d007      	beq.n	8000f18 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	f002 020c 	and.w	r2, r2, #12
 8000f0e:	2a08      	cmp	r2, #8
 8000f10:	d10a      	bne.n	8000f28 <HAL_RCC_OscConfig+0x64>
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	025a      	lsls	r2, r3, #9
 8000f16:	d507      	bpl.n	8000f28 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f18:	4b8c      	ldr	r3, [pc, #560]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	039b      	lsls	r3, r3, #14
 8000f1e:	d5dc      	bpl.n	8000eda <HAL_RCC_OscConfig+0x16>
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1d9      	bne.n	8000eda <HAL_RCC_OscConfig+0x16>
 8000f26:	e7d1      	b.n	8000ecc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	4d88      	ldr	r5, [pc, #544]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d111      	bne.n	8000f56 <HAL_RCC_OscConfig+0x92>
 8000f32:	682b      	ldr	r3, [r5, #0]
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fb41 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4d83      	ldr	r5, [pc, #524]	; (800114c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000f40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	682b      	ldr	r3, [r5, #0]
 8000f44:	039f      	lsls	r7, r3, #14
 8000f46:	d4c8      	bmi.n	8000eda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fb3a 	bl	80005c0 <HAL_GetTick>
 8000f4c:	1b80      	subs	r0, r0, r6
 8000f4e:	2864      	cmp	r0, #100	; 0x64
 8000f50:	d9f7      	bls.n	8000f42 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000f52:	2003      	movs	r0, #3
 8000f54:	e7bb      	b.n	8000ece <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	b99b      	cbnz	r3, 8000f80 <HAL_RCC_OscConfig+0xbc>
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	602b      	str	r3, [r5, #0]
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb2a 	bl	80005c0 <HAL_GetTick>
 8000f6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	682b      	ldr	r3, [r5, #0]
 8000f70:	0398      	lsls	r0, r3, #14
 8000f72:	d5b2      	bpl.n	8000eda <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fb24 	bl	80005c0 <HAL_GetTick>
 8000f78:	1b80      	subs	r0, r0, r6
 8000f7a:	2864      	cmp	r0, #100	; 0x64
 8000f7c:	d9f7      	bls.n	8000f6e <HAL_RCC_OscConfig+0xaa>
 8000f7e:	e7e8      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	d103      	bne.n	8000f90 <HAL_RCC_OscConfig+0xcc>
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	e7d0      	b.n	8000f32 <HAL_RCC_OscConfig+0x6e>
 8000f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f94:	602b      	str	r3, [r5, #0]
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9c:	e7cc      	b.n	8000f38 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f9e:	4b6b      	ldr	r3, [pc, #428]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	f012 0f0c 	tst.w	r2, #12
 8000fa6:	d007      	beq.n	8000fb8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	f002 020c 	and.w	r2, r2, #12
 8000fae:	2a08      	cmp	r2, #8
 8000fb0:	d111      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x112>
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	0259      	lsls	r1, r3, #9
 8000fb6:	d40e      	bmi.n	8000fd6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb8:	4b64      	ldr	r3, [pc, #400]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	0792      	lsls	r2, r2, #30
 8000fbe:	d502      	bpl.n	8000fc6 <HAL_RCC_OscConfig+0x102>
 8000fc0:	68e2      	ldr	r2, [r4, #12]
 8000fc2:	2a01      	cmp	r2, #1
 8000fc4:	d182      	bne.n	8000ecc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	6921      	ldr	r1, [r4, #16]
 8000fca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000fce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000fd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd4:	e784      	b.n	8000ee0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd6:	68e3      	ldr	r3, [r4, #12]
 8000fd8:	4d5c      	ldr	r5, [pc, #368]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8000fda:	b1bb      	cbz	r3, 800100c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fe4:	f7ff faec 	bl	80005c0 <HAL_GetTick>
 8000fe8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	079f      	lsls	r7, r3, #30
 8000fee:	d507      	bpl.n	8001000 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	6922      	ldr	r2, [r4, #16]
 8000ff4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ff8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ffc:	602b      	str	r3, [r5, #0]
 8000ffe:	e76f      	b.n	8000ee0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fade 	bl	80005c0 <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	2802      	cmp	r0, #2
 8001008:	d9ef      	bls.n	8000fea <HAL_RCC_OscConfig+0x126>
 800100a:	e7a2      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001014:	f7ff fad4 	bl	80005c0 <HAL_GetTick>
 8001018:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	0798      	lsls	r0, r3, #30
 800101e:	f57f af5f 	bpl.w	8000ee0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff facd 	bl	80005c0 <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2802      	cmp	r0, #2
 800102a:	d9f6      	bls.n	800101a <HAL_RCC_OscConfig+0x156>
 800102c:	e791      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800102e:	6963      	ldr	r3, [r4, #20]
 8001030:	4d46      	ldr	r5, [pc, #280]	; (800114c <HAL_RCC_OscConfig+0x288>)
 8001032:	b183      	cbz	r3, 8001056 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001034:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800103c:	f7ff fac0 	bl	80005c0 <HAL_GetTick>
 8001040:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001044:	079b      	lsls	r3, r3, #30
 8001046:	f53f af4f 	bmi.w	8000ee8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fab9 	bl	80005c0 <HAL_GetTick>
 800104e:	1b80      	subs	r0, r0, r6
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f6      	bls.n	8001042 <HAL_RCC_OscConfig+0x17e>
 8001054:	e77d      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001056:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800105e:	f7ff faaf 	bl	80005c0 <HAL_GetTick>
 8001062:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001064:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001066:	079f      	lsls	r7, r3, #30
 8001068:	f57f af3e 	bpl.w	8000ee8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff faa8 	bl	80005c0 <HAL_GetTick>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	2802      	cmp	r0, #2
 8001074:	d9f6      	bls.n	8001064 <HAL_RCC_OscConfig+0x1a0>
 8001076:	e76c      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <HAL_RCC_OscConfig+0x288>)
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	00d0      	lsls	r0, r2, #3
 800107e:	d427      	bmi.n	80010d0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001082:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	4d2e      	ldr	r5, [pc, #184]	; (8001150 <HAL_RCC_OscConfig+0x28c>)
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	05d9      	lsls	r1, r3, #23
 800109a:	d51b      	bpl.n	80010d4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109c:	68a3      	ldr	r3, [r4, #8]
 800109e:	4d2b      	ldr	r5, [pc, #172]	; (800114c <HAL_RCC_OscConfig+0x288>)
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d127      	bne.n	80010f4 <HAL_RCC_OscConfig+0x230>
 80010a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010b0:	f7ff fa86 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b4:	4f25      	ldr	r7, [pc, #148]	; (800114c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80010b6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ba:	079b      	lsls	r3, r3, #30
 80010bc:	d53f      	bpl.n	800113e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80010be:	2e00      	cmp	r6, #0
 80010c0:	f43f af16 	beq.w	8000ef0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <HAL_RCC_OscConfig+0x288>)
 80010c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	e70f      	b.n	8000ef0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80010d0:	2600      	movs	r6, #0
 80010d2:	e7df      	b.n	8001094 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010dc:	f7ff fa70 	bl	80005c0 <HAL_GetTick>
 80010e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	05da      	lsls	r2, r3, #23
 80010e6:	d4d9      	bmi.n	800109c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80010e8:	f7ff fa6a 	bl	80005c0 <HAL_GetTick>
 80010ec:	1bc0      	subs	r0, r0, r7
 80010ee:	2864      	cmp	r0, #100	; 0x64
 80010f0:	d9f7      	bls.n	80010e2 <HAL_RCC_OscConfig+0x21e>
 80010f2:	e72e      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f4:	b9ab      	cbnz	r3, 8001122 <HAL_RCC_OscConfig+0x25e>
 80010f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	672b      	str	r3, [r5, #112]	; 0x70
 8001102:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800110a:	f7ff fa59 	bl	80005c0 <HAL_GetTick>
 800110e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001112:	0798      	lsls	r0, r3, #30
 8001114:	d5d3      	bpl.n	80010be <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fa53 	bl	80005c0 <HAL_GetTick>
 800111a:	1bc0      	subs	r0, r0, r7
 800111c:	4540      	cmp	r0, r8
 800111e:	d9f7      	bls.n	8001110 <HAL_RCC_OscConfig+0x24c>
 8001120:	e717      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001122:	2b05      	cmp	r3, #5
 8001124:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001126:	d103      	bne.n	8001130 <HAL_RCC_OscConfig+0x26c>
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	672b      	str	r3, [r5, #112]	; 0x70
 800112e:	e7b9      	b.n	80010a4 <HAL_RCC_OscConfig+0x1e0>
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	672b      	str	r3, [r5, #112]	; 0x70
 8001136:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	e7b5      	b.n	80010aa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fa3f 	bl	80005c0 <HAL_GetTick>
 8001142:	eba0 0008 	sub.w	r0, r0, r8
 8001146:	42a8      	cmp	r0, r5
 8001148:	d9b6      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1f4>
 800114a:	e702      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001154:	4d24      	ldr	r5, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
 8001156:	68ab      	ldr	r3, [r5, #8]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	f43f aeb5 	beq.w	8000ecc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001162:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001164:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800116a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800116c:	d12f      	bne.n	80011ce <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 800116e:	f7ff fa27 	bl	80005c0 <HAL_GetTick>
 8001172:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	0199      	lsls	r1, r3, #6
 8001178:	d423      	bmi.n	80011c2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800117a:	6a22      	ldr	r2, [r4, #32]
 800117c:	69e3      	ldr	r3, [r4, #28]
 800117e:	4313      	orrs	r3, r2
 8001180:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001182:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001188:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800118c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800118e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001192:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001194:	4c14      	ldr	r4, [pc, #80]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001196:	0852      	lsrs	r2, r2, #1
 8001198:	3a01      	subs	r2, #1
 800119a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800119e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011a8:	f7ff fa0a 	bl	80005c0 <HAL_GetTick>
 80011ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	019a      	lsls	r2, r3, #6
 80011b2:	f53f aea1 	bmi.w	8000ef8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b6:	f7ff fa03 	bl	80005c0 <HAL_GetTick>
 80011ba:	1b40      	subs	r0, r0, r5
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9f6      	bls.n	80011ae <HAL_RCC_OscConfig+0x2ea>
 80011c0:	e6c7      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff f9fd 	bl	80005c0 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9d3      	bls.n	8001174 <HAL_RCC_OscConfig+0x2b0>
 80011cc:	e6c1      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80011ce:	f7ff f9f7 	bl	80005c0 <HAL_GetTick>
 80011d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	019b      	lsls	r3, r3, #6
 80011d8:	f57f ae8e 	bpl.w	8000ef8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff f9f0 	bl	80005c0 <HAL_GetTick>
 80011e0:	1b00      	subs	r0, r0, r4
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d9f6      	bls.n	80011d4 <HAL_RCC_OscConfig+0x310>
 80011e6:	e6b4      	b.n	8000f52 <HAL_RCC_OscConfig+0x8e>
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ec:	4913      	ldr	r1, [pc, #76]	; (800123c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f0:	688b      	ldr	r3, [r1, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_GetSysClockFreq+0x16>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001200:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001202:	4810      	ldr	r0, [pc, #64]	; (8001244 <HAL_RCC_GetSysClockFreq+0x58>)
 8001204:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001206:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001208:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001210:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001214:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001218:	bf1a      	itte	ne
 800121a:	480a      	ldrne	r0, [pc, #40]	; (8001244 <HAL_RCC_GetSysClockFreq+0x58>)
 800121c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121e:	4808      	ldreq	r0, [pc, #32]	; (8001240 <HAL_RCC_GetSysClockFreq+0x54>)
 8001220:	fba1 0100 	umull	r0, r1, r1, r0
 8001224:	f7ff f808 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RCC_GetSysClockFreq+0x50>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001230:	3301      	adds	r3, #1
 8001232:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001234:	fbb0 f0f3 	udiv	r0, r0, r3
 8001238:	bd08      	pop	{r3, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	00f42400 	.word	0x00f42400
 8001244:	007a1200 	.word	0x007a1200

08001248 <HAL_RCC_ClockConfig>:
{
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800124e:	4604      	mov	r4, r0
 8001250:	b910      	cbnz	r0, 8001258 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
 8001254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001258:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_RCC_ClockConfig+0x12c>)
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	428b      	cmp	r3, r1
 8001262:	d328      	bcc.n	80012b6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001264:	6821      	ldr	r1, [r4, #0]
 8001266:	078f      	lsls	r7, r1, #30
 8001268:	d430      	bmi.n	80012cc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126a:	07c8      	lsls	r0, r1, #31
 800126c:	d443      	bmi.n	80012f6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800126e:	4a41      	ldr	r2, [pc, #260]	; (8001374 <HAL_RCC_ClockConfig+0x12c>)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	429d      	cmp	r5, r3
 8001278:	d367      	bcc.n	800134a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	0751      	lsls	r1, r2, #29
 800127e:	d470      	bmi.n	8001362 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	0713      	lsls	r3, r2, #28
 8001282:	d507      	bpl.n	8001294 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001284:	4a3c      	ldr	r2, [pc, #240]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
 8001286:	6921      	ldr	r1, [r4, #16]
 8001288:	6893      	ldr	r3, [r2, #8]
 800128a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800128e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001292:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001294:	f7ff ffaa 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
 800129a:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_RCC_ClockConfig+0x134>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012a2:	5cd3      	ldrb	r3, [r2, r3]
 80012a4:	40d8      	lsrs	r0, r3
 80012a6:	4b36      	ldr	r3, [pc, #216]	; (8001380 <HAL_RCC_ClockConfig+0x138>)
 80012a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff f94c 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 80012b0:	2000      	movs	r0, #0
 80012b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f023 030f 	bic.w	r3, r3, #15
 80012bc:	430b      	orrs	r3, r1
 80012be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4299      	cmp	r1, r3
 80012c8:	d1c3      	bne.n	8001252 <HAL_RCC_ClockConfig+0xa>
 80012ca:	e7cb      	b.n	8001264 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	f011 0f04 	tst.w	r1, #4
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
 80012d2:	d003      	beq.n	80012dc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80012da:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012dc:	070e      	lsls	r6, r1, #28
 80012de:	d503      	bpl.n	80012e8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80012e6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	68a0      	ldr	r0, [r4, #8]
 80012ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012f0:	4302      	orrs	r2, r0
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	e7b9      	b.n	800126a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	6861      	ldr	r1, [r4, #4]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
 80012fa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	d11c      	bne.n	800133a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001300:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	d0a5      	beq.n	8001252 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001306:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130c:	4e1a      	ldr	r6, [pc, #104]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	f022 0203 	bic.w	r2, r2, #3
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001316:	f7ff f953 	bl	80005c0 <HAL_GetTick>
 800131a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131c:	68b3      	ldr	r3, [r6, #8]
 800131e:	6862      	ldr	r2, [r4, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001328:	d0a1      	beq.n	800126e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132a:	f7ff f949 	bl	80005c0 <HAL_GetTick>
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	4540      	cmp	r0, r8
 8001332:	d9f3      	bls.n	800131c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
}
 8001336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800133a:	2902      	cmp	r1, #2
 800133c:	d102      	bne.n	8001344 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001342:	e7df      	b.n	8001304 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	f012 0f02 	tst.w	r2, #2
 8001348:	e7dc      	b.n	8001304 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f023 030f 	bic.w	r3, r3, #15
 8001350:	432b      	orrs	r3, r5
 8001352:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001354:	6813      	ldr	r3, [r2, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	429d      	cmp	r5, r3
 800135c:	f47f af79 	bne.w	8001252 <HAL_RCC_ClockConfig+0xa>
 8001360:	e78b      	b.n	800127a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001362:	4905      	ldr	r1, [pc, #20]	; (8001378 <HAL_RCC_ClockConfig+0x130>)
 8001364:	68e0      	ldr	r0, [r4, #12]
 8001366:	688b      	ldr	r3, [r1, #8]
 8001368:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800136c:	4303      	orrs	r3, r0
 800136e:	608b      	str	r3, [r1, #8]
 8001370:	e786      	b.n	8001280 <HAL_RCC_ClockConfig+0x38>
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00
 8001378:	40023800 	.word	0x40023800
 800137c:	080034a1 	.word	0x080034a1
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001388:	6802      	ldr	r2, [r0, #0]
{
 800138a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800138c:	f012 0601 	ands.w	r6, r2, #1
 8001390:	d00b      	beq.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001392:	4bba      	ldr	r3, [pc, #744]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800139a:	6099      	str	r1, [r3, #8]
 800139c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800139e:	6899      	ldr	r1, [r3, #8]
 80013a0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80013a2:	fab6 f686 	clz	r6, r6
 80013a6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80013a8:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013aa:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80013ae:	d012      	beq.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013b0:	49b2      	ldr	r1, [pc, #712]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013b2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80013b4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80013b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80013c0:	bf08      	it	eq
 80013c2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013c4:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013c8:	bf16      	itet	ne
 80013ca:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80013ce:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013d0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80013d6:	02d7      	lsls	r7, r2, #11
 80013d8:	d510      	bpl.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013da:	48a8      	ldr	r0, [pc, #672]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80013dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013de:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013e2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013ea:	ea43 0301 	orr.w	r3, r3, r1
 80013ee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80013f2:	f000 81a9 	beq.w	8001748 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80013f6:	2900      	cmp	r1, #0
 80013f8:	bf08      	it	eq
 80013fa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80013fc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001400:	bf18      	it	ne
 8001402:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001404:	0690      	lsls	r0, r2, #26
 8001406:	d531      	bpl.n	800146c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	4b9c      	ldr	r3, [pc, #624]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800140a:	4f9d      	ldr	r7, [pc, #628]	; (8001680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800140c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001426:	f7ff f8cb 	bl	80005c0 <HAL_GetTick>
 800142a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	05d9      	lsls	r1, r3, #23
 8001430:	f140 818c 	bpl.w	800174c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001434:	4f91      	ldr	r7, [pc, #580]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001436:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001438:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800143c:	f040 8191 	bne.w	8001762 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001442:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001446:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800144a:	4a8c      	ldr	r2, [pc, #560]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800144c:	f040 81af 	bne.w	80017ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001450:	6891      	ldr	r1, [r2, #8]
 8001452:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001456:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800145a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800145e:	4301      	orrs	r1, r0
 8001460:	6091      	str	r1, [r2, #8]
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001468:	430b      	orrs	r3, r1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	06df      	lsls	r7, r3, #27
 8001470:	d50c      	bpl.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001472:	4a82      	ldr	r2, [pc, #520]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001474:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001478:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800147c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001480:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001484:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001486:	4301      	orrs	r1, r0
 8001488:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800148c:	0458      	lsls	r0, r3, #17
 800148e:	d508      	bpl.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001490:	497a      	ldr	r1, [pc, #488]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001492:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001494:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001498:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800149c:	4302      	orrs	r2, r0
 800149e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80014a2:	0419      	lsls	r1, r3, #16
 80014a4:	d508      	bpl.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80014a6:	4975      	ldr	r1, [pc, #468]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80014aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014ae:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80014b2:	4302      	orrs	r2, r0
 80014b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80014b8:	03da      	lsls	r2, r3, #15
 80014ba:	d508      	bpl.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80014bc:	496f      	ldr	r1, [pc, #444]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014c4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014c8:	4302      	orrs	r2, r0
 80014ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80014ce:	039f      	lsls	r7, r3, #14
 80014d0:	d508      	bpl.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80014d2:	496a      	ldr	r1, [pc, #424]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80014d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80014de:	4302      	orrs	r2, r0
 80014e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014e4:	0658      	lsls	r0, r3, #25
 80014e6:	d508      	bpl.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014e8:	4964      	ldr	r1, [pc, #400]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80014ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014f0:	f022 0203 	bic.w	r2, r2, #3
 80014f4:	4302      	orrs	r2, r0
 80014f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80014fa:	0619      	lsls	r1, r3, #24
 80014fc:	d508      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80014fe:	495f      	ldr	r1, [pc, #380]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001500:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001502:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001506:	f022 020c 	bic.w	r2, r2, #12
 800150a:	4302      	orrs	r2, r0
 800150c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001510:	05da      	lsls	r2, r3, #23
 8001512:	d508      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001514:	4959      	ldr	r1, [pc, #356]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001516:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001518:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800151c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001520:	4302      	orrs	r2, r0
 8001522:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001526:	059f      	lsls	r7, r3, #22
 8001528:	d508      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800152a:	4954      	ldr	r1, [pc, #336]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800152c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800152e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001532:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001536:	4302      	orrs	r2, r0
 8001538:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800153c:	0558      	lsls	r0, r3, #21
 800153e:	d508      	bpl.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001540:	494e      	ldr	r1, [pc, #312]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001542:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001544:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001548:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800154c:	4302      	orrs	r2, r0
 800154e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001552:	0519      	lsls	r1, r3, #20
 8001554:	d508      	bpl.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001556:	4949      	ldr	r1, [pc, #292]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800155a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800155e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001562:	4302      	orrs	r2, r0
 8001564:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001568:	04da      	lsls	r2, r3, #19
 800156a:	d508      	bpl.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800156c:	4943      	ldr	r1, [pc, #268]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800156e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001570:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001574:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001578:	4302      	orrs	r2, r0
 800157a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800157e:	049f      	lsls	r7, r3, #18
 8001580:	d508      	bpl.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001582:	493e      	ldr	r1, [pc, #248]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001584:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001586:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800158a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800158e:	4302      	orrs	r2, r0
 8001590:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001594:	0258      	lsls	r0, r3, #9
 8001596:	d508      	bpl.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001598:	4938      	ldr	r1, [pc, #224]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800159a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800159c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80015a4:	4302      	orrs	r2, r0
 80015a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80015aa:	0299      	lsls	r1, r3, #10
 80015ac:	d50c      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015ae:	4833      	ldr	r0, [pc, #204]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015b0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80015b2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80015b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015ba:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80015be:	bf08      	it	eq
 80015c0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80015c2:	430a      	orrs	r2, r1
 80015c4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80015c8:	f013 0f08 	tst.w	r3, #8
 80015cc:	bf18      	it	ne
 80015ce:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80015d0:	035a      	lsls	r2, r3, #13
 80015d2:	d508      	bpl.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015d4:	4929      	ldr	r1, [pc, #164]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015d6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80015d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e0:	4302      	orrs	r2, r0
 80015e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80015e6:	021f      	lsls	r7, r3, #8
 80015e8:	d509      	bpl.n	80015fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80015ea:	4924      	ldr	r1, [pc, #144]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80015f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80015f8:	4302      	orrs	r2, r0
 80015fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80015fe:	0158      	lsls	r0, r3, #5
 8001600:	d509      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001602:	491e      	ldr	r1, [pc, #120]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001604:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001608:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800160c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001610:	4302      	orrs	r2, r0
 8001612:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001616:	0119      	lsls	r1, r3, #4
 8001618:	d509      	bpl.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800161c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001620:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001624:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001628:	4302      	orrs	r2, r0
 800162a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800162e:	00da      	lsls	r2, r3, #3
 8001630:	d509      	bpl.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001632:	4912      	ldr	r1, [pc, #72]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001634:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001638:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800163c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001640:	4302      	orrs	r2, r0
 8001642:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001646:	2e01      	cmp	r6, #1
 8001648:	f000 80b5 	beq.w	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800164c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001650:	f000 80b1 	beq.w	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001654:	2d01      	cmp	r5, #1
 8001656:	d175      	bne.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001658:	4d08      	ldr	r5, [pc, #32]	; (800167c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001660:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001662:	f7fe ffad 	bl	80005c0 <HAL_GetTick>
 8001666:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	009f      	lsls	r7, r3, #2
 800166c:	f100 8127 	bmi.w	80018be <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001670:	6821      	ldr	r1, [r4, #0]
 8001672:	030e      	lsls	r6, r1, #12
 8001674:	d506      	bpl.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001678:	b143      	cbz	r3, 800168c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800167a:	e003      	b.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000
 8001684:	02cd      	lsls	r5, r1, #11
 8001686:	d51d      	bpl.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800168a:	b9db      	cbnz	r3, 80016c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800168c:	4a93      	ldr	r2, [pc, #588]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800168e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001692:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800169e:	4303      	orrs	r3, r0
 80016a0:	6960      	ldr	r0, [r4, #20]
 80016a2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016a6:	69a0      	ldr	r0, [r4, #24]
 80016a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80016b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80016b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80016ba:	3801      	subs	r0, #1
 80016bc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80016c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80016c4:	0288      	lsls	r0, r1, #10
 80016c6:	d515      	bpl.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 80016c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80016ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016ce:	d111      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80016d0:	4a82      	ldr	r2, [pc, #520]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80016d6:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80016da:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016de:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016e2:	4303      	orrs	r3, r0
 80016e4:	6960      	ldr	r0, [r4, #20]
 80016e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016ea:	6a20      	ldr	r0, [r4, #32]
 80016ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80016f4:	070a      	lsls	r2, r1, #28
 80016f6:	d519      	bpl.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80016f8:	4978      	ldr	r1, [pc, #480]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80016fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001702:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170a:	4313      	orrs	r3, r2
 800170c:	6962      	ldr	r2, [r4, #20]
 800170e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001712:	69e2      	ldr	r2, [r4, #28]
 8001714:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800171c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001720:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001722:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800172c:	4c6b      	ldr	r4, [pc, #428]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001736:	f7fe ff43 	bl	80005c0 <HAL_GetTick>
 800173a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	f140 80c4 	bpl.w	80018cc <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001744:	2000      	movs	r0, #0
 8001746:	e009      	b.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001748:	2601      	movs	r6, #1
 800174a:	e657      	b.n	80013fc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7fe ff38 	bl	80005c0 <HAL_GetTick>
 8001750:	eba0 0008 	sub.w	r0, r0, r8
 8001754:	2864      	cmp	r0, #100	; 0x64
 8001756:	f67f ae69 	bls.w	800142c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800175a:	2003      	movs	r0, #3
}
 800175c:	b003      	add	sp, #12
 800175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001762:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001764:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001768:	4293      	cmp	r3, r2
 800176a:	f43f ae69 	beq.w	8001440 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800176e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001770:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001776:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800177a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800177c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800177e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001782:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001784:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001788:	07da      	lsls	r2, r3, #31
 800178a:	f57f ae59 	bpl.w	8001440 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800178e:	f7fe ff17 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001796:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800179a:	079b      	lsls	r3, r3, #30
 800179c:	f53f ae50 	bmi.w	8001440 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7fe ff0e 	bl	80005c0 <HAL_GetTick>
 80017a4:	eba0 0008 	sub.w	r0, r0, r8
 80017a8:	4548      	cmp	r0, r9
 80017aa:	d9f5      	bls.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80017ac:	e7d5      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ae:	6891      	ldr	r1, [r2, #8]
 80017b0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80017b4:	e654      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80017b6:	4e49      	ldr	r6, [pc, #292]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017be:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017c0:	f7fe fefe 	bl	80005c0 <HAL_GetTick>
 80017c4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017c6:	6833      	ldr	r3, [r6, #0]
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	d472      	bmi.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017cc:	6822      	ldr	r2, [r4, #0]
 80017ce:	07d7      	lsls	r7, r2, #31
 80017d0:	d512      	bpl.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80017d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017d4:	b983      	cbnz	r3, 80017f8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80017d6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017da:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80017e6:	430b      	orrs	r3, r1
 80017e8:	6861      	ldr	r1, [r4, #4]
 80017ea:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80017ee:	68a1      	ldr	r1, [r4, #8]
 80017f0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80017f4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80017f8:	0316      	lsls	r6, r2, #12
 80017fa:	d503      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80017fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001802:	d005      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001804:	02d0      	lsls	r0, r2, #11
 8001806:	d51e      	bpl.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800180a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180e:	d11a      	bne.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001810:	4932      	ldr	r1, [pc, #200]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001812:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001816:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800181a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800181e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001822:	4303      	orrs	r3, r0
 8001824:	6860      	ldr	r0, [r4, #4]
 8001826:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800182a:	68e0      	ldr	r0, [r4, #12]
 800182c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001834:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800183a:	f020 001f 	bic.w	r0, r0, #31
 800183e:	3b01      	subs	r3, #1
 8001840:	4303      	orrs	r3, r0
 8001842:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001846:	01d1      	lsls	r1, r2, #7
 8001848:	d511      	bpl.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800184a:	4924      	ldr	r1, [pc, #144]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800184c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001850:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001854:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001858:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800185c:	4303      	orrs	r3, r0
 800185e:	6860      	ldr	r0, [r4, #4]
 8001860:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001864:	6920      	ldr	r0, [r4, #16]
 8001866:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800186a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800186e:	0192      	lsls	r2, r2, #6
 8001870:	d50d      	bpl.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	6862      	ldr	r2, [r4, #4]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001882:	68a2      	ldr	r2, [r4, #8]
 8001884:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800188a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800188e:	4e13      	ldr	r6, [pc, #76]	; (80018dc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001890:	6833      	ldr	r3, [r6, #0]
 8001892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001896:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001898:	f7fe fe92 	bl	80005c0 <HAL_GetTick>
 800189c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800189e:	6833      	ldr	r3, [r6, #0]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	f53f aed7 	bmi.w	8001654 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80018a6:	f7fe fe8b 	bl	80005c0 <HAL_GetTick>
 80018aa:	1bc0      	subs	r0, r0, r7
 80018ac:	2864      	cmp	r0, #100	; 0x64
 80018ae:	d9f6      	bls.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80018b0:	e753      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80018b2:	f7fe fe85 	bl	80005c0 <HAL_GetTick>
 80018b6:	1bc0      	subs	r0, r0, r7
 80018b8:	2864      	cmp	r0, #100	; 0x64
 80018ba:	d984      	bls.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80018bc:	e74d      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018be:	f7fe fe7f 	bl	80005c0 <HAL_GetTick>
 80018c2:	1b80      	subs	r0, r0, r6
 80018c4:	2864      	cmp	r0, #100	; 0x64
 80018c6:	f67f aecf 	bls.w	8001668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80018ca:	e746      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018cc:	f7fe fe78 	bl	80005c0 <HAL_GetTick>
 80018d0:	1b40      	subs	r0, r0, r5
 80018d2:	2864      	cmp	r0, #100	; 0x64
 80018d4:	f67f af32 	bls.w	800173c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80018d8:	e73f      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <lcd_send_cmd>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*explication ds la video youtube de controllers Tech*/
void lcd_send_cmd(char cmd)
{
 80018e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
char data_u, data_l;
uint8_t data_t[4];
data_u = cmd&0xf0;
 80018e2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
data_l = (cmd<<4)&0xf0;
 80018e6:	0100      	lsls	r0, r0, #4
data_t[0] = data_u | 0x04;
data_t[1] = data_u;
data_t[2] = data_l |0x04;
data_t[3] = data_l ;

HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 80018e8:	214e      	movs	r1, #78	; 0x4e
data_l = (cmd<<4)&0xf0;
 80018ea:	b2c0      	uxtb	r0, r0
data_t[0] = data_u | 0x04;
 80018ec:	f043 0204 	orr.w	r2, r3, #4
data_t[1] = data_u;
 80018f0:	f88d 300d 	strb.w	r3, [sp, #13]
data_t[2] = data_l |0x04;
 80018f4:	f040 0304 	orr.w	r3, r0, #4
data_t[0] = data_u | 0x04;
 80018f8:	f88d 200c 	strb.w	r2, [sp, #12]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 80018fc:	aa03      	add	r2, sp, #12
data_t[3] = data_l ;
 80018fe:	f88d 000f 	strb.w	r0, [sp, #15]
data_t[2] = data_l |0x04;
 8001902:	f88d 300e 	strb.w	r3, [sp, #14]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <lcd_send_cmd+0x38>)
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2304      	movs	r3, #4
 800190e:	f7ff f92b 	bl	8000b68 <HAL_I2C_Master_Transmit>
}
 8001912:	b005      	add	sp, #20
 8001914:	f85d fb04 	ldr.w	pc, [sp], #4
 8001918:	200000b0 	.word	0x200000b0

0800191c <lcd_send_data>:

void lcd_send_data(char data)
{
 800191c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

char data_u, data_l;
uint8_t data_t[4];
data_u = data&0xf0;
 800191e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
data_l = (data<<4)&0xf0;
 8001922:	0100      	lsls	r0, r0, #4
data_t[0] = data_u|0x05;
data_t[1] = data_u|0x01;
data_t[2] = data_l|0x05;
data_t[3] = data_l|0x01;

HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001924:	214e      	movs	r1, #78	; 0x4e
data_t[0] = data_u|0x05;
 8001926:	f043 0205 	orr.w	r2, r3, #5
data_l = (data<<4)&0xf0;
 800192a:	b2c0      	uxtb	r0, r0
data_t[1] = data_u|0x01;
 800192c:	f043 0301 	orr.w	r3, r3, #1
data_t[0] = data_u|0x05;
 8001930:	f88d 200c 	strb.w	r2, [sp, #12]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001934:	aa03      	add	r2, sp, #12
data_t[1] = data_u|0x01;
 8001936:	f88d 300d 	strb.w	r3, [sp, #13]
data_t[2] = data_l|0x05;
 800193a:	f040 0305 	orr.w	r3, r0, #5
data_t[3] = data_l|0x01;
 800193e:	f040 0001 	orr.w	r0, r0, #1
data_t[2] = data_l|0x05;
 8001942:	f88d 300e 	strb.w	r3, [sp, #14]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 8001946:	2364      	movs	r3, #100	; 0x64
data_t[3] = data_l|0x01;
 8001948:	f88d 000f 	strb.w	r0, [sp, #15]
HAL_I2C_Master_Transmit(&hi2c1,LCDAdress,(uint8_t*)data_t,4,100);
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2304      	movs	r3, #4
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <lcd_send_data+0x40>)
 8001952:	f7ff f909 	bl	8000b68 <HAL_I2C_Master_Transmit>

}
 8001956:	b005      	add	sp, #20
 8001958:	f85d fb04 	ldr.w	pc, [sp], #4
 800195c:	200000b0 	.word	0x200000b0

08001960 <lcd_init>:


void lcd_init()
{
 8001960:	b508      	push	{r3, lr}
 lcd_send_cmd(0x02);
 8001962:	2002      	movs	r0, #2
 8001964:	f7ff ffbc 	bl	80018e0 <lcd_send_cmd>
 lcd_send_cmd(0x28);
 8001968:	2028      	movs	r0, #40	; 0x28
 800196a:	f7ff ffb9 	bl	80018e0 <lcd_send_cmd>
 lcd_send_cmd(0x0c);
 800196e:	200c      	movs	r0, #12
 8001970:	f7ff ffb6 	bl	80018e0 <lcd_send_cmd>
 lcd_send_cmd(0x80);
 8001974:	2080      	movs	r0, #128	; 0x80
}
 8001976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 lcd_send_cmd(0x80);
 800197a:	f7ff bfb1 	b.w	80018e0 <lcd_send_cmd>

0800197e <lcd_send_string>:


void lcd_send_string(char *str)
{
 800197e:	b510      	push	{r4, lr}
 8001980:	1e44      	subs	r4, r0, #1

while (*str) lcd_send_data(*str++);
 8001982:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001986:	b900      	cbnz	r0, 800198a <lcd_send_string+0xc>
}
 8001988:	bd10      	pop	{r4, pc}
while (*str) lcd_send_data(*str++);
 800198a:	f7ff ffc7 	bl	800191c <lcd_send_data>
 800198e:	e7f8      	b.n	8001982 <lcd_send_string+0x4>

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b510      	push	{r4, lr}
 8001992:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001994:	2234      	movs	r2, #52	; 0x34
 8001996:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001998:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	a807      	add	r0, sp, #28
 800199c:	f000 fabc 	bl	8001f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	2214      	movs	r2, #20
 80019a2:	2100      	movs	r1, #0
 80019a4:	a802      	add	r0, sp, #8
 80019a6:	f000 fab7 	bl	8001f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019aa:	2100      	movs	r1, #0
 80019ac:	2290      	movs	r2, #144	; 0x90
 80019ae:	a814      	add	r0, sp, #80	; 0x50
 80019b0:	f000 fab2 	bl	8001f18 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019da:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019e2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e4:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ea:	2301      	movs	r3, #1
 80019ec:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019fa:	2304      	movs	r3, #4
 80019fc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019fe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f7ff fa60 	bl	8000ec4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a04:	f7ff fa26 	bl	8000e54 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a14:	2103      	movs	r1, #3
 8001a16:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a18:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a1e:	f7ff fc13 	bl	8001248 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 8001a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a26:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a28:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 8001a2a:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a2c:	942e      	str	r4, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2e:	f7ff fca9 	bl	8001384 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001a32:	b038      	add	sp, #224	; 0xe0
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40007000 	.word	0x40007000

08001a40 <main>:
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2400      	movs	r4, #0
  HAL_Init();
 8001a46:	f7fe fda3 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Pin = LD1_Pin;
 8001a4a:	2701      	movs	r7, #1
  SystemClock_Config();
 8001a4c:	f7ff ffa0 	bl	8001990 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	2214      	movs	r2, #20
 8001a52:	2100      	movs	r1, #0
 8001a54:	a807      	add	r0, sp, #28
 8001a56:	f000 fa5f 	bl	8001f18 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a5a:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <main+0x220>)
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4881      	ldr	r0, [pc, #516]	; (8001c64 <main+0x224>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hi2c2.Instance = I2C2;
 8001a62:	4d81      	ldr	r5, [pc, #516]	; (8001c68 <main+0x228>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a64:	f042 0220 	orr.w	r2, r2, #32
  hi2c2.Init.Timing = 0x20303E5D;
 8001a68:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8001ca4 <main+0x264>
  hi2c1.Instance = I2C1;
 8001a6c:	4e7f      	ldr	r6, [pc, #508]	; (8001c6c <main+0x22c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a72:	f002 0220 	and.w	r2, r2, #32
 8001a76:	9203      	str	r2, [sp, #12]
 8001a78:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
 8001a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a84:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a88:	9204      	str	r2, [sp, #16]
 8001a8a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8e:	f042 0202 	orr.w	r2, r2, #2
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
 8001a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a96:	f002 0202 	and.w	r2, r2, #2
 8001a9a:	9205      	str	r2, [sp, #20]
 8001a9c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	9306      	str	r3, [sp, #24]
 8001ab0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001ab2:	f7fe fee7 	bl	8000884 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	a907      	add	r1, sp, #28
 8001ab8:	486a      	ldr	r0, [pc, #424]	; (8001c64 <main+0x224>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD1_Pin;
 8001abe:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f7fe fdf5 	bl	80006b0 <HAL_GPIO_Init>
  hi2c2.Init.Timing = 0x20303E5D;
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <main+0x230>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ac8:	4628      	mov	r0, r5
  hi2c2.Init.OwnAddress1 = 0;
 8001aca:	60ac      	str	r4, [r5, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	612c      	str	r4, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ace:	616c      	str	r4, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ad0:	61ac      	str	r4, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad2:	61ec      	str	r4, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad4:	622c      	str	r4, [r5, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad6:	60ef      	str	r7, [r5, #12]
  hi2c2.Init.Timing = 0x20303E5D;
 8001ad8:	e885 0108 	stmia.w	r5, {r3, r8}
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001adc:	f7fe fff2 	bl	8000ac4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f7ff f96a 	bl	8000dbc <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ae8:	4621      	mov	r1, r4
 8001aea:	4628      	mov	r0, r5
 8001aec:	f7ff f98c 	bl	8000e08 <HAL_I2CEx_ConfigDigitalFilter>
  hi2c1.Instance = I2C1;
 8001af0:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <main+0x234>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af2:	4630      	mov	r0, r6
  hi2c1.Init.OwnAddress1 = 0;
 8001af4:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af6:	6134      	str	r4, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001af8:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001afa:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afe:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.Timing = 0x20303E5D;
 8001b02:	e886 0108 	stmia.w	r6, {r3, r8}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	f7fe ffdd 	bl	8000ac4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f7ff f955 	bl	8000dbc <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b12:	4621      	mov	r1, r4
 8001b14:	4630      	mov	r0, r6
  buffer[0]= 0x02; // pointer
 8001b16:	4e58      	ldr	r6, [pc, #352]	; (8001c78 <main+0x238>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b18:	f7ff f976 	bl	8000e08 <HAL_I2CEx_ConfigDigitalFilter>
  lcd_init(); // init lcd
 8001b1c:	f7ff ff20 	bl	8001960 <lcd_init>
  buffer[0]= 0x02; // pointer
 8001b20:	2302      	movs	r3, #2
  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,2,100);
 8001b22:	2264      	movs	r2, #100	; 0x64
  buffer[1]= 0;    // MSB
 8001b24:	7074      	strb	r4, [r6, #1]
  buffer[2]= 0;    //LSB
 8001b26:	70b4      	strb	r4, [r6, #2]
 8001b28:	4634      	mov	r4, r6
  buffer[0]= 0x02; // pointer
 8001b2a:	7033      	strb	r3, [r6, #0]
  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,2,100);
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	9200      	str	r2, [sp, #0]
 8001b30:	4628      	mov	r0, r5
 8001b32:	4632      	mov	r2, r6
 8001b34:	f7ff f818 	bl	8000b68 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b38:	2764      	movs	r7, #100	; 0x64
	  buffer[0]= 0xE3;
 8001b3a:	23e3      	movs	r3, #227	; 0xe3
	  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b3c:	4632      	mov	r2, r6
 8001b3e:	2180      	movs	r1, #128	; 0x80
	  buffer[0]= 0xE3;
 8001b40:	7023      	strb	r3, [r4, #0]
	  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b42:	4628      	mov	r0, r5
 8001b44:	2301      	movs	r3, #1
 8001b46:	9700      	str	r7, [sp, #0]
 8001b48:	f7ff f80e 	bl	8000b68 <HAL_I2C_Master_Transmit>
	  HAL_Delay(20);
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f7fe fd3d 	bl	80005cc <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c2,i2cHTV21,buffer,2,100);
 8001b52:	4632      	mov	r2, r6
 8001b54:	9700      	str	r7, [sp, #0]
 8001b56:	2302      	movs	r3, #2
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	f7ff f898 	bl	8000c90 <HAL_I2C_Master_Receive>
	   RawTemp = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001b60:	7822      	ldrb	r2, [r4, #0]
 8001b62:	7863      	ldrb	r3, [r4, #1]
		  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b64:	2180      	movs	r1, #128	; 0x80
	   Temperature = ((float)RawTemp/65536)*175.72 -46.85;
 8001b66:	ed9f 8a45 	vldr	s16, [pc, #276]	; 8001c7c <main+0x23c>
		  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b6a:	4628      	mov	r0, r5
	   RawTemp = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001b6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <main+0x240>)
	   Temperature = ((float)RawTemp/65536)*175.72 -46.85;
 8001b72:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8001ca8 <main+0x268>
 8001b76:	ee07 3a90 	vmov	s15, r3
	   RawTemp = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001b7a:	6013      	str	r3, [r2, #0]
		  buffer[0]= 0xE5;
 8001b7c:	23e5      	movs	r3, #229	; 0xe5
		  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b7e:	4632      	mov	r2, r6
	   Temperature = ((float)RawTemp/65536)*175.72 -46.85;
 8001b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		  Humidity =-6+125*((float)Rawhumidity/65536);
 8001b84:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8001cac <main+0x26c>
		  buffer[0]= 0xE5;
 8001b88:	7023      	strb	r3, [r4, #0]
		  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001b8a:	2301      	movs	r3, #1
	   Temperature = ((float)RawTemp/65536)*175.72 -46.85;
 8001b8c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8001b90:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001c50 <main+0x210>
 8001b94:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001b98:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8001c58 <main+0x218>
 8001b9c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8001ba0:	eeb7 7bc6 	vcvt.f32.f64	s14, d6
 8001ba4:	ed88 7a00 	vstr	s14, [r8]
		  HAL_I2C_Master_Transmit(&hi2c2,i2cHTV21,buffer,1,100);
 8001ba8:	9700      	str	r7, [sp, #0]
 8001baa:	f7fe ffdd 	bl	8000b68 <HAL_I2C_Master_Transmit>
		  HAL_Delay(20);
 8001bae:	2014      	movs	r0, #20
 8001bb0:	f7fe fd0c 	bl	80005cc <HAL_Delay>
		  HAL_I2C_Master_Receive(&hi2c2,i2cHTV21,buffer,2,100);
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	9700      	str	r7, [sp, #0]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f7ff f867 	bl	8000c90 <HAL_I2C_Master_Receive>
		  Rawhumidity = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001bc2:	7822      	ldrb	r2, [r4, #0]
 8001bc4:	7863      	ldrb	r3, [r4, #1]
		  Humidity =-6+125*((float)Rawhumidity/65536);
 8001bc6:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001bca:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001c84 <main+0x244>
	   HAL_Delay(100);
 8001bce:	4638      	mov	r0, r7
		  Rawhumidity = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001bd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <main+0x248>)
		  Humidity =-6+125*((float)Rawhumidity/65536);
 8001bd6:	ee07 3a90 	vmov	s15, r3
		  Rawhumidity = buffer[0]<<8 | buffer[1] ; //combine 2 8-bit into 1 16bit
 8001bda:	6013      	str	r3, [r2, #0]
		  Humidity =-6+125*((float)Rawhumidity/65536);
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001be4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001be8:	ed89 7a00 	vstr	s14, [r9]
	   HAL_Delay(100);
 8001bec:	f7fe fcee 	bl	80005cc <HAL_Delay>
gcvt(Temperature,3,LCDTemp); // convert value in string
 8001bf0:	ed98 0a00 	vldr	s0, [r8]
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	4925      	ldr	r1, [pc, #148]	; (8001c8c <main+0x24c>)
 8001bf8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001bfc:	f000 f944 	bl	8001e88 <gcvt>
gcvt(Humidity,3,LCDHumid); // convert value in string
 8001c00:	ed99 0a00 	vldr	s0, [r9]
 8001c04:	4922      	ldr	r1, [pc, #136]	; (8001c90 <main+0x250>)
 8001c06:	2003      	movs	r0, #3
 8001c08:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8001c0c:	f000 f93c 	bl	8001e88 <gcvt>
	   	lcd_send_cmd(0x80); //goto 1,1
 8001c10:	2080      	movs	r0, #128	; 0x80
 8001c12:	f7ff fe65 	bl	80018e0 <lcd_send_cmd>
	   	lcd_send_string("TEMP:");
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <main+0x254>)
 8001c18:	f7ff feb1 	bl	800197e <lcd_send_string>
	   	lcd_send_string(LCDTemp);
 8001c1c:	481b      	ldr	r0, [pc, #108]	; (8001c8c <main+0x24c>)
 8001c1e:	f7ff feae 	bl	800197e <lcd_send_string>
	   	lcd_send_string("C");
 8001c22:	481d      	ldr	r0, [pc, #116]	; (8001c98 <main+0x258>)
 8001c24:	f7ff feab 	bl	800197e <lcd_send_string>
	   	lcd_send_cmd(0xC0);//goto 2,1?
 8001c28:	20c0      	movs	r0, #192	; 0xc0
 8001c2a:	f7ff fe59 	bl	80018e0 <lcd_send_cmd>
	   	lcd_send_string("HUMID:");
 8001c2e:	481b      	ldr	r0, [pc, #108]	; (8001c9c <main+0x25c>)
 8001c30:	f7ff fea5 	bl	800197e <lcd_send_string>
	   	lcd_send_string(LCDHumid);
 8001c34:	4816      	ldr	r0, [pc, #88]	; (8001c90 <main+0x250>)
 8001c36:	f7ff fea2 	bl	800197e <lcd_send_string>
	   	lcd_send_string("%");
 8001c3a:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <main+0x260>)
 8001c3c:	f7ff fe9f 	bl	800197e <lcd_send_string>
	   	lcd_send_cmd(0x06);
 8001c40:	2006      	movs	r0, #6
 8001c42:	f7ff fe4d 	bl	80018e0 <lcd_send_cmd>
	   	HAL_Delay(1000);
 8001c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c4a:	f7fe fcbf 	bl	80005cc <HAL_Delay>
 8001c4e:	e773      	b.n	8001b38 <main+0xf8>
 8001c50:	3d70a3d7 	.word	0x3d70a3d7
 8001c54:	4065f70a 	.word	0x4065f70a
 8001c58:	cccccccd 	.word	0xcccccccd
 8001c5c:	c0476ccc 	.word	0xc0476ccc
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020400 	.word	0x40020400
 8001c68:	200000fc 	.word	0x200000fc
 8001c6c:	200000b0 	.word	0x200000b0
 8001c70:	40005800 	.word	0x40005800
 8001c74:	40005400 	.word	0x40005400
 8001c78:	20000178 	.word	0x20000178
 8001c7c:	37800000 	.word	0x37800000
 8001c80:	20000180 	.word	0x20000180
 8001c84:	42fa0000 	.word	0x42fa0000
 8001c88:	20000164 	.word	0x20000164
 8001c8c:	20000168 	.word	0x20000168
 8001c90:	2000009c 	.word	0x2000009c
 8001c94:	08003490 	.word	0x08003490
 8001c98:	08003496 	.word	0x08003496
 8001c9c:	08003498 	.word	0x08003498
 8001ca0:	0800349f 	.word	0x0800349f
 8001ca4:	20303e5d 	.word	0x20303e5d
 8001ca8:	200000ac 	.word	0x200000ac
 8001cac:	20000184 	.word	0x20000184

08001cb0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_MspInit+0x2c>)
{
 8001cb2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
 8001cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	4770      	bx	lr
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	2214      	movs	r2, #20
{
 8001ce4:	b08a      	sub	sp, #40	; 0x28
 8001ce6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	2100      	movs	r1, #0
 8001cea:	eb0d 0002 	add.w	r0, sp, r2
 8001cee:	f000 f913 	bl	8001f18 <memset>
  if(hi2c->Instance==I2C1)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_I2C_MspInit+0xac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d123      	bne.n	8001d42 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	4c25      	ldr	r4, [pc, #148]	; (8001d90 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	a905      	add	r1, sp, #20
 8001cfe:	4825      	ldr	r0, [pc, #148]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d02:	f043 0302 	orr.w	r3, r3, #2
 8001d06:	6323      	str	r3, [r4, #48]	; 0x30
 8001d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d16:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d24:	2304      	movs	r3, #4
 8001d26:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f7fe fcc2 	bl	80006b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d32:	6423      	str	r3, [r4, #64]	; 0x40
 8001d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d3e:	b00a      	add	sp, #40	; 0x28
 8001d40:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d1fa      	bne.n	8001d3e <HAL_I2C_MspInit+0x5e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d48:	4c11      	ldr	r4, [pc, #68]	; (8001d90 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2212      	movs	r2, #18
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	a905      	add	r1, sp, #20
 8001d4e:	4813      	ldr	r0, [pc, #76]	; (8001d9c <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d52:	f043 0320 	orr.w	r3, r3, #32
 8001d56:	6323      	str	r3, [r4, #48]	; 0x30
 8001d58:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d64:	9303      	str	r3, [sp, #12]
 8001d66:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d72:	f7fe fc9d 	bl	80006b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6423      	str	r3, [r4, #64]	; 0x40
 8001d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	9304      	str	r3, [sp, #16]
 8001d86:	9b04      	ldr	r3, [sp, #16]
}
 8001d88:	e7d9      	b.n	8001d3e <HAL_I2C_MspInit+0x5e>
 8001d8a:	bf00      	nop
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40005800 	.word	0x40005800
 8001d9c:	40021400 	.word	0x40021400

08001da0 <NMI_Handler>:
 8001da0:	4770      	bx	lr

08001da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler>

08001da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	e7fe      	b.n	8001da6 <BusFault_Handler>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler>

08001daa <SVC_Handler>:
 8001daa:	4770      	bx	lr

08001dac <DebugMon_Handler>:
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f7fe bbfa 	b.w	80005a8 <HAL_IncTick>

08001db4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001db4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <_sbrk+0x2c>)
{
 8001db8:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	b909      	cbnz	r1, 8001dc2 <_sbrk+0xe>
		heap_end = &end;
 8001dbe:	4909      	ldr	r1, [pc, #36]	; (8001de4 <_sbrk+0x30>)
 8001dc0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8001dc2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001dc4:	4669      	mov	r1, sp
 8001dc6:	4402      	add	r2, r0
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	d906      	bls.n	8001dda <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001dcc:	f000 f87a 	bl	8001ec4 <__errno>
 8001dd0:	230c      	movs	r3, #12
 8001dd2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001dda:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	2000008c 	.word	0x2000008c
 8001de4:	2000018c 	.word	0x2000018c

08001de8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	490f      	ldr	r1, [pc, #60]	; (8001e28 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dea:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <SystemInit+0x44>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001e02:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <SystemInit+0x48>)
 8001e12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e1c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e22:	608b      	str	r3, [r1, #8]
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	24003010 	.word	0x24003010

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e3a:	e003      	b.n	8001e44 <LoopCopyDataInit>

08001e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e42:	3104      	adds	r1, #4

08001e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e4c:	d3f6      	bcc.n	8001e3c <CopyDataInit>
  ldr  r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e50:	e002      	b.n	8001e58 <LoopFillZerobss>

08001e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e54:	f842 3b04 	str.w	r3, [r2], #4

08001e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e5c:	d3f9      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5e:	f7ff ffc3 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f000 f835 	bl	8001ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7ff fdeb 	bl	8001a40 <main>
  bx  lr    
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001e70:	080035d4 	.word	0x080035d4
  ldr  r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e78:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001e7c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001e80:	2000018c 	.word	0x2000018c

08001e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC_IRQHandler>
	...

08001e88 <gcvt>:
 8001e88:	b513      	push	{r0, r1, r4, lr}
 8001e8a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8001e8e:	460a      	mov	r2, r1
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	bf42      	ittt	mi
 8001e96:	232d      	movmi	r3, #45	; 0x2d
 8001e98:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8001e9c:	f802 3b01 	strbmi.w	r3, [r2], #1
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <gcvt+0x38>)
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	2367      	movs	r3, #103	; 0x67
 8001eae:	f000 f8af 	bl	8002010 <_gcvt>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	4620      	movne	r0, r4
 8001eb8:	2000      	moveq	r0, #0
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd10      	pop	{r4, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <__errno>:
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <__errno+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000000c 	.word	0x2000000c

08001ed0 <__libc_init_array>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	4e0d      	ldr	r6, [pc, #52]	; (8001f08 <__libc_init_array+0x38>)
 8001ed4:	4c0d      	ldr	r4, [pc, #52]	; (8001f0c <__libc_init_array+0x3c>)
 8001ed6:	1ba4      	subs	r4, r4, r6
 8001ed8:	10a4      	asrs	r4, r4, #2
 8001eda:	2500      	movs	r5, #0
 8001edc:	42a5      	cmp	r5, r4
 8001ede:	d109      	bne.n	8001ef4 <__libc_init_array+0x24>
 8001ee0:	4e0b      	ldr	r6, [pc, #44]	; (8001f10 <__libc_init_array+0x40>)
 8001ee2:	4c0c      	ldr	r4, [pc, #48]	; (8001f14 <__libc_init_array+0x44>)
 8001ee4:	f001 fac6 	bl	8003474 <_init>
 8001ee8:	1ba4      	subs	r4, r4, r6
 8001eea:	10a4      	asrs	r4, r4, #2
 8001eec:	2500      	movs	r5, #0
 8001eee:	42a5      	cmp	r5, r4
 8001ef0:	d105      	bne.n	8001efe <__libc_init_array+0x2e>
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ef8:	4798      	blx	r3
 8001efa:	3501      	adds	r5, #1
 8001efc:	e7ee      	b.n	8001edc <__libc_init_array+0xc>
 8001efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f02:	4798      	blx	r3
 8001f04:	3501      	adds	r5, #1
 8001f06:	e7f2      	b.n	8001eee <__libc_init_array+0x1e>
 8001f08:	080035cc 	.word	0x080035cc
 8001f0c:	080035cc 	.word	0x080035cc
 8001f10:	080035cc 	.word	0x080035cc
 8001f14:	080035d0 	.word	0x080035d0

08001f18 <memset>:
 8001f18:	4402      	add	r2, r0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <memset+0xa>
 8001f20:	4770      	bx	lr
 8001f22:	f803 1b01 	strb.w	r1, [r3], #1
 8001f26:	e7f9      	b.n	8001f1c <memset+0x4>

08001f28 <print_e>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	461e      	mov	r6, r3
 8001f2e:	ab04      	add	r3, sp, #16
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	ab03      	add	r3, sp, #12
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	460f      	mov	r7, r1
 8001f38:	ab05      	add	r3, sp, #20
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	3201      	adds	r2, #1
 8001f40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f42:	f000 fd15 	bl	8002970 <_dtoa_r>
 8001f46:	4601      	mov	r1, r0
 8001f48:	9805      	ldr	r0, [sp, #20]
 8001f4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8001f4e:	4298      	cmp	r0, r3
 8001f50:	d104      	bne.n	8001f5c <print_e+0x34>
 8001f52:	4638      	mov	r0, r7
 8001f54:	f000 fc78 	bl	8002848 <strcpy>
 8001f58:	b007      	add	sp, #28
 8001f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5c:	780b      	ldrb	r3, [r1, #0]
 8001f5e:	703b      	strb	r3, [r7, #0]
 8001f60:	b945      	cbnz	r5, 8001f74 <print_e+0x4c>
 8001f62:	b93c      	cbnz	r4, 8001f74 <print_e+0x4c>
 8001f64:	1c7b      	adds	r3, r7, #1
 8001f66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001f6a:	b93a      	cbnz	r2, 8001f7c <print_e+0x54>
 8001f6c:	2e67      	cmp	r6, #103	; 0x67
 8001f6e:	d10b      	bne.n	8001f88 <print_e+0x60>
 8001f70:	2665      	movs	r6, #101	; 0x65
 8001f72:	e014      	b.n	8001f9e <print_e+0x76>
 8001f74:	222e      	movs	r2, #46	; 0x2e
 8001f76:	1cbb      	adds	r3, r7, #2
 8001f78:	707a      	strb	r2, [r7, #1]
 8001f7a:	e7f4      	b.n	8001f66 <print_e+0x3e>
 8001f7c:	2c00      	cmp	r4, #0
 8001f7e:	ddf5      	ble.n	8001f6c <print_e+0x44>
 8001f80:	f803 2b01 	strb.w	r2, [r3], #1
 8001f84:	3c01      	subs	r4, #1
 8001f86:	e7ee      	b.n	8001f66 <print_e+0x3e>
 8001f88:	2e47      	cmp	r6, #71	; 0x47
 8001f8a:	d03c      	beq.n	8002006 <print_e+0xde>
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	2530      	movs	r5, #48	; 0x30
 8001f90:	1a62      	subs	r2, r4, r1
 8001f92:	441a      	add	r2, r3
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	dc33      	bgt.n	8002000 <print_e+0xd8>
 8001f98:	2c00      	cmp	r4, #0
 8001f9a:	bfa8      	it	ge
 8001f9c:	191b      	addge	r3, r3, r4
 8001f9e:	1e41      	subs	r1, r0, #1
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	bfb8      	it	lt
 8001fa4:	f1c0 0001 	rsblt	r0, r0, #1
 8001fa8:	461a      	mov	r2, r3
 8001faa:	9105      	str	r1, [sp, #20]
 8001fac:	bfac      	ite	ge
 8001fae:	202b      	movge	r0, #43	; 0x2b
 8001fb0:	9005      	strlt	r0, [sp, #20]
 8001fb2:	f802 6b02 	strb.w	r6, [r2], #2
 8001fb6:	bfa8      	it	ge
 8001fb8:	7058      	strbge	r0, [r3, #1]
 8001fba:	9805      	ldr	r0, [sp, #20]
 8001fbc:	bfbc      	itt	lt
 8001fbe:	242d      	movlt	r4, #45	; 0x2d
 8001fc0:	705c      	strblt	r4, [r3, #1]
 8001fc2:	2863      	cmp	r0, #99	; 0x63
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	dd0b      	ble.n	8001fe0 <print_e+0xb8>
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	fb90 f3f3 	sdiv	r3, r0, r3
 8001fce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001fd2:	7011      	strb	r1, [r2, #0]
 8001fd4:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001fd8:	fb01 0303 	mla	r3, r1, r3, r0
 8001fdc:	9305      	str	r3, [sp, #20]
 8001fde:	1c51      	adds	r1, r2, #1
 8001fe0:	9a05      	ldr	r2, [sp, #20]
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fe8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001fec:	7008      	strb	r0, [r1, #0]
 8001fee:	f06f 0009 	mvn.w	r0, #9
 8001ff2:	fb00 2303 	mla	r3, r0, r3, r2
 8001ff6:	3330      	adds	r3, #48	; 0x30
 8001ff8:	704b      	strb	r3, [r1, #1]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	708b      	strb	r3, [r1, #2]
 8001ffe:	e7ab      	b.n	8001f58 <print_e+0x30>
 8002000:	f801 5b01 	strb.w	r5, [r1], #1
 8002004:	e7c4      	b.n	8001f90 <print_e+0x68>
 8002006:	2645      	movs	r6, #69	; 0x45
 8002008:	e7c9      	b.n	8001f9e <print_e+0x76>
 800200a:	0000      	movs	r0, r0
 800200c:	0000      	movs	r0, r0
	...

08002010 <_gcvt>:
 8002010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002014:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002018:	ed2d 8b02 	vpush	{d8}
 800201c:	eeb0 8b40 	vmov.f64	d8, d0
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	b086      	sub	sp, #24
 8002026:	bf48      	it	mi
 8002028:	eeb1 8b40 	vnegmi.f64	d8, d0
 800202c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	4605      	mov	r5, r0
 8002036:	4688      	mov	r8, r1
 8002038:	4614      	mov	r4, r2
 800203a:	461f      	mov	r7, r3
 800203c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800203e:	d109      	bne.n	8002054 <_gcvt+0x44>
 8002040:	2330      	movs	r3, #48	; 0x30
 8002042:	7013      	strb	r3, [r2, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	7053      	strb	r3, [r2, #1]
 8002048:	4620      	mov	r0, r4
 800204a:	b006      	add	sp, #24
 800204c:	ecbd 8b02 	vpop	{d8}
 8002050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002054:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 8002180 <_gcvt+0x170>
 8002058:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	d80a      	bhi.n	8002078 <_gcvt+0x68>
 8002062:	eeb0 0b48 	vmov.f64	d0, d8
 8002066:	9600      	str	r6, [sp, #0]
 8002068:	463b      	mov	r3, r7
 800206a:	f108 32ff 	add.w	r2, r8, #4294967295
 800206e:	4621      	mov	r1, r4
 8002070:	4628      	mov	r0, r5
 8002072:	f7ff ff59 	bl	8001f28 <print_e>
 8002076:	e7e7      	b.n	8002048 <_gcvt+0x38>
 8002078:	4608      	mov	r0, r1
 800207a:	f000 fb55 	bl	8002728 <_mprec_log10>
 800207e:	eeb4 8bc0 	vcmpe.f64	d8, d0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	daec      	bge.n	8002062 <_gcvt+0x52>
 8002088:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800208c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8002090:	aa05      	add	r2, sp, #20
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	ab04      	add	r3, sp, #16
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4642      	mov	r2, r8
 800209e:	ab03      	add	r3, sp, #12
 80020a0:	bf4c      	ite	mi
 80020a2:	2103      	movmi	r1, #3
 80020a4:	2102      	movpl	r1, #2
 80020a6:	eeb0 0b48 	vmov.f64	d0, d8
 80020aa:	4628      	mov	r0, r5
 80020ac:	f000 fc60 	bl	8002970 <_dtoa_r>
 80020b0:	9a03      	ldr	r2, [sp, #12]
 80020b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d011      	beq.n	80020de <_gcvt+0xce>
 80020ba:	4623      	mov	r3, r4
 80020bc:	7801      	ldrb	r1, [r0, #0]
 80020be:	9f03      	ldr	r7, [sp, #12]
 80020c0:	eba8 0203 	sub.w	r2, r8, r3
 80020c4:	4605      	mov	r5, r0
 80020c6:	4422      	add	r2, r4
 80020c8:	3001      	adds	r0, #1
 80020ca:	b991      	cbnz	r1, 80020f2 <_gcvt+0xe2>
 80020cc:	1abf      	subs	r7, r7, r2
 80020ce:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80020d2:	18b8      	adds	r0, r7, r2
 80020d4:	2800      	cmp	r0, #0
 80020d6:	dc35      	bgt.n	8002144 <_gcvt+0x134>
 80020d8:	b169      	cbz	r1, 80020f6 <_gcvt+0xe6>
 80020da:	9003      	str	r0, [sp, #12]
 80020dc:	e00b      	b.n	80020f6 <_gcvt+0xe6>
 80020de:	4601      	mov	r1, r0
 80020e0:	4620      	mov	r0, r4
 80020e2:	f000 fbb1 	bl	8002848 <strcpy>
 80020e6:	e7af      	b.n	8002048 <_gcvt+0x38>
 80020e8:	3f01      	subs	r7, #1
 80020ea:	f803 1b01 	strb.w	r1, [r3], #1
 80020ee:	9703      	str	r7, [sp, #12]
 80020f0:	e7e4      	b.n	80020bc <_gcvt+0xac>
 80020f2:	2f00      	cmp	r7, #0
 80020f4:	dcf8      	bgt.n	80020e8 <_gcvt+0xd8>
 80020f6:	b90e      	cbnz	r6, 80020fc <_gcvt+0xec>
 80020f8:	7829      	ldrb	r1, [r5, #0]
 80020fa:	b301      	cbz	r1, 800213e <_gcvt+0x12e>
 80020fc:	429c      	cmp	r4, r3
 80020fe:	bf02      	ittt	eq
 8002100:	1c63      	addeq	r3, r4, #1
 8002102:	2130      	moveq	r1, #48	; 0x30
 8002104:	7021      	strbeq	r1, [r4, #0]
 8002106:	212e      	movs	r1, #46	; 0x2e
 8002108:	7019      	strb	r1, [r3, #0]
 800210a:	9903      	ldr	r1, [sp, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	2000      	movs	r0, #0
 8002110:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002114:	2900      	cmp	r1, #0
 8002116:	460f      	mov	r7, r1
 8002118:	db20      	blt.n	800215c <_gcvt+0x14c>
 800211a:	b100      	cbz	r0, 800211e <_gcvt+0x10e>
 800211c:	9103      	str	r1, [sp, #12]
 800211e:	3d01      	subs	r5, #1
 8002120:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002124:	b109      	cbz	r1, 800212a <_gcvt+0x11a>
 8002126:	2a00      	cmp	r2, #0
 8002128:	dc20      	bgt.n	800216c <_gcvt+0x15c>
 800212a:	b146      	cbz	r6, 800213e <_gcvt+0x12e>
 800212c:	4618      	mov	r0, r3
 800212e:	2530      	movs	r5, #48	; 0x30
 8002130:	1a11      	subs	r1, r2, r0
 8002132:	4419      	add	r1, r3
 8002134:	2900      	cmp	r1, #0
 8002136:	dc1d      	bgt.n	8002174 <_gcvt+0x164>
 8002138:	2a00      	cmp	r2, #0
 800213a:	bfa8      	it	ge
 800213c:	189b      	addge	r3, r3, r2
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e781      	b.n	8002048 <_gcvt+0x38>
 8002144:	2a00      	cmp	r2, #0
 8002146:	ddc7      	ble.n	80020d8 <_gcvt+0xc8>
 8002148:	f803 eb01 	strb.w	lr, [r3], #1
 800214c:	3a01      	subs	r2, #1
 800214e:	2101      	movs	r1, #1
 8002150:	e7bf      	b.n	80020d2 <_gcvt+0xc2>
 8002152:	f803 eb01 	strb.w	lr, [r3], #1
 8002156:	3a01      	subs	r2, #1
 8002158:	2001      	movs	r0, #1
 800215a:	e7db      	b.n	8002114 <_gcvt+0x104>
 800215c:	2a00      	cmp	r2, #0
 800215e:	f101 0101 	add.w	r1, r1, #1
 8002162:	dcf6      	bgt.n	8002152 <_gcvt+0x142>
 8002164:	2800      	cmp	r0, #0
 8002166:	d0da      	beq.n	800211e <_gcvt+0x10e>
 8002168:	9703      	str	r7, [sp, #12]
 800216a:	e7d8      	b.n	800211e <_gcvt+0x10e>
 800216c:	f803 1b01 	strb.w	r1, [r3], #1
 8002170:	3a01      	subs	r2, #1
 8002172:	e7d5      	b.n	8002120 <_gcvt+0x110>
 8002174:	f800 5b01 	strb.w	r5, [r0], #1
 8002178:	e7da      	b.n	8002130 <_gcvt+0x120>
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	eb1c432d 	.word	0xeb1c432d
 8002184:	3f1a36e2 	.word	0x3f1a36e2

08002188 <_Balloc>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800218c:	4604      	mov	r4, r0
 800218e:	460e      	mov	r6, r1
 8002190:	b93d      	cbnz	r5, 80021a2 <_Balloc+0x1a>
 8002192:	2010      	movs	r0, #16
 8002194:	f001 f958 	bl	8003448 <malloc>
 8002198:	6260      	str	r0, [r4, #36]	; 0x24
 800219a:	6045      	str	r5, [r0, #4]
 800219c:	6085      	str	r5, [r0, #8]
 800219e:	6005      	str	r5, [r0, #0]
 80021a0:	60c5      	str	r5, [r0, #12]
 80021a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80021a4:	68eb      	ldr	r3, [r5, #12]
 80021a6:	b183      	cbz	r3, 80021ca <_Balloc+0x42>
 80021a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80021b0:	b9b8      	cbnz	r0, 80021e2 <_Balloc+0x5a>
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f506 	lsl.w	r5, r1, r6
 80021b8:	1d6a      	adds	r2, r5, #5
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4620      	mov	r0, r4
 80021be:	f000 fac7 	bl	8002750 <_calloc_r>
 80021c2:	b160      	cbz	r0, 80021de <_Balloc+0x56>
 80021c4:	6046      	str	r6, [r0, #4]
 80021c6:	6085      	str	r5, [r0, #8]
 80021c8:	e00e      	b.n	80021e8 <_Balloc+0x60>
 80021ca:	2221      	movs	r2, #33	; 0x21
 80021cc:	2104      	movs	r1, #4
 80021ce:	4620      	mov	r0, r4
 80021d0:	f000 fabe 	bl	8002750 <_calloc_r>
 80021d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021d6:	60e8      	str	r0, [r5, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e4      	bne.n	80021a8 <_Balloc+0x20>
 80021de:	2000      	movs	r0, #0
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	6802      	ldr	r2, [r0, #0]
 80021e4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80021e8:	2300      	movs	r3, #0
 80021ea:	6103      	str	r3, [r0, #16]
 80021ec:	60c3      	str	r3, [r0, #12]
 80021ee:	bd70      	pop	{r4, r5, r6, pc}

080021f0 <_Bfree>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80021f4:	4606      	mov	r6, r0
 80021f6:	460d      	mov	r5, r1
 80021f8:	b93c      	cbnz	r4, 800220a <_Bfree+0x1a>
 80021fa:	2010      	movs	r0, #16
 80021fc:	f001 f924 	bl	8003448 <malloc>
 8002200:	6270      	str	r0, [r6, #36]	; 0x24
 8002202:	6044      	str	r4, [r0, #4]
 8002204:	6084      	str	r4, [r0, #8]
 8002206:	6004      	str	r4, [r0, #0]
 8002208:	60c4      	str	r4, [r0, #12]
 800220a:	b13d      	cbz	r5, 800221c <_Bfree+0x2c>
 800220c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800220e:	686a      	ldr	r2, [r5, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002216:	6029      	str	r1, [r5, #0]
 8002218:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800221c:	bd70      	pop	{r4, r5, r6, pc}

0800221e <__multadd>:
 800221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	690d      	ldr	r5, [r1, #16]
 8002224:	461f      	mov	r7, r3
 8002226:	4606      	mov	r6, r0
 8002228:	460c      	mov	r4, r1
 800222a:	f101 0e14 	add.w	lr, r1, #20
 800222e:	2300      	movs	r3, #0
 8002230:	f8de 0000 	ldr.w	r0, [lr]
 8002234:	b281      	uxth	r1, r0
 8002236:	fb02 7101 	mla	r1, r2, r1, r7
 800223a:	0c0f      	lsrs	r7, r1, #16
 800223c:	0c00      	lsrs	r0, r0, #16
 800223e:	fb02 7000 	mla	r0, r2, r0, r7
 8002242:	b289      	uxth	r1, r1
 8002244:	3301      	adds	r3, #1
 8002246:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800224a:	429d      	cmp	r5, r3
 800224c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8002250:	f84e 1b04 	str.w	r1, [lr], #4
 8002254:	dcec      	bgt.n	8002230 <__multadd+0x12>
 8002256:	b1d7      	cbz	r7, 800228e <__multadd+0x70>
 8002258:	68a3      	ldr	r3, [r4, #8]
 800225a:	429d      	cmp	r5, r3
 800225c:	db12      	blt.n	8002284 <__multadd+0x66>
 800225e:	6861      	ldr	r1, [r4, #4]
 8002260:	4630      	mov	r0, r6
 8002262:	3101      	adds	r1, #1
 8002264:	f7ff ff90 	bl	8002188 <_Balloc>
 8002268:	6922      	ldr	r2, [r4, #16]
 800226a:	3202      	adds	r2, #2
 800226c:	f104 010c 	add.w	r1, r4, #12
 8002270:	4680      	mov	r8, r0
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	300c      	adds	r0, #12
 8002276:	f001 f8ef 	bl	8003458 <memcpy>
 800227a:	4621      	mov	r1, r4
 800227c:	4630      	mov	r0, r6
 800227e:	f7ff ffb7 	bl	80021f0 <_Bfree>
 8002282:	4644      	mov	r4, r8
 8002284:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002288:	3501      	adds	r5, #1
 800228a:	615f      	str	r7, [r3, #20]
 800228c:	6125      	str	r5, [r4, #16]
 800228e:	4620      	mov	r0, r4
 8002290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002294 <__hi0bits>:
 8002294:	0c02      	lsrs	r2, r0, #16
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	4603      	mov	r3, r0
 800229a:	b9b2      	cbnz	r2, 80022ca <__hi0bits+0x36>
 800229c:	0403      	lsls	r3, r0, #16
 800229e:	2010      	movs	r0, #16
 80022a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80022a4:	bf04      	itt	eq
 80022a6:	021b      	lsleq	r3, r3, #8
 80022a8:	3008      	addeq	r0, #8
 80022aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80022ae:	bf04      	itt	eq
 80022b0:	011b      	lsleq	r3, r3, #4
 80022b2:	3004      	addeq	r0, #4
 80022b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80022b8:	bf04      	itt	eq
 80022ba:	009b      	lsleq	r3, r3, #2
 80022bc:	3002      	addeq	r0, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db06      	blt.n	80022d0 <__hi0bits+0x3c>
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	d503      	bpl.n	80022ce <__hi0bits+0x3a>
 80022c6:	3001      	adds	r0, #1
 80022c8:	4770      	bx	lr
 80022ca:	2000      	movs	r0, #0
 80022cc:	e7e8      	b.n	80022a0 <__hi0bits+0xc>
 80022ce:	2020      	movs	r0, #32
 80022d0:	4770      	bx	lr

080022d2 <__lo0bits>:
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	f013 0207 	ands.w	r2, r3, #7
 80022d8:	4601      	mov	r1, r0
 80022da:	d00b      	beq.n	80022f4 <__lo0bits+0x22>
 80022dc:	07da      	lsls	r2, r3, #31
 80022de:	d423      	bmi.n	8002328 <__lo0bits+0x56>
 80022e0:	0798      	lsls	r0, r3, #30
 80022e2:	bf49      	itett	mi
 80022e4:	085b      	lsrmi	r3, r3, #1
 80022e6:	089b      	lsrpl	r3, r3, #2
 80022e8:	2001      	movmi	r0, #1
 80022ea:	600b      	strmi	r3, [r1, #0]
 80022ec:	bf5c      	itt	pl
 80022ee:	600b      	strpl	r3, [r1, #0]
 80022f0:	2002      	movpl	r0, #2
 80022f2:	4770      	bx	lr
 80022f4:	b298      	uxth	r0, r3
 80022f6:	b9a8      	cbnz	r0, 8002324 <__lo0bits+0x52>
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	2010      	movs	r0, #16
 80022fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002300:	bf04      	itt	eq
 8002302:	0a1b      	lsreq	r3, r3, #8
 8002304:	3008      	addeq	r0, #8
 8002306:	071a      	lsls	r2, r3, #28
 8002308:	bf04      	itt	eq
 800230a:	091b      	lsreq	r3, r3, #4
 800230c:	3004      	addeq	r0, #4
 800230e:	079a      	lsls	r2, r3, #30
 8002310:	bf04      	itt	eq
 8002312:	089b      	lsreq	r3, r3, #2
 8002314:	3002      	addeq	r0, #2
 8002316:	07da      	lsls	r2, r3, #31
 8002318:	d402      	bmi.n	8002320 <__lo0bits+0x4e>
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	d006      	beq.n	800232c <__lo0bits+0x5a>
 800231e:	3001      	adds	r0, #1
 8002320:	600b      	str	r3, [r1, #0]
 8002322:	4770      	bx	lr
 8002324:	4610      	mov	r0, r2
 8002326:	e7e9      	b.n	80022fc <__lo0bits+0x2a>
 8002328:	2000      	movs	r0, #0
 800232a:	4770      	bx	lr
 800232c:	2020      	movs	r0, #32
 800232e:	4770      	bx	lr

08002330 <__i2b>:
 8002330:	b510      	push	{r4, lr}
 8002332:	460c      	mov	r4, r1
 8002334:	2101      	movs	r1, #1
 8002336:	f7ff ff27 	bl	8002188 <_Balloc>
 800233a:	2201      	movs	r2, #1
 800233c:	6144      	str	r4, [r0, #20]
 800233e:	6102      	str	r2, [r0, #16]
 8002340:	bd10      	pop	{r4, pc}

08002342 <__multiply>:
 8002342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002346:	4614      	mov	r4, r2
 8002348:	690a      	ldr	r2, [r1, #16]
 800234a:	6923      	ldr	r3, [r4, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	bfb8      	it	lt
 8002350:	460b      	movlt	r3, r1
 8002352:	4689      	mov	r9, r1
 8002354:	bfbc      	itt	lt
 8002356:	46a1      	movlt	r9, r4
 8002358:	461c      	movlt	r4, r3
 800235a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800235e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8002362:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002366:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800236a:	eb07 060a 	add.w	r6, r7, sl
 800236e:	429e      	cmp	r6, r3
 8002370:	bfc8      	it	gt
 8002372:	3101      	addgt	r1, #1
 8002374:	f7ff ff08 	bl	8002188 <_Balloc>
 8002378:	f100 0514 	add.w	r5, r0, #20
 800237c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002380:	462b      	mov	r3, r5
 8002382:	2200      	movs	r2, #0
 8002384:	4543      	cmp	r3, r8
 8002386:	d316      	bcc.n	80023b6 <__multiply+0x74>
 8002388:	f104 0214 	add.w	r2, r4, #20
 800238c:	f109 0114 	add.w	r1, r9, #20
 8002390:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8002394:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	9c01      	ldr	r4, [sp, #4]
 800239c:	4294      	cmp	r4, r2
 800239e:	4613      	mov	r3, r2
 80023a0:	d80c      	bhi.n	80023bc <__multiply+0x7a>
 80023a2:	2e00      	cmp	r6, #0
 80023a4:	dd03      	ble.n	80023ae <__multiply+0x6c>
 80023a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d054      	beq.n	8002458 <__multiply+0x116>
 80023ae:	6106      	str	r6, [r0, #16]
 80023b0:	b003      	add	sp, #12
 80023b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b6:	f843 2b04 	str.w	r2, [r3], #4
 80023ba:	e7e3      	b.n	8002384 <__multiply+0x42>
 80023bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80023c0:	3204      	adds	r2, #4
 80023c2:	f1ba 0f00 	cmp.w	sl, #0
 80023c6:	d020      	beq.n	800240a <__multiply+0xc8>
 80023c8:	46ae      	mov	lr, r5
 80023ca:	4689      	mov	r9, r1
 80023cc:	f04f 0c00 	mov.w	ip, #0
 80023d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80023d4:	f8be b000 	ldrh.w	fp, [lr]
 80023d8:	b2a3      	uxth	r3, r4
 80023da:	fb0a b303 	mla	r3, sl, r3, fp
 80023de:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80023e2:	f8de 4000 	ldr.w	r4, [lr]
 80023e6:	4463      	add	r3, ip
 80023e8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80023ec:	fb0a c40b 	mla	r4, sl, fp, ip
 80023f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80023fa:	454f      	cmp	r7, r9
 80023fc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002400:	f84e 3b04 	str.w	r3, [lr], #4
 8002404:	d8e4      	bhi.n	80023d0 <__multiply+0x8e>
 8002406:	f8ce c000 	str.w	ip, [lr]
 800240a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800240e:	f1b9 0f00 	cmp.w	r9, #0
 8002412:	d01f      	beq.n	8002454 <__multiply+0x112>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	46ae      	mov	lr, r5
 8002418:	468c      	mov	ip, r1
 800241a:	f04f 0a00 	mov.w	sl, #0
 800241e:	f8bc 4000 	ldrh.w	r4, [ip]
 8002422:	f8be b002 	ldrh.w	fp, [lr, #2]
 8002426:	fb09 b404 	mla	r4, r9, r4, fp
 800242a:	44a2      	add	sl, r4
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8002432:	f84e 3b04 	str.w	r3, [lr], #4
 8002436:	f85c 3b04 	ldr.w	r3, [ip], #4
 800243a:	f8be 4000 	ldrh.w	r4, [lr]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	fb09 4303 	mla	r3, r9, r3, r4
 8002444:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8002448:	4567      	cmp	r7, ip
 800244a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800244e:	d8e6      	bhi.n	800241e <__multiply+0xdc>
 8002450:	f8ce 3000 	str.w	r3, [lr]
 8002454:	3504      	adds	r5, #4
 8002456:	e7a0      	b.n	800239a <__multiply+0x58>
 8002458:	3e01      	subs	r6, #1
 800245a:	e7a2      	b.n	80023a2 <__multiply+0x60>

0800245c <__pow5mult>:
 800245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002460:	4615      	mov	r5, r2
 8002462:	f012 0203 	ands.w	r2, r2, #3
 8002466:	4606      	mov	r6, r0
 8002468:	460f      	mov	r7, r1
 800246a:	d007      	beq.n	800247c <__pow5mult+0x20>
 800246c:	3a01      	subs	r2, #1
 800246e:	4c21      	ldr	r4, [pc, #132]	; (80024f4 <__pow5mult+0x98>)
 8002470:	2300      	movs	r3, #0
 8002472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002476:	f7ff fed2 	bl	800221e <__multadd>
 800247a:	4607      	mov	r7, r0
 800247c:	10ad      	asrs	r5, r5, #2
 800247e:	d035      	beq.n	80024ec <__pow5mult+0x90>
 8002480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8002482:	b93c      	cbnz	r4, 8002494 <__pow5mult+0x38>
 8002484:	2010      	movs	r0, #16
 8002486:	f000 ffdf 	bl	8003448 <malloc>
 800248a:	6270      	str	r0, [r6, #36]	; 0x24
 800248c:	6044      	str	r4, [r0, #4]
 800248e:	6084      	str	r4, [r0, #8]
 8002490:	6004      	str	r4, [r0, #0]
 8002492:	60c4      	str	r4, [r0, #12]
 8002494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8002498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800249c:	b94c      	cbnz	r4, 80024b2 <__pow5mult+0x56>
 800249e:	f240 2171 	movw	r1, #625	; 0x271
 80024a2:	4630      	mov	r0, r6
 80024a4:	f7ff ff44 	bl	8002330 <__i2b>
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80024ae:	4604      	mov	r4, r0
 80024b0:	6003      	str	r3, [r0, #0]
 80024b2:	f04f 0800 	mov.w	r8, #0
 80024b6:	07eb      	lsls	r3, r5, #31
 80024b8:	d50a      	bpl.n	80024d0 <__pow5mult+0x74>
 80024ba:	4639      	mov	r1, r7
 80024bc:	4622      	mov	r2, r4
 80024be:	4630      	mov	r0, r6
 80024c0:	f7ff ff3f 	bl	8002342 <__multiply>
 80024c4:	4639      	mov	r1, r7
 80024c6:	4681      	mov	r9, r0
 80024c8:	4630      	mov	r0, r6
 80024ca:	f7ff fe91 	bl	80021f0 <_Bfree>
 80024ce:	464f      	mov	r7, r9
 80024d0:	106d      	asrs	r5, r5, #1
 80024d2:	d00b      	beq.n	80024ec <__pow5mult+0x90>
 80024d4:	6820      	ldr	r0, [r4, #0]
 80024d6:	b938      	cbnz	r0, 80024e8 <__pow5mult+0x8c>
 80024d8:	4622      	mov	r2, r4
 80024da:	4621      	mov	r1, r4
 80024dc:	4630      	mov	r0, r6
 80024de:	f7ff ff30 	bl	8002342 <__multiply>
 80024e2:	6020      	str	r0, [r4, #0]
 80024e4:	f8c0 8000 	str.w	r8, [r0]
 80024e8:	4604      	mov	r4, r0
 80024ea:	e7e4      	b.n	80024b6 <__pow5mult+0x5a>
 80024ec:	4638      	mov	r0, r7
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f2:	bf00      	nop
 80024f4:	080035a8 	.word	0x080035a8

080024f8 <__lshift>:
 80024f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024fc:	460c      	mov	r4, r1
 80024fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8002502:	6923      	ldr	r3, [r4, #16]
 8002504:	6849      	ldr	r1, [r1, #4]
 8002506:	eb0a 0903 	add.w	r9, sl, r3
 800250a:	68a3      	ldr	r3, [r4, #8]
 800250c:	4607      	mov	r7, r0
 800250e:	4616      	mov	r6, r2
 8002510:	f109 0501 	add.w	r5, r9, #1
 8002514:	42ab      	cmp	r3, r5
 8002516:	db31      	blt.n	800257c <__lshift+0x84>
 8002518:	4638      	mov	r0, r7
 800251a:	f7ff fe35 	bl	8002188 <_Balloc>
 800251e:	2200      	movs	r2, #0
 8002520:	4680      	mov	r8, r0
 8002522:	f100 0314 	add.w	r3, r0, #20
 8002526:	4611      	mov	r1, r2
 8002528:	4552      	cmp	r2, sl
 800252a:	db2a      	blt.n	8002582 <__lshift+0x8a>
 800252c:	6920      	ldr	r0, [r4, #16]
 800252e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002532:	f104 0114 	add.w	r1, r4, #20
 8002536:	f016 021f 	ands.w	r2, r6, #31
 800253a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800253e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8002542:	d022      	beq.n	800258a <__lshift+0x92>
 8002544:	f1c2 0c20 	rsb	ip, r2, #32
 8002548:	2000      	movs	r0, #0
 800254a:	680e      	ldr	r6, [r1, #0]
 800254c:	4096      	lsls	r6, r2
 800254e:	4330      	orrs	r0, r6
 8002550:	f843 0b04 	str.w	r0, [r3], #4
 8002554:	f851 0b04 	ldr.w	r0, [r1], #4
 8002558:	458e      	cmp	lr, r1
 800255a:	fa20 f00c 	lsr.w	r0, r0, ip
 800255e:	d8f4      	bhi.n	800254a <__lshift+0x52>
 8002560:	6018      	str	r0, [r3, #0]
 8002562:	b108      	cbz	r0, 8002568 <__lshift+0x70>
 8002564:	f109 0502 	add.w	r5, r9, #2
 8002568:	3d01      	subs	r5, #1
 800256a:	4638      	mov	r0, r7
 800256c:	f8c8 5010 	str.w	r5, [r8, #16]
 8002570:	4621      	mov	r1, r4
 8002572:	f7ff fe3d 	bl	80021f0 <_Bfree>
 8002576:	4640      	mov	r0, r8
 8002578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800257c:	3101      	adds	r1, #1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	e7c8      	b.n	8002514 <__lshift+0x1c>
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002586:	3201      	adds	r2, #1
 8002588:	e7ce      	b.n	8002528 <__lshift+0x30>
 800258a:	3b04      	subs	r3, #4
 800258c:	f851 2b04 	ldr.w	r2, [r1], #4
 8002590:	f843 2f04 	str.w	r2, [r3, #4]!
 8002594:	458e      	cmp	lr, r1
 8002596:	d8f9      	bhi.n	800258c <__lshift+0x94>
 8002598:	e7e6      	b.n	8002568 <__lshift+0x70>

0800259a <__mcmp>:
 800259a:	6903      	ldr	r3, [r0, #16]
 800259c:	690a      	ldr	r2, [r1, #16]
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	b530      	push	{r4, r5, lr}
 80025a2:	d10c      	bne.n	80025be <__mcmp+0x24>
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	3014      	adds	r0, #20
 80025a8:	3114      	adds	r1, #20
 80025aa:	1884      	adds	r4, r0, r2
 80025ac:	4411      	add	r1, r2
 80025ae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80025b2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80025b6:	4295      	cmp	r5, r2
 80025b8:	d003      	beq.n	80025c2 <__mcmp+0x28>
 80025ba:	d305      	bcc.n	80025c8 <__mcmp+0x2e>
 80025bc:	2301      	movs	r3, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	bd30      	pop	{r4, r5, pc}
 80025c2:	42a0      	cmp	r0, r4
 80025c4:	d3f3      	bcc.n	80025ae <__mcmp+0x14>
 80025c6:	e7fa      	b.n	80025be <__mcmp+0x24>
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e7f7      	b.n	80025be <__mcmp+0x24>

080025ce <__mdiff>:
 80025ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d2:	460d      	mov	r5, r1
 80025d4:	4607      	mov	r7, r0
 80025d6:	4611      	mov	r1, r2
 80025d8:	4628      	mov	r0, r5
 80025da:	4614      	mov	r4, r2
 80025dc:	f7ff ffdd 	bl	800259a <__mcmp>
 80025e0:	1e06      	subs	r6, r0, #0
 80025e2:	d108      	bne.n	80025f6 <__mdiff+0x28>
 80025e4:	4631      	mov	r1, r6
 80025e6:	4638      	mov	r0, r7
 80025e8:	f7ff fdce 	bl	8002188 <_Balloc>
 80025ec:	2301      	movs	r3, #1
 80025ee:	6103      	str	r3, [r0, #16]
 80025f0:	6146      	str	r6, [r0, #20]
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f6:	bfa4      	itt	ge
 80025f8:	4623      	movge	r3, r4
 80025fa:	462c      	movge	r4, r5
 80025fc:	4638      	mov	r0, r7
 80025fe:	6861      	ldr	r1, [r4, #4]
 8002600:	bfa6      	itte	ge
 8002602:	461d      	movge	r5, r3
 8002604:	2600      	movge	r6, #0
 8002606:	2601      	movlt	r6, #1
 8002608:	f7ff fdbe 	bl	8002188 <_Balloc>
 800260c:	692b      	ldr	r3, [r5, #16]
 800260e:	60c6      	str	r6, [r0, #12]
 8002610:	6926      	ldr	r6, [r4, #16]
 8002612:	f105 0914 	add.w	r9, r5, #20
 8002616:	f104 0214 	add.w	r2, r4, #20
 800261a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800261e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8002622:	f100 0514 	add.w	r5, r0, #20
 8002626:	f04f 0c00 	mov.w	ip, #0
 800262a:	f852 ab04 	ldr.w	sl, [r2], #4
 800262e:	f859 4b04 	ldr.w	r4, [r9], #4
 8002632:	fa1c f18a 	uxtah	r1, ip, sl
 8002636:	b2a3      	uxth	r3, r4
 8002638:	1ac9      	subs	r1, r1, r3
 800263a:	0c23      	lsrs	r3, r4, #16
 800263c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8002640:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8002644:	b289      	uxth	r1, r1
 8002646:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800264a:	45c8      	cmp	r8, r9
 800264c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002650:	4696      	mov	lr, r2
 8002652:	f845 3b04 	str.w	r3, [r5], #4
 8002656:	d8e8      	bhi.n	800262a <__mdiff+0x5c>
 8002658:	45be      	cmp	lr, r7
 800265a:	d305      	bcc.n	8002668 <__mdiff+0x9a>
 800265c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002660:	b18b      	cbz	r3, 8002686 <__mdiff+0xb8>
 8002662:	6106      	str	r6, [r0, #16]
 8002664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002668:	f85e 1b04 	ldr.w	r1, [lr], #4
 800266c:	fa1c f381 	uxtah	r3, ip, r1
 8002670:	141a      	asrs	r2, r3, #16
 8002672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8002676:	b29b      	uxth	r3, r3
 8002678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800267c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002680:	f845 3b04 	str.w	r3, [r5], #4
 8002684:	e7e8      	b.n	8002658 <__mdiff+0x8a>
 8002686:	3e01      	subs	r6, #1
 8002688:	e7e8      	b.n	800265c <__mdiff+0x8e>

0800268a <__d2b>:
 800268a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800268e:	460e      	mov	r6, r1
 8002690:	2101      	movs	r1, #1
 8002692:	ec59 8b10 	vmov	r8, r9, d0
 8002696:	4615      	mov	r5, r2
 8002698:	f7ff fd76 	bl	8002188 <_Balloc>
 800269c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80026a0:	4607      	mov	r7, r0
 80026a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80026a6:	bb34      	cbnz	r4, 80026f6 <__d2b+0x6c>
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f1b8 0f00 	cmp.w	r8, #0
 80026ae:	d027      	beq.n	8002700 <__d2b+0x76>
 80026b0:	a802      	add	r0, sp, #8
 80026b2:	f840 8d08 	str.w	r8, [r0, #-8]!
 80026b6:	f7ff fe0c 	bl	80022d2 <__lo0bits>
 80026ba:	9900      	ldr	r1, [sp, #0]
 80026bc:	b1f0      	cbz	r0, 80026fc <__d2b+0x72>
 80026be:	9a01      	ldr	r2, [sp, #4]
 80026c0:	f1c0 0320 	rsb	r3, r0, #32
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	430b      	orrs	r3, r1
 80026ca:	40c2      	lsrs	r2, r0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	9201      	str	r2, [sp, #4]
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2102      	movne	r1, #2
 80026da:	2101      	moveq	r1, #1
 80026dc:	6139      	str	r1, [r7, #16]
 80026de:	b1c4      	cbz	r4, 8002712 <__d2b+0x88>
 80026e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80026e4:	4404      	add	r4, r0
 80026e6:	6034      	str	r4, [r6, #0]
 80026e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80026ec:	6028      	str	r0, [r5, #0]
 80026ee:	4638      	mov	r0, r7
 80026f0:	b003      	add	sp, #12
 80026f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fa:	e7d5      	b.n	80026a8 <__d2b+0x1e>
 80026fc:	6179      	str	r1, [r7, #20]
 80026fe:	e7e7      	b.n	80026d0 <__d2b+0x46>
 8002700:	a801      	add	r0, sp, #4
 8002702:	f7ff fde6 	bl	80022d2 <__lo0bits>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	2101      	movs	r1, #1
 800270c:	6139      	str	r1, [r7, #16]
 800270e:	3020      	adds	r0, #32
 8002710:	e7e5      	b.n	80026de <__d2b+0x54>
 8002712:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8002716:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800271a:	6030      	str	r0, [r6, #0]
 800271c:	6918      	ldr	r0, [r3, #16]
 800271e:	f7ff fdb9 	bl	8002294 <__hi0bits>
 8002722:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8002726:	e7e1      	b.n	80026ec <__d2b+0x62>

08002728 <_mprec_log10>:
 8002728:	2817      	cmp	r0, #23
 800272a:	dc05      	bgt.n	8002738 <_mprec_log10+0x10>
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <_mprec_log10+0x24>)
 800272e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002732:	ed90 0b00 	vldr	d0, [r0]
 8002736:	4770      	bx	lr
 8002738:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800273c:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8002740:	3801      	subs	r0, #1
 8002742:	ee20 0b07 	vmul.f64	d0, d0, d7
 8002746:	d1fb      	bne.n	8002740 <_mprec_log10+0x18>
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	080034e0 	.word	0x080034e0

08002750 <_calloc_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	fb02 f401 	mul.w	r4, r2, r1
 8002756:	4621      	mov	r1, r4
 8002758:	f000 f808 	bl	800276c <_malloc_r>
 800275c:	4605      	mov	r5, r0
 800275e:	b118      	cbz	r0, 8002768 <_calloc_r+0x18>
 8002760:	4622      	mov	r2, r4
 8002762:	2100      	movs	r1, #0
 8002764:	f7ff fbd8 	bl	8001f18 <memset>
 8002768:	4628      	mov	r0, r5
 800276a:	bd38      	pop	{r3, r4, r5, pc}

0800276c <_malloc_r>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	1ccd      	adds	r5, r1, #3
 8002770:	f025 0503 	bic.w	r5, r5, #3
 8002774:	3508      	adds	r5, #8
 8002776:	2d0c      	cmp	r5, #12
 8002778:	bf38      	it	cc
 800277a:	250c      	movcc	r5, #12
 800277c:	2d00      	cmp	r5, #0
 800277e:	4606      	mov	r6, r0
 8002780:	db01      	blt.n	8002786 <_malloc_r+0x1a>
 8002782:	42a9      	cmp	r1, r5
 8002784:	d903      	bls.n	800278e <_malloc_r+0x22>
 8002786:	230c      	movs	r3, #12
 8002788:	6033      	str	r3, [r6, #0]
 800278a:	2000      	movs	r0, #0
 800278c:	bd70      	pop	{r4, r5, r6, pc}
 800278e:	f000 fe6e 	bl	800346e <__malloc_lock>
 8002792:	4a23      	ldr	r2, [pc, #140]	; (8002820 <_malloc_r+0xb4>)
 8002794:	6814      	ldr	r4, [r2, #0]
 8002796:	4621      	mov	r1, r4
 8002798:	b991      	cbnz	r1, 80027c0 <_malloc_r+0x54>
 800279a:	4c22      	ldr	r4, [pc, #136]	; (8002824 <_malloc_r+0xb8>)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	b91b      	cbnz	r3, 80027a8 <_malloc_r+0x3c>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f000 f841 	bl	8002828 <_sbrk_r>
 80027a6:	6020      	str	r0, [r4, #0]
 80027a8:	4629      	mov	r1, r5
 80027aa:	4630      	mov	r0, r6
 80027ac:	f000 f83c 	bl	8002828 <_sbrk_r>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	d126      	bne.n	8002802 <_malloc_r+0x96>
 80027b4:	230c      	movs	r3, #12
 80027b6:	6033      	str	r3, [r6, #0]
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 fe59 	bl	8003470 <__malloc_unlock>
 80027be:	e7e4      	b.n	800278a <_malloc_r+0x1e>
 80027c0:	680b      	ldr	r3, [r1, #0]
 80027c2:	1b5b      	subs	r3, r3, r5
 80027c4:	d41a      	bmi.n	80027fc <_malloc_r+0x90>
 80027c6:	2b0b      	cmp	r3, #11
 80027c8:	d90f      	bls.n	80027ea <_malloc_r+0x7e>
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	50cd      	str	r5, [r1, r3]
 80027ce:	18cc      	adds	r4, r1, r3
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 fe4d 	bl	8003470 <__malloc_unlock>
 80027d6:	f104 000b 	add.w	r0, r4, #11
 80027da:	1d23      	adds	r3, r4, #4
 80027dc:	f020 0007 	bic.w	r0, r0, #7
 80027e0:	1ac3      	subs	r3, r0, r3
 80027e2:	d01b      	beq.n	800281c <_malloc_r+0xb0>
 80027e4:	425a      	negs	r2, r3
 80027e6:	50e2      	str	r2, [r4, r3]
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
 80027ea:	428c      	cmp	r4, r1
 80027ec:	bf0d      	iteet	eq
 80027ee:	6863      	ldreq	r3, [r4, #4]
 80027f0:	684b      	ldrne	r3, [r1, #4]
 80027f2:	6063      	strne	r3, [r4, #4]
 80027f4:	6013      	streq	r3, [r2, #0]
 80027f6:	bf18      	it	ne
 80027f8:	460c      	movne	r4, r1
 80027fa:	e7e9      	b.n	80027d0 <_malloc_r+0x64>
 80027fc:	460c      	mov	r4, r1
 80027fe:	6849      	ldr	r1, [r1, #4]
 8002800:	e7ca      	b.n	8002798 <_malloc_r+0x2c>
 8002802:	1cc4      	adds	r4, r0, #3
 8002804:	f024 0403 	bic.w	r4, r4, #3
 8002808:	42a0      	cmp	r0, r4
 800280a:	d005      	beq.n	8002818 <_malloc_r+0xac>
 800280c:	1a21      	subs	r1, r4, r0
 800280e:	4630      	mov	r0, r6
 8002810:	f000 f80a 	bl	8002828 <_sbrk_r>
 8002814:	3001      	adds	r0, #1
 8002816:	d0cd      	beq.n	80027b4 <_malloc_r+0x48>
 8002818:	6025      	str	r5, [r4, #0]
 800281a:	e7d9      	b.n	80027d0 <_malloc_r+0x64>
 800281c:	bd70      	pop	{r4, r5, r6, pc}
 800281e:	bf00      	nop
 8002820:	20000090 	.word	0x20000090
 8002824:	20000094 	.word	0x20000094

08002828 <_sbrk_r>:
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4c06      	ldr	r4, [pc, #24]	; (8002844 <_sbrk_r+0x1c>)
 800282c:	2300      	movs	r3, #0
 800282e:	4605      	mov	r5, r0
 8002830:	4608      	mov	r0, r1
 8002832:	6023      	str	r3, [r4, #0]
 8002834:	f7ff fabe 	bl	8001db4 <_sbrk>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d102      	bne.n	8002842 <_sbrk_r+0x1a>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	b103      	cbz	r3, 8002842 <_sbrk_r+0x1a>
 8002840:	602b      	str	r3, [r5, #0]
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	20000188 	.word	0x20000188

08002848 <strcpy>:
 8002848:	4603      	mov	r3, r0
 800284a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800284e:	f803 2b01 	strb.w	r2, [r3], #1
 8002852:	2a00      	cmp	r2, #0
 8002854:	d1f9      	bne.n	800284a <strcpy+0x2>
 8002856:	4770      	bx	lr

08002858 <quorem>:
 8002858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285c:	6903      	ldr	r3, [r0, #16]
 800285e:	690c      	ldr	r4, [r1, #16]
 8002860:	429c      	cmp	r4, r3
 8002862:	4680      	mov	r8, r0
 8002864:	f300 8082 	bgt.w	800296c <quorem+0x114>
 8002868:	3c01      	subs	r4, #1
 800286a:	f101 0714 	add.w	r7, r1, #20
 800286e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002872:	f100 0614 	add.w	r6, r0, #20
 8002876:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800287a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800287e:	eb06 030e 	add.w	r3, r6, lr
 8002882:	3501      	adds	r5, #1
 8002884:	eb07 090e 	add.w	r9, r7, lr
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	fbb0 f5f5 	udiv	r5, r0, r5
 800288e:	b395      	cbz	r5, 80028f6 <quorem+0x9e>
 8002890:	f04f 0a00 	mov.w	sl, #0
 8002894:	4638      	mov	r0, r7
 8002896:	46b4      	mov	ip, r6
 8002898:	46d3      	mov	fp, sl
 800289a:	f850 2b04 	ldr.w	r2, [r0], #4
 800289e:	b293      	uxth	r3, r2
 80028a0:	fb05 a303 	mla	r3, r5, r3, sl
 80028a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	ebab 0303 	sub.w	r3, fp, r3
 80028ae:	0c12      	lsrs	r2, r2, #16
 80028b0:	f8bc b000 	ldrh.w	fp, [ip]
 80028b4:	fb05 a202 	mla	r2, r5, r2, sl
 80028b8:	fa13 f38b 	uxtah	r3, r3, fp
 80028bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80028c0:	fa1f fb82 	uxth.w	fp, r2
 80028c4:	f8dc 2000 	ldr.w	r2, [ip]
 80028c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80028cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028d6:	4581      	cmp	r9, r0
 80028d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80028dc:	f84c 3b04 	str.w	r3, [ip], #4
 80028e0:	d2db      	bcs.n	800289a <quorem+0x42>
 80028e2:	f856 300e 	ldr.w	r3, [r6, lr]
 80028e6:	b933      	cbnz	r3, 80028f6 <quorem+0x9e>
 80028e8:	9b01      	ldr	r3, [sp, #4]
 80028ea:	3b04      	subs	r3, #4
 80028ec:	429e      	cmp	r6, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	d330      	bcc.n	8002954 <quorem+0xfc>
 80028f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80028f6:	4640      	mov	r0, r8
 80028f8:	f7ff fe4f 	bl	800259a <__mcmp>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	db25      	blt.n	800294c <quorem+0xf4>
 8002900:	3501      	adds	r5, #1
 8002902:	4630      	mov	r0, r6
 8002904:	f04f 0e00 	mov.w	lr, #0
 8002908:	f857 2b04 	ldr.w	r2, [r7], #4
 800290c:	f8d0 c000 	ldr.w	ip, [r0]
 8002910:	b293      	uxth	r3, r2
 8002912:	ebae 0303 	sub.w	r3, lr, r3
 8002916:	0c12      	lsrs	r2, r2, #16
 8002918:	fa13 f38c 	uxtah	r3, r3, ip
 800291c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002924:	b29b      	uxth	r3, r3
 8002926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800292a:	45b9      	cmp	r9, r7
 800292c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002930:	f840 3b04 	str.w	r3, [r0], #4
 8002934:	d2e8      	bcs.n	8002908 <quorem+0xb0>
 8002936:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800293a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800293e:	b92a      	cbnz	r2, 800294c <quorem+0xf4>
 8002940:	3b04      	subs	r3, #4
 8002942:	429e      	cmp	r6, r3
 8002944:	461a      	mov	r2, r3
 8002946:	d30b      	bcc.n	8002960 <quorem+0x108>
 8002948:	f8c8 4010 	str.w	r4, [r8, #16]
 800294c:	4628      	mov	r0, r5
 800294e:	b003      	add	sp, #12
 8002950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	3b04      	subs	r3, #4
 8002958:	2a00      	cmp	r2, #0
 800295a:	d1ca      	bne.n	80028f2 <quorem+0x9a>
 800295c:	3c01      	subs	r4, #1
 800295e:	e7c5      	b.n	80028ec <quorem+0x94>
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	3b04      	subs	r3, #4
 8002964:	2a00      	cmp	r2, #0
 8002966:	d1ef      	bne.n	8002948 <quorem+0xf0>
 8002968:	3c01      	subs	r4, #1
 800296a:	e7ea      	b.n	8002942 <quorem+0xea>
 800296c:	2000      	movs	r0, #0
 800296e:	e7ee      	b.n	800294e <quorem+0xf6>

08002970 <_dtoa_r>:
 8002970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	ec57 6b10 	vmov	r6, r7, d0
 8002978:	b095      	sub	sp, #84	; 0x54
 800297a:	e9cd 6700 	strd	r6, r7, [sp]
 800297e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002980:	9107      	str	r1, [sp, #28]
 8002982:	4605      	mov	r5, r0
 8002984:	920b      	str	r2, [sp, #44]	; 0x2c
 8002986:	9310      	str	r3, [sp, #64]	; 0x40
 8002988:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800298a:	b93e      	cbnz	r6, 800299c <_dtoa_r+0x2c>
 800298c:	2010      	movs	r0, #16
 800298e:	f000 fd5b 	bl	8003448 <malloc>
 8002992:	6268      	str	r0, [r5, #36]	; 0x24
 8002994:	6046      	str	r6, [r0, #4]
 8002996:	6086      	str	r6, [r0, #8]
 8002998:	6006      	str	r6, [r0, #0]
 800299a:	60c6      	str	r6, [r0, #12]
 800299c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	b151      	cbz	r1, 80029b8 <_dtoa_r+0x48>
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	604a      	str	r2, [r1, #4]
 80029a6:	2301      	movs	r3, #1
 80029a8:	4093      	lsls	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
 80029ac:	4628      	mov	r0, r5
 80029ae:	f7ff fc1f 	bl	80021f0 <_Bfree>
 80029b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfbf      	itttt	lt
 80029be:	2301      	movlt	r3, #1
 80029c0:	6023      	strlt	r3, [r4, #0]
 80029c2:	9b01      	ldrlt	r3, [sp, #4]
 80029c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80029c8:	bfb2      	itee	lt
 80029ca:	9301      	strlt	r3, [sp, #4]
 80029cc:	2300      	movge	r3, #0
 80029ce:	6023      	strge	r3, [r4, #0]
 80029d0:	9c01      	ldr	r4, [sp, #4]
 80029d2:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <_dtoa_r+0x230>)
 80029d4:	43a3      	bics	r3, r4
 80029d6:	d118      	bne.n	8002a0a <_dtoa_r+0x9a>
 80029d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80029da:	f242 730f 	movw	r3, #9999	; 0x270f
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	9b00      	ldr	r3, [sp, #0]
 80029e2:	b923      	cbnz	r3, 80029ee <_dtoa_r+0x7e>
 80029e4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80029e8:	2c00      	cmp	r4, #0
 80029ea:	f000 8518 	beq.w	800341e <_dtoa_r+0xaae>
 80029ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80029f0:	b93b      	cbnz	r3, 8002a02 <_dtoa_r+0x92>
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <_dtoa_r+0x234>)
 80029f4:	e01d      	b.n	8002a32 <_dtoa_r+0xc2>
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <_dtoa_r+0x238>)
 80029f8:	9304      	str	r3, [sp, #16]
 80029fa:	3308      	adds	r3, #8
 80029fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e2a6      	b.n	8002f50 <_dtoa_r+0x5e0>
 8002a02:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <_dtoa_r+0x234>)
 8002a04:	9304      	str	r3, [sp, #16]
 8002a06:	3303      	adds	r3, #3
 8002a08:	e7f8      	b.n	80029fc <_dtoa_r+0x8c>
 8002a0a:	ed9d 7b00 	vldr	d7, [sp]
 8002a0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a1a:	d10c      	bne.n	8002a36 <_dtoa_r+0xc6>
 8002a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002a1e:	2301      	movs	r3, #1
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 84f7 	beq.w	8003418 <_dtoa_r+0xaa8>
 8002a2a:	4b60      	ldr	r3, [pc, #384]	; (8002bac <_dtoa_r+0x23c>)
 8002a2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	9304      	str	r3, [sp, #16]
 8002a34:	e28c      	b.n	8002f50 <_dtoa_r+0x5e0>
 8002a36:	a913      	add	r1, sp, #76	; 0x4c
 8002a38:	aa12      	add	r2, sp, #72	; 0x48
 8002a3a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f7ff fe23 	bl	800268a <__d2b>
 8002a44:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002a48:	9003      	str	r0, [sp, #12]
 8002a4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d046      	beq.n	8002ade <_dtoa_r+0x16e>
 8002a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a54:	f3c3 0413 	ubfx	r4, r3, #0, #20
 8002a58:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002a5c:	f2a1 3aff 	subw	sl, r1, #1023	; 0x3ff
 8002a60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002a64:	2100      	movs	r1, #0
 8002a66:	ee07 aa90 	vmov	s15, sl
 8002a6a:	ec43 2b16 	vmov	d6, r2, r3
 8002a6e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002a72:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8002b88 <_dtoa_r+0x218>
 8002a76:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002a7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a7e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002b90 <_dtoa_r+0x220>
 8002a82:	eea7 6b04 	vfma.f64	d6, d7, d4
 8002a86:	eeb0 7b46 	vmov.f64	d7, d6
 8002a8a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8002b98 <_dtoa_r+0x228>
 8002a8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002a92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002a96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	9111      	str	r1, [sp, #68]	; 0x44
 8002aa0:	ee16 ba90 	vmov	fp, s13
 8002aa4:	d508      	bpl.n	8002ab8 <_dtoa_r+0x148>
 8002aa6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002aaa:	eeb4 7b46 	vcmp.f64	d7, d6
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	bf18      	it	ne
 8002ab4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002ab8:	f1bb 0f16 	cmp.w	fp, #22
 8002abc:	d831      	bhi.n	8002b22 <_dtoa_r+0x1b2>
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <_dtoa_r+0x240>)
 8002ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002ac4:	ed93 7b00 	vldr	d7, [r3]
 8002ac8:	ed9d 6b00 	vldr	d6, [sp]
 8002acc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	dd01      	ble.n	8002ada <_dtoa_r+0x16a>
 8002ad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002ada:	2300      	movs	r3, #0
 8002adc:	e022      	b.n	8002b24 <_dtoa_r+0x1b4>
 8002ade:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002ae0:	4401      	add	r1, r0
 8002ae2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	dd15      	ble.n	8002b16 <_dtoa_r+0x1a6>
 8002aea:	9e00      	ldr	r6, [sp, #0]
 8002aec:	f201 4212 	addw	r2, r1, #1042	; 0x412
 8002af0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002af4:	fa26 f202 	lsr.w	r2, r6, r2
 8002af8:	fa04 f303 	lsl.w	r3, r4, r3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	ee07 2a90 	vmov	s15, r2
 8002b02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002b06:	f101 3aff 	add.w	sl, r1, #4294967295
 8002b0a:	ec53 2b17 	vmov	r2, r3, d7
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8002b14:	e7a7      	b.n	8002a66 <_dtoa_r+0xf6>
 8002b16:	f1c3 0220 	rsb	r2, r3, #32
 8002b1a:	9b00      	ldr	r3, [sp, #0]
 8002b1c:	fa03 f202 	lsl.w	r2, r3, r2
 8002b20:	e7ed      	b.n	8002afe <_dtoa_r+0x18e>
 8002b22:	2301      	movs	r3, #1
 8002b24:	eba0 0a0a 	sub.w	sl, r0, sl
 8002b28:	f1ba 0701 	subs.w	r7, sl, #1
 8002b2c:	bf46      	itte	mi
 8002b2e:	f1ca 0a01 	rsbmi	sl, sl, #1
 8002b32:	2700      	movmi	r7, #0
 8002b34:	f04f 0a00 	movpl.w	sl, #0
 8002b38:	f1bb 0f00 	cmp.w	fp, #0
 8002b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8002b3e:	bfbc      	itt	lt
 8002b40:	2300      	movlt	r3, #0
 8002b42:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002b44:	9b07      	ldr	r3, [sp, #28]
 8002b46:	bfa3      	ittte	ge
 8002b48:	f8cd b030 	strge.w	fp, [sp, #48]	; 0x30
 8002b4c:	445f      	addge	r7, fp
 8002b4e:	f04f 0800 	movge.w	r8, #0
 8002b52:	ebaa 0a0b 	sublt.w	sl, sl, fp
 8002b56:	bfb8      	it	lt
 8002b58:	f1cb 0800 	rsblt	r8, fp, #0
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	f200 80f8 	bhi.w	8002d52 <_dtoa_r+0x3e2>
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	bfc4      	itt	gt
 8002b66:	3b04      	subgt	r3, #4
 8002b68:	9307      	strgt	r3, [sp, #28]
 8002b6a:	9b07      	ldr	r3, [sp, #28]
 8002b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8002b70:	bfcc      	ite	gt
 8002b72:	2400      	movgt	r4, #0
 8002b74:	2401      	movle	r4, #1
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	f200 80f7 	bhi.w	8002d6a <_dtoa_r+0x3fa>
 8002b7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b80:	00e700e5 	.word	0x00e700e5
 8002b84:	00d9001a 	.word	0x00d9001a
 8002b88:	636f4361 	.word	0x636f4361
 8002b8c:	3fd287a7 	.word	0x3fd287a7
 8002b90:	8b60c8b3 	.word	0x8b60c8b3
 8002b94:	3fc68a28 	.word	0x3fc68a28
 8002b98:	509f79fb 	.word	0x509f79fb
 8002b9c:	3fd34413 	.word	0x3fd34413
 8002ba0:	7ff00000 	.word	0x7ff00000
 8002ba4:	080035bd 	.word	0x080035bd
 8002ba8:	080035b4 	.word	0x080035b4
 8002bac:	080035c2 	.word	0x080035c2
 8002bb0:	080034e0 	.word	0x080034e0
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8002bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f340 80d8 	ble.w	8002d70 <_dtoa_r+0x400>
 8002bc0:	9306      	str	r3, [sp, #24]
 8002bc2:	4699      	mov	r9, r3
 8002bc4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	6072      	str	r2, [r6, #4]
 8002bca:	2104      	movs	r1, #4
 8002bcc:	f101 0214 	add.w	r2, r1, #20
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f240 80d2 	bls.w	8002d7a <_dtoa_r+0x40a>
 8002bd6:	6871      	ldr	r1, [r6, #4]
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f7ff fad5 	bl	8002188 <_Balloc>
 8002bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002be0:	6030      	str	r0, [r6, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	9304      	str	r3, [sp, #16]
 8002be6:	f1b9 0f0e 	cmp.w	r9, #14
 8002bea:	d875      	bhi.n	8002cd8 <_dtoa_r+0x368>
 8002bec:	2c00      	cmp	r4, #0
 8002bee:	d073      	beq.n	8002cd8 <_dtoa_r+0x368>
 8002bf0:	ed9d 7b00 	vldr	d7, [sp]
 8002bf4:	f1bb 0f00 	cmp.w	fp, #0
 8002bf8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002bfc:	f340 80ce 	ble.w	8002d9c <_dtoa_r+0x42c>
 8002c00:	4ab5      	ldr	r2, [pc, #724]	; (8002ed8 <_dtoa_r+0x568>)
 8002c02:	f00b 030f 	and.w	r3, fp, #15
 8002c06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c0a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8002c0e:	ed93 7b00 	vldr	d7, [r3]
 8002c12:	06d3      	lsls	r3, r2, #27
 8002c14:	f140 80b6 	bpl.w	8002d84 <_dtoa_r+0x414>
 8002c18:	4bb0      	ldr	r3, [pc, #704]	; (8002edc <_dtoa_r+0x56c>)
 8002c1a:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
 8002c1e:	ed93 6b08 	vldr	d6, [r3, #32]
 8002c22:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8002c26:	ed8d 5b00 	vstr	d5, [sp]
 8002c2a:	f002 020f 	and.w	r2, r2, #15
 8002c2e:	2303      	movs	r3, #3
 8002c30:	49aa      	ldr	r1, [pc, #680]	; (8002edc <_dtoa_r+0x56c>)
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	f040 80a8 	bne.w	8002d88 <_dtoa_r+0x418>
 8002c38:	ed9d 5b00 	vldr	d5, [sp]
 8002c3c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002c40:	ed8d 6b00 	vstr	d6, [sp]
 8002c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	f000 80da 	beq.w	8002e00 <_dtoa_r+0x490>
 8002c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002c50:	ed9d 7b00 	vldr	d7, [sp]
 8002c54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	f140 80d0 	bpl.w	8002e00 <_dtoa_r+0x490>
 8002c60:	f1b9 0f00 	cmp.w	r9, #0
 8002c64:	f000 80cc 	beq.w	8002e00 <_dtoa_r+0x490>
 8002c68:	9a06      	ldr	r2, [sp, #24]
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	dd30      	ble.n	8002cd0 <_dtoa_r+0x360>
 8002c6e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c76:	ed8d 7b00 	vstr	d7, [sp]
 8002c7a:	9c06      	ldr	r4, [sp, #24]
 8002c7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002c80:	3301      	adds	r3, #1
 8002c82:	ed9d 6b00 	vldr	d6, [sp]
 8002c86:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c92:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002c96:	ed8d 5b00 	vstr	d5, [sp]
 8002c9a:	9b01      	ldr	r3, [sp, #4]
 8002c9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2c00      	cmp	r4, #0
 8002ca4:	f040 80af 	bne.w	8002e06 <_dtoa_r+0x496>
 8002ca8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002cac:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002cb0:	ed9d 7b00 	vldr	d7, [sp]
 8002cb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	f300 8300 	bgt.w	80032c0 <_dtoa_r+0x950>
 8002cc0:	eeb1 7b47 	vneg.f64	d7, d7
 8002cc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	f100 82f6 	bmi.w	80032bc <_dtoa_r+0x94c>
 8002cd0:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8002cd4:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002cd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f2c0 8158 	blt.w	8002f90 <_dtoa_r+0x620>
 8002ce0:	f1bb 0f0e 	cmp.w	fp, #14
 8002ce4:	f300 8154 	bgt.w	8002f90 <_dtoa_r+0x620>
 8002ce8:	4b7b      	ldr	r3, [pc, #492]	; (8002ed8 <_dtoa_r+0x568>)
 8002cea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002cee:	ed93 6b00 	vldr	d6, [r3]
 8002cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f280 80f3 	bge.w	8002ee0 <_dtoa_r+0x570>
 8002cfa:	f1b9 0f00 	cmp.w	r9, #0
 8002cfe:	f300 80ef 	bgt.w	8002ee0 <_dtoa_r+0x570>
 8002d02:	f040 82da 	bne.w	80032ba <_dtoa_r+0x94a>
 8002d06:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002d0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d0e:	ed9d 7b00 	vldr	d7, [sp]
 8002d12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	464c      	mov	r4, r9
 8002d1c:	464e      	mov	r6, r9
 8002d1e:	f280 82ac 	bge.w	800327a <_dtoa_r+0x90a>
 8002d22:	9b04      	ldr	r3, [sp, #16]
 8002d24:	9904      	ldr	r1, [sp, #16]
 8002d26:	2231      	movs	r2, #49	; 0x31
 8002d28:	3301      	adds	r3, #1
 8002d2a:	700a      	strb	r2, [r1, #0]
 8002d2c:	f10b 0b01 	add.w	fp, fp, #1
 8002d30:	e2a7      	b.n	8003282 <_dtoa_r+0x912>
 8002d32:	2301      	movs	r3, #1
 8002d34:	930a      	str	r3, [sp, #40]	; 0x28
 8002d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d38:	445b      	add	r3, fp
 8002d3a:	f103 0901 	add.w	r9, r3, #1
 8002d3e:	9306      	str	r3, [sp, #24]
 8002d40:	464b      	mov	r3, r9
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bfb8      	it	lt
 8002d46:	2301      	movlt	r3, #1
 8002d48:	e73c      	b.n	8002bc4 <_dtoa_r+0x254>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e733      	b.n	8002bb6 <_dtoa_r+0x246>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e7f0      	b.n	8002d34 <_dtoa_r+0x3c4>
 8002d52:	2401      	movs	r4, #1
 8002d54:	2300      	movs	r3, #0
 8002d56:	9307      	str	r3, [sp, #28]
 8002d58:	940a      	str	r4, [sp, #40]	; 0x28
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	9306      	str	r3, [sp, #24]
 8002d60:	4699      	mov	r9, r3
 8002d62:	2200      	movs	r2, #0
 8002d64:	2312      	movs	r3, #18
 8002d66:	920b      	str	r2, [sp, #44]	; 0x2c
 8002d68:	e72c      	b.n	8002bc4 <_dtoa_r+0x254>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8002d6e:	e7f4      	b.n	8002d5a <_dtoa_r+0x3ea>
 8002d70:	2301      	movs	r3, #1
 8002d72:	9306      	str	r3, [sp, #24]
 8002d74:	4699      	mov	r9, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	e7f5      	b.n	8002d66 <_dtoa_r+0x3f6>
 8002d7a:	6872      	ldr	r2, [r6, #4]
 8002d7c:	3201      	adds	r2, #1
 8002d7e:	6072      	str	r2, [r6, #4]
 8002d80:	0049      	lsls	r1, r1, #1
 8002d82:	e723      	b.n	8002bcc <_dtoa_r+0x25c>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e753      	b.n	8002c30 <_dtoa_r+0x2c0>
 8002d88:	07d6      	lsls	r6, r2, #31
 8002d8a:	d504      	bpl.n	8002d96 <_dtoa_r+0x426>
 8002d8c:	ed91 6b00 	vldr	d6, [r1]
 8002d90:	3301      	adds	r3, #1
 8002d92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002d96:	1052      	asrs	r2, r2, #1
 8002d98:	3108      	adds	r1, #8
 8002d9a:	e74a      	b.n	8002c32 <_dtoa_r+0x2c2>
 8002d9c:	d02e      	beq.n	8002dfc <_dtoa_r+0x48c>
 8002d9e:	f1cb 0200 	rsb	r2, fp, #0
 8002da2:	4b4d      	ldr	r3, [pc, #308]	; (8002ed8 <_dtoa_r+0x568>)
 8002da4:	f002 010f 	and.w	r1, r2, #15
 8002da8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002dac:	ed93 7b00 	vldr	d7, [r3]
 8002db0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8002db4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002db8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002dbc:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8002dc0:	4946      	ldr	r1, [pc, #280]	; (8002edc <_dtoa_r+0x56c>)
 8002dc2:	e88d 0018 	stmia.w	sp, {r3, r4}
 8002dc6:	1112      	asrs	r2, r2, #4
 8002dc8:	2000      	movs	r0, #0
 8002dca:	2302      	movs	r3, #2
 8002dcc:	b93a      	cbnz	r2, 8002dde <_dtoa_r+0x46e>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	f43f af38 	beq.w	8002c44 <_dtoa_r+0x2d4>
 8002dd4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8002dd8:	e88d 0006 	stmia.w	sp, {r1, r2}
 8002ddc:	e732      	b.n	8002c44 <_dtoa_r+0x2d4>
 8002dde:	07d4      	lsls	r4, r2, #31
 8002de0:	d509      	bpl.n	8002df6 <_dtoa_r+0x486>
 8002de2:	ed9d 6b08 	vldr	d6, [sp, #32]
 8002de6:	ed91 7b00 	vldr	d7, [r1]
 8002dea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002dee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002df2:	3301      	adds	r3, #1
 8002df4:	2001      	movs	r0, #1
 8002df6:	1052      	asrs	r2, r2, #1
 8002df8:	3108      	adds	r1, #8
 8002dfa:	e7e7      	b.n	8002dcc <_dtoa_r+0x45c>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e721      	b.n	8002c44 <_dtoa_r+0x2d4>
 8002e00:	465a      	mov	r2, fp
 8002e02:	464c      	mov	r4, r9
 8002e04:	e73d      	b.n	8002c82 <_dtoa_r+0x312>
 8002e06:	9804      	ldr	r0, [sp, #16]
 8002e08:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <_dtoa_r+0x568>)
 8002e0a:	1e61      	subs	r1, r4, #1
 8002e0c:	4404      	add	r4, r0
 8002e0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002e10:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002e14:	ed93 5b00 	vldr	d5, [r3]
 8002e18:	b358      	cbz	r0, 8002e72 <_dtoa_r+0x502>
 8002e1a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002e1e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002e22:	ed9d 5b00 	vldr	d5, [sp]
 8002e26:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002e2a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002e2e:	9b04      	ldr	r3, [sp, #16]
 8002e30:	ee37 7b45 	vsub.f64	d7, d7, d5
 8002e34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002e38:	ee14 1a90 	vmov	r1, s9
 8002e3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8002e40:	3130      	adds	r1, #48	; 0x30
 8002e42:	ee36 6b45 	vsub.f64	d6, d6, d5
 8002e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	d439      	bmi.n	8002ec8 <_dtoa_r+0x558>
 8002e54:	ee32 5b46 	vsub.f64	d5, d2, d6
 8002e58:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	d47b      	bmi.n	8002f5a <_dtoa_r+0x5ea>
 8002e62:	42a3      	cmp	r3, r4
 8002e64:	f43f af34 	beq.w	8002cd0 <_dtoa_r+0x360>
 8002e68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8002e6c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002e70:	e7e0      	b.n	8002e34 <_dtoa_r+0x4c4>
 8002e72:	ed9d 7b00 	vldr	d7, [sp]
 8002e76:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002e7a:	9b04      	ldr	r3, [sp, #16]
 8002e7c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002e80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8002e84:	ee14 1a90 	vmov	r1, s9
 8002e88:	3130      	adds	r1, #48	; 0x30
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	429c      	cmp	r4, r3
 8002e90:	eeb8 7be4 	vcvt.f64.s32	d7, s9
 8002e94:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002e98:	d11a      	bne.n	8002ed0 <_dtoa_r+0x560>
 8002e9a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8002e9e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8002ea2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	dc56      	bgt.n	8002f5a <_dtoa_r+0x5ea>
 8002eac:	ee37 5b45 	vsub.f64	d5, d7, d5
 8002eb0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	f57f af0a 	bpl.w	8002cd0 <_dtoa_r+0x360>
 8002ebc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002ec0:	2930      	cmp	r1, #48	; 0x30
 8002ec2:	f103 30ff 	add.w	r0, r3, #4294967295
 8002ec6:	d001      	beq.n	8002ecc <_dtoa_r+0x55c>
 8002ec8:	4693      	mov	fp, r2
 8002eca:	e031      	b.n	8002f30 <_dtoa_r+0x5c0>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	e7f5      	b.n	8002ebc <_dtoa_r+0x54c>
 8002ed0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8002ed4:	e7d4      	b.n	8002e80 <_dtoa_r+0x510>
 8002ed6:	bf00      	nop
 8002ed8:	080034e0 	.word	0x080034e0
 8002edc:	080034b8 	.word	0x080034b8
 8002ee0:	ed9d 7b00 	vldr	d7, [sp]
 8002ee4:	eeb1 3b46 	vneg.f64	d3, d6
 8002ee8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8002eec:	9b04      	ldr	r3, [sp, #16]
 8002eee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002ef2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8002ef6:	ee15 2a10 	vmov	r2, s10
 8002efa:	3230      	adds	r2, #48	; 0x30
 8002efc:	f803 2b01 	strb.w	r2, [r3], #1
 8002f00:	9a04      	ldr	r2, [sp, #16]
 8002f02:	1a9a      	subs	r2, r3, r2
 8002f04:	4591      	cmp	r9, r2
 8002f06:	eeb8 2bc5 	vcvt.f64.s32	d2, s10
 8002f0a:	eea3 7b02 	vfma.f64	d7, d3, d2
 8002f0e:	d137      	bne.n	8002f80 <_dtoa_r+0x610>
 8002f10:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002f14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d41c      	bmi.n	8002f58 <_dtoa_r+0x5e8>
 8002f1e:	eeb4 6b47 	vcmp.f64	d6, d7
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d103      	bne.n	8002f30 <_dtoa_r+0x5c0>
 8002f28:	ee15 2a10 	vmov	r2, s10
 8002f2c:	07d2      	lsls	r2, r2, #31
 8002f2e:	d413      	bmi.n	8002f58 <_dtoa_r+0x5e8>
 8002f30:	9903      	ldr	r1, [sp, #12]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4628      	mov	r0, r5
 8002f36:	f7ff f95b 	bl	80021f0 <_Bfree>
 8002f3a:	9b00      	ldr	r3, [sp, #0]
 8002f3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	f10b 0201 	add.w	r2, fp, #1
 8002f46:	600a      	str	r2, [r1, #0]
 8002f48:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	f47f ad57 	bne.w	80029fe <_dtoa_r+0x8e>
 8002f50:	9804      	ldr	r0, [sp, #16]
 8002f52:	b015      	add	sp, #84	; 0x54
 8002f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f58:	465a      	mov	r2, fp
 8002f5a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002f5e:	2839      	cmp	r0, #57	; 0x39
 8002f60:	f103 31ff 	add.w	r1, r3, #4294967295
 8002f64:	d106      	bne.n	8002f74 <_dtoa_r+0x604>
 8002f66:	9804      	ldr	r0, [sp, #16]
 8002f68:	4288      	cmp	r0, r1
 8002f6a:	d107      	bne.n	8002f7c <_dtoa_r+0x60c>
 8002f6c:	2130      	movs	r1, #48	; 0x30
 8002f6e:	7001      	strb	r1, [r0, #0]
 8002f70:	3201      	adds	r2, #1
 8002f72:	4601      	mov	r1, r0
 8002f74:	7808      	ldrb	r0, [r1, #0]
 8002f76:	3001      	adds	r0, #1
 8002f78:	7008      	strb	r0, [r1, #0]
 8002f7a:	e7a5      	b.n	8002ec8 <_dtoa_r+0x558>
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	e7ec      	b.n	8002f5a <_dtoa_r+0x5ea>
 8002f80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8002f84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d1af      	bne.n	8002eee <_dtoa_r+0x57e>
 8002f8e:	e7cf      	b.n	8002f30 <_dtoa_r+0x5c0>
 8002f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	f000 8129 	beq.w	80031ea <_dtoa_r+0x87a>
 8002f98:	9a07      	ldr	r2, [sp, #28]
 8002f9a:	2a01      	cmp	r2, #1
 8002f9c:	f300 810b 	bgt.w	80031b6 <_dtoa_r+0x846>
 8002fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	f000 8103 	beq.w	80031ae <_dtoa_r+0x83e>
 8002fa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002fac:	4644      	mov	r4, r8
 8002fae:	f8cd a020 	str.w	sl, [sp, #32]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	449a      	add	sl, r3
 8002fb8:	441f      	add	r7, r3
 8002fba:	f7ff f9b9 	bl	8002330 <__i2b>
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	9b08      	ldr	r3, [sp, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	dd0a      	ble.n	8002fdc <_dtoa_r+0x66c>
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	dd08      	ble.n	8002fdc <_dtoa_r+0x66c>
 8002fca:	42bb      	cmp	r3, r7
 8002fcc:	9a08      	ldr	r2, [sp, #32]
 8002fce:	bfa8      	it	ge
 8002fd0:	463b      	movge	r3, r7
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	ebaa 0a03 	sub.w	sl, sl, r3
 8002fd8:	9208      	str	r2, [sp, #32]
 8002fda:	1aff      	subs	r7, r7, r3
 8002fdc:	f1b8 0f00 	cmp.w	r8, #0
 8002fe0:	d01f      	beq.n	8003022 <_dtoa_r+0x6b2>
 8002fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8105 	beq.w	80031f4 <_dtoa_r+0x884>
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	dd11      	ble.n	8003012 <_dtoa_r+0x6a2>
 8002fee:	4631      	mov	r1, r6
 8002ff0:	4622      	mov	r2, r4
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f7ff fa32 	bl	800245c <__pow5mult>
 8002ff8:	9a03      	ldr	r2, [sp, #12]
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	4606      	mov	r6, r0
 8002ffe:	4628      	mov	r0, r5
 8003000:	f7ff f99f 	bl	8002342 <__multiply>
 8003004:	9903      	ldr	r1, [sp, #12]
 8003006:	900e      	str	r0, [sp, #56]	; 0x38
 8003008:	4628      	mov	r0, r5
 800300a:	f7ff f8f1 	bl	80021f0 <_Bfree>
 800300e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	ebb8 0204 	subs.w	r2, r8, r4
 8003016:	d004      	beq.n	8003022 <_dtoa_r+0x6b2>
 8003018:	9903      	ldr	r1, [sp, #12]
 800301a:	4628      	mov	r0, r5
 800301c:	f7ff fa1e 	bl	800245c <__pow5mult>
 8003020:	9003      	str	r0, [sp, #12]
 8003022:	2101      	movs	r1, #1
 8003024:	4628      	mov	r0, r5
 8003026:	f7ff f983 	bl	8002330 <__i2b>
 800302a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	4604      	mov	r4, r0
 8003030:	f340 80e2 	ble.w	80031f8 <_dtoa_r+0x888>
 8003034:	461a      	mov	r2, r3
 8003036:	4601      	mov	r1, r0
 8003038:	4628      	mov	r0, r5
 800303a:	f7ff fa0f 	bl	800245c <__pow5mult>
 800303e:	9b07      	ldr	r3, [sp, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	4604      	mov	r4, r0
 8003044:	f340 80db 	ble.w	80031fe <_dtoa_r+0x88e>
 8003048:	f04f 0800 	mov.w	r8, #0
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003052:	6918      	ldr	r0, [r3, #16]
 8003054:	f7ff f91e 	bl	8002294 <__hi0bits>
 8003058:	f1c0 0020 	rsb	r0, r0, #32
 800305c:	4438      	add	r0, r7
 800305e:	f010 001f 	ands.w	r0, r0, #31
 8003062:	f000 80f1 	beq.w	8003248 <_dtoa_r+0x8d8>
 8003066:	f1c0 0320 	rsb	r3, r0, #32
 800306a:	2b04      	cmp	r3, #4
 800306c:	f340 80e3 	ble.w	8003236 <_dtoa_r+0x8c6>
 8003070:	9b08      	ldr	r3, [sp, #32]
 8003072:	f1c0 001c 	rsb	r0, r0, #28
 8003076:	4403      	add	r3, r0
 8003078:	4482      	add	sl, r0
 800307a:	9308      	str	r3, [sp, #32]
 800307c:	4407      	add	r7, r0
 800307e:	f1ba 0f00 	cmp.w	sl, #0
 8003082:	dd05      	ble.n	8003090 <_dtoa_r+0x720>
 8003084:	4652      	mov	r2, sl
 8003086:	9903      	ldr	r1, [sp, #12]
 8003088:	4628      	mov	r0, r5
 800308a:	f7ff fa35 	bl	80024f8 <__lshift>
 800308e:	9003      	str	r0, [sp, #12]
 8003090:	2f00      	cmp	r7, #0
 8003092:	dd05      	ble.n	80030a0 <_dtoa_r+0x730>
 8003094:	4621      	mov	r1, r4
 8003096:	463a      	mov	r2, r7
 8003098:	4628      	mov	r0, r5
 800309a:	f7ff fa2d 	bl	80024f8 <__lshift>
 800309e:	4604      	mov	r4, r0
 80030a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80d2 	beq.w	800324c <_dtoa_r+0x8dc>
 80030a8:	4621      	mov	r1, r4
 80030aa:	9803      	ldr	r0, [sp, #12]
 80030ac:	f7ff fa75 	bl	800259a <__mcmp>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	f280 80cb 	bge.w	800324c <_dtoa_r+0x8dc>
 80030b6:	2300      	movs	r3, #0
 80030b8:	220a      	movs	r2, #10
 80030ba:	9903      	ldr	r1, [sp, #12]
 80030bc:	4628      	mov	r0, r5
 80030be:	f7ff f8ae 	bl	800221e <__multadd>
 80030c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030c4:	9003      	str	r0, [sp, #12]
 80030c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 81ae 	beq.w	800342c <_dtoa_r+0xabc>
 80030d0:	2300      	movs	r3, #0
 80030d2:	4631      	mov	r1, r6
 80030d4:	220a      	movs	r2, #10
 80030d6:	4628      	mov	r0, r5
 80030d8:	f7ff f8a1 	bl	800221e <__multadd>
 80030dc:	9b06      	ldr	r3, [sp, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	4606      	mov	r6, r0
 80030e2:	dc03      	bgt.n	80030ec <_dtoa_r+0x77c>
 80030e4:	9b07      	ldr	r3, [sp, #28]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	f300 80b8 	bgt.w	800325c <_dtoa_r+0x8ec>
 80030ec:	9b08      	ldr	r3, [sp, #32]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	dd05      	ble.n	80030fe <_dtoa_r+0x78e>
 80030f2:	4631      	mov	r1, r6
 80030f4:	461a      	mov	r2, r3
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7ff f9fe 	bl	80024f8 <__lshift>
 80030fc:	4606      	mov	r6, r0
 80030fe:	f1b8 0f00 	cmp.w	r8, #0
 8003102:	f000 8115 	beq.w	8003330 <_dtoa_r+0x9c0>
 8003106:	6871      	ldr	r1, [r6, #4]
 8003108:	4628      	mov	r0, r5
 800310a:	f7ff f83d 	bl	8002188 <_Balloc>
 800310e:	6932      	ldr	r2, [r6, #16]
 8003110:	3202      	adds	r2, #2
 8003112:	4607      	mov	r7, r0
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	f106 010c 	add.w	r1, r6, #12
 800311a:	300c      	adds	r0, #12
 800311c:	f000 f99c 	bl	8003458 <memcpy>
 8003120:	2201      	movs	r2, #1
 8003122:	4639      	mov	r1, r7
 8003124:	4628      	mov	r0, r5
 8003126:	f7ff f9e7 	bl	80024f8 <__lshift>
 800312a:	9b00      	ldr	r3, [sp, #0]
 800312c:	9f04      	ldr	r7, [sp, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	46b1      	mov	r9, r6
 8003134:	9308      	str	r3, [sp, #32]
 8003136:	4606      	mov	r6, r0
 8003138:	4621      	mov	r1, r4
 800313a:	9803      	ldr	r0, [sp, #12]
 800313c:	f7ff fb8c 	bl	8002858 <quorem>
 8003140:	4649      	mov	r1, r9
 8003142:	4682      	mov	sl, r0
 8003144:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003148:	9803      	ldr	r0, [sp, #12]
 800314a:	f7ff fa26 	bl	800259a <__mcmp>
 800314e:	4632      	mov	r2, r6
 8003150:	9000      	str	r0, [sp, #0]
 8003152:	4621      	mov	r1, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f7ff fa3a 	bl	80025ce <__mdiff>
 800315a:	68c3      	ldr	r3, [r0, #12]
 800315c:	4602      	mov	r2, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80e8 	bne.w	8003334 <_dtoa_r+0x9c4>
 8003164:	4601      	mov	r1, r0
 8003166:	900a      	str	r0, [sp, #40]	; 0x28
 8003168:	9803      	ldr	r0, [sp, #12]
 800316a:	f7ff fa16 	bl	800259a <__mcmp>
 800316e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003170:	4603      	mov	r3, r0
 8003172:	4611      	mov	r1, r2
 8003174:	4628      	mov	r0, r5
 8003176:	930a      	str	r3, [sp, #40]	; 0x28
 8003178:	f7ff f83a 	bl	80021f0 <_Bfree>
 800317c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 80da 	bne.w	8003338 <_dtoa_r+0x9c8>
 8003184:	9a07      	ldr	r2, [sp, #28]
 8003186:	2a00      	cmp	r2, #0
 8003188:	f040 80d6 	bne.w	8003338 <_dtoa_r+0x9c8>
 800318c:	9a08      	ldr	r2, [sp, #32]
 800318e:	2a00      	cmp	r2, #0
 8003190:	f040 80d2 	bne.w	8003338 <_dtoa_r+0x9c8>
 8003194:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003198:	f000 80ee 	beq.w	8003378 <_dtoa_r+0xa08>
 800319c:	9b00      	ldr	r3, [sp, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dd01      	ble.n	80031a6 <_dtoa_r+0x836>
 80031a2:	f10a 0831 	add.w	r8, sl, #49	; 0x31
 80031a6:	1c7b      	adds	r3, r7, #1
 80031a8:	f887 8000 	strb.w	r8, [r7]
 80031ac:	e06b      	b.n	8003286 <_dtoa_r+0x916>
 80031ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80031b4:	e6fa      	b.n	8002fac <_dtoa_r+0x63c>
 80031b6:	f109 34ff 	add.w	r4, r9, #4294967295
 80031ba:	45a0      	cmp	r8, r4
 80031bc:	bfbf      	itttt	lt
 80031be:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80031c0:	eba4 0808 	sublt.w	r8, r4, r8
 80031c4:	4443      	addlt	r3, r8
 80031c6:	930c      	strlt	r3, [sp, #48]	; 0x30
 80031c8:	bfb6      	itet	lt
 80031ca:	46a0      	movlt	r8, r4
 80031cc:	eba8 0404 	subge.w	r4, r8, r4
 80031d0:	2400      	movlt	r4, #0
 80031d2:	f1b9 0f00 	cmp.w	r9, #0
 80031d6:	bfbb      	ittet	lt
 80031d8:	ebaa 0309 	sublt.w	r3, sl, r9
 80031dc:	9308      	strlt	r3, [sp, #32]
 80031de:	f8cd a020 	strge.w	sl, [sp, #32]
 80031e2:	2300      	movlt	r3, #0
 80031e4:	bfa8      	it	ge
 80031e6:	464b      	movge	r3, r9
 80031e8:	e6e3      	b.n	8002fb2 <_dtoa_r+0x642>
 80031ea:	4644      	mov	r4, r8
 80031ec:	f8cd a020 	str.w	sl, [sp, #32]
 80031f0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80031f2:	e6e5      	b.n	8002fc0 <_dtoa_r+0x650>
 80031f4:	4642      	mov	r2, r8
 80031f6:	e70f      	b.n	8003018 <_dtoa_r+0x6a8>
 80031f8:	9b07      	ldr	r3, [sp, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	dc16      	bgt.n	800322c <_dtoa_r+0x8bc>
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	b9a3      	cbnz	r3, 800322c <_dtoa_r+0x8bc>
 8003202:	9b01      	ldr	r3, [sp, #4]
 8003204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003208:	b983      	cbnz	r3, 800322c <_dtoa_r+0x8bc>
 800320a:	9b01      	ldr	r3, [sp, #4]
 800320c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003210:	0d1b      	lsrs	r3, r3, #20
 8003212:	051b      	lsls	r3, r3, #20
 8003214:	b16b      	cbz	r3, 8003232 <_dtoa_r+0x8c2>
 8003216:	f10a 0a01 	add.w	sl, sl, #1
 800321a:	3701      	adds	r7, #1
 800321c:	f04f 0801 	mov.w	r8, #1
 8003220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	f47f af12 	bne.w	800304c <_dtoa_r+0x6dc>
 8003228:	2001      	movs	r0, #1
 800322a:	e717      	b.n	800305c <_dtoa_r+0x6ec>
 800322c:	f04f 0800 	mov.w	r8, #0
 8003230:	e7f6      	b.n	8003220 <_dtoa_r+0x8b0>
 8003232:	4698      	mov	r8, r3
 8003234:	e7f4      	b.n	8003220 <_dtoa_r+0x8b0>
 8003236:	f43f af22 	beq.w	800307e <_dtoa_r+0x70e>
 800323a:	9a08      	ldr	r2, [sp, #32]
 800323c:	331c      	adds	r3, #28
 800323e:	441a      	add	r2, r3
 8003240:	449a      	add	sl, r3
 8003242:	9208      	str	r2, [sp, #32]
 8003244:	441f      	add	r7, r3
 8003246:	e71a      	b.n	800307e <_dtoa_r+0x70e>
 8003248:	4603      	mov	r3, r0
 800324a:	e7f6      	b.n	800323a <_dtoa_r+0x8ca>
 800324c:	f1b9 0f00 	cmp.w	r9, #0
 8003250:	dc39      	bgt.n	80032c6 <_dtoa_r+0x956>
 8003252:	9b07      	ldr	r3, [sp, #28]
 8003254:	2b02      	cmp	r3, #2
 8003256:	dd36      	ble.n	80032c6 <_dtoa_r+0x956>
 8003258:	f8cd 9018 	str.w	r9, [sp, #24]
 800325c:	9b06      	ldr	r3, [sp, #24]
 800325e:	b963      	cbnz	r3, 800327a <_dtoa_r+0x90a>
 8003260:	4621      	mov	r1, r4
 8003262:	2205      	movs	r2, #5
 8003264:	4628      	mov	r0, r5
 8003266:	f7fe ffda 	bl	800221e <__multadd>
 800326a:	4601      	mov	r1, r0
 800326c:	4604      	mov	r4, r0
 800326e:	9803      	ldr	r0, [sp, #12]
 8003270:	f7ff f993 	bl	800259a <__mcmp>
 8003274:	2800      	cmp	r0, #0
 8003276:	f73f ad54 	bgt.w	8002d22 <_dtoa_r+0x3b2>
 800327a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800327c:	ea6f 0b03 	mvn.w	fp, r3
 8003280:	9b04      	ldr	r3, [sp, #16]
 8003282:	f04f 0900 	mov.w	r9, #0
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f7fe ffb0 	bl	80021f0 <_Bfree>
 8003290:	9b00      	ldr	r3, [sp, #0]
 8003292:	2e00      	cmp	r6, #0
 8003294:	f43f ae4c 	beq.w	8002f30 <_dtoa_r+0x5c0>
 8003298:	f1b9 0f00 	cmp.w	r9, #0
 800329c:	d006      	beq.n	80032ac <_dtoa_r+0x93c>
 800329e:	45b1      	cmp	r9, r6
 80032a0:	d004      	beq.n	80032ac <_dtoa_r+0x93c>
 80032a2:	4649      	mov	r1, r9
 80032a4:	4628      	mov	r0, r5
 80032a6:	f7fe ffa3 	bl	80021f0 <_Bfree>
 80032aa:	9b00      	ldr	r3, [sp, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4631      	mov	r1, r6
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7fe ff9d 	bl	80021f0 <_Bfree>
 80032b6:	9b00      	ldr	r3, [sp, #0]
 80032b8:	e63a      	b.n	8002f30 <_dtoa_r+0x5c0>
 80032ba:	2400      	movs	r4, #0
 80032bc:	4626      	mov	r6, r4
 80032be:	e7dc      	b.n	800327a <_dtoa_r+0x90a>
 80032c0:	4693      	mov	fp, r2
 80032c2:	4626      	mov	r6, r4
 80032c4:	e52d      	b.n	8002d22 <_dtoa_r+0x3b2>
 80032c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032c8:	f8cd 9018 	str.w	r9, [sp, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f af0d 	bne.w	80030ec <_dtoa_r+0x77c>
 80032d2:	9f04      	ldr	r7, [sp, #16]
 80032d4:	9803      	ldr	r0, [sp, #12]
 80032d6:	4621      	mov	r1, r4
 80032d8:	f7ff fabe 	bl	8002858 <quorem>
 80032dc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80032e0:	f807 8b01 	strb.w	r8, [r7], #1
 80032e4:	9b04      	ldr	r3, [sp, #16]
 80032e6:	9a06      	ldr	r2, [sp, #24]
 80032e8:	1afb      	subs	r3, r7, r3
 80032ea:	429a      	cmp	r2, r3
 80032ec:	f300 8081 	bgt.w	80033f2 <_dtoa_r+0xa82>
 80032f0:	9b04      	ldr	r3, [sp, #16]
 80032f2:	2a01      	cmp	r2, #1
 80032f4:	bfac      	ite	ge
 80032f6:	189b      	addge	r3, r3, r2
 80032f8:	3301      	addlt	r3, #1
 80032fa:	461f      	mov	r7, r3
 80032fc:	f04f 0900 	mov.w	r9, #0
 8003300:	2201      	movs	r2, #1
 8003302:	9903      	ldr	r1, [sp, #12]
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff f8f7 	bl	80024f8 <__lshift>
 800330a:	4621      	mov	r1, r4
 800330c:	9003      	str	r0, [sp, #12]
 800330e:	f7ff f944 	bl	800259a <__mcmp>
 8003312:	2800      	cmp	r0, #0
 8003314:	dc33      	bgt.n	800337e <_dtoa_r+0xa0e>
 8003316:	d102      	bne.n	800331e <_dtoa_r+0x9ae>
 8003318:	f018 0f01 	tst.w	r8, #1
 800331c:	d12f      	bne.n	800337e <_dtoa_r+0xa0e>
 800331e:	463b      	mov	r3, r7
 8003320:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8003324:	2a30      	cmp	r2, #48	; 0x30
 8003326:	f103 31ff 	add.w	r1, r3, #4294967295
 800332a:	d1ac      	bne.n	8003286 <_dtoa_r+0x916>
 800332c:	460b      	mov	r3, r1
 800332e:	e7f7      	b.n	8003320 <_dtoa_r+0x9b0>
 8003330:	4630      	mov	r0, r6
 8003332:	e6fa      	b.n	800312a <_dtoa_r+0x7ba>
 8003334:	2301      	movs	r3, #1
 8003336:	e71c      	b.n	8003172 <_dtoa_r+0x802>
 8003338:	9a00      	ldr	r2, [sp, #0]
 800333a:	2a00      	cmp	r2, #0
 800333c:	db04      	blt.n	8003348 <_dtoa_r+0x9d8>
 800333e:	d127      	bne.n	8003390 <_dtoa_r+0xa20>
 8003340:	9a07      	ldr	r2, [sp, #28]
 8003342:	bb2a      	cbnz	r2, 8003390 <_dtoa_r+0xa20>
 8003344:	9a08      	ldr	r2, [sp, #32]
 8003346:	bb1a      	cbnz	r2, 8003390 <_dtoa_r+0xa20>
 8003348:	2b00      	cmp	r3, #0
 800334a:	f77f af2c 	ble.w	80031a6 <_dtoa_r+0x836>
 800334e:	2201      	movs	r2, #1
 8003350:	9903      	ldr	r1, [sp, #12]
 8003352:	4628      	mov	r0, r5
 8003354:	f7ff f8d0 	bl	80024f8 <__lshift>
 8003358:	4621      	mov	r1, r4
 800335a:	9003      	str	r0, [sp, #12]
 800335c:	f7ff f91d 	bl	800259a <__mcmp>
 8003360:	2800      	cmp	r0, #0
 8003362:	dc05      	bgt.n	8003370 <_dtoa_r+0xa00>
 8003364:	f47f af1f 	bne.w	80031a6 <_dtoa_r+0x836>
 8003368:	f018 0f01 	tst.w	r8, #1
 800336c:	f43f af1b 	beq.w	80031a6 <_dtoa_r+0x836>
 8003370:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003374:	f47f af15 	bne.w	80031a2 <_dtoa_r+0x832>
 8003378:	2339      	movs	r3, #57	; 0x39
 800337a:	703b      	strb	r3, [r7, #0]
 800337c:	3701      	adds	r7, #1
 800337e:	463b      	mov	r3, r7
 8003380:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8003384:	2a39      	cmp	r2, #57	; 0x39
 8003386:	f103 31ff 	add.w	r1, r3, #4294967295
 800338a:	d03a      	beq.n	8003402 <_dtoa_r+0xa92>
 800338c:	3201      	adds	r2, #1
 800338e:	e03f      	b.n	8003410 <_dtoa_r+0xaa0>
 8003390:	2b00      	cmp	r3, #0
 8003392:	f107 0301 	add.w	r3, r7, #1
 8003396:	dd05      	ble.n	80033a4 <_dtoa_r+0xa34>
 8003398:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800339c:	d0ec      	beq.n	8003378 <_dtoa_r+0xa08>
 800339e:	f108 0801 	add.w	r8, r8, #1
 80033a2:	e701      	b.n	80031a8 <_dtoa_r+0x838>
 80033a4:	461f      	mov	r7, r3
 80033a6:	f803 8c01 	strb.w	r8, [r3, #-1]
 80033aa:	9b04      	ldr	r3, [sp, #16]
 80033ac:	9a06      	ldr	r2, [sp, #24]
 80033ae:	1afb      	subs	r3, r7, r3
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d0a5      	beq.n	8003300 <_dtoa_r+0x990>
 80033b4:	2300      	movs	r3, #0
 80033b6:	220a      	movs	r2, #10
 80033b8:	9903      	ldr	r1, [sp, #12]
 80033ba:	4628      	mov	r0, r5
 80033bc:	f7fe ff2f 	bl	800221e <__multadd>
 80033c0:	45b1      	cmp	r9, r6
 80033c2:	9003      	str	r0, [sp, #12]
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	f04f 020a 	mov.w	r2, #10
 80033cc:	4649      	mov	r1, r9
 80033ce:	4628      	mov	r0, r5
 80033d0:	d104      	bne.n	80033dc <_dtoa_r+0xa6c>
 80033d2:	f7fe ff24 	bl	800221e <__multadd>
 80033d6:	4681      	mov	r9, r0
 80033d8:	4606      	mov	r6, r0
 80033da:	e6ad      	b.n	8003138 <_dtoa_r+0x7c8>
 80033dc:	f7fe ff1f 	bl	800221e <__multadd>
 80033e0:	4631      	mov	r1, r6
 80033e2:	4681      	mov	r9, r0
 80033e4:	2300      	movs	r3, #0
 80033e6:	220a      	movs	r2, #10
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7fe ff18 	bl	800221e <__multadd>
 80033ee:	4606      	mov	r6, r0
 80033f0:	e6a2      	b.n	8003138 <_dtoa_r+0x7c8>
 80033f2:	2300      	movs	r3, #0
 80033f4:	220a      	movs	r2, #10
 80033f6:	9903      	ldr	r1, [sp, #12]
 80033f8:	4628      	mov	r0, r5
 80033fa:	f7fe ff10 	bl	800221e <__multadd>
 80033fe:	9003      	str	r0, [sp, #12]
 8003400:	e768      	b.n	80032d4 <_dtoa_r+0x964>
 8003402:	9a04      	ldr	r2, [sp, #16]
 8003404:	428a      	cmp	r2, r1
 8003406:	d105      	bne.n	8003414 <_dtoa_r+0xaa4>
 8003408:	9904      	ldr	r1, [sp, #16]
 800340a:	f10b 0b01 	add.w	fp, fp, #1
 800340e:	2231      	movs	r2, #49	; 0x31
 8003410:	700a      	strb	r2, [r1, #0]
 8003412:	e738      	b.n	8003286 <_dtoa_r+0x916>
 8003414:	460b      	mov	r3, r1
 8003416:	e7b3      	b.n	8003380 <_dtoa_r+0xa10>
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <_dtoa_r+0xad0>)
 800341a:	f7ff bb0a 	b.w	8002a32 <_dtoa_r+0xc2>
 800341e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003420:	2b00      	cmp	r3, #0
 8003422:	f47f aae8 	bne.w	80029f6 <_dtoa_r+0x86>
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <_dtoa_r+0xad4>)
 8003428:	f7ff bb03 	b.w	8002a32 <_dtoa_r+0xc2>
 800342c:	9b06      	ldr	r3, [sp, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f73f af4f 	bgt.w	80032d2 <_dtoa_r+0x962>
 8003434:	9b07      	ldr	r3, [sp, #28]
 8003436:	2b02      	cmp	r3, #2
 8003438:	f77f af4b 	ble.w	80032d2 <_dtoa_r+0x962>
 800343c:	e70e      	b.n	800325c <_dtoa_r+0x8ec>
 800343e:	bf00      	nop
 8003440:	080035c1 	.word	0x080035c1
 8003444:	080035b4 	.word	0x080035b4

08003448 <malloc>:
 8003448:	4b02      	ldr	r3, [pc, #8]	; (8003454 <malloc+0xc>)
 800344a:	4601      	mov	r1, r0
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	f7ff b98d 	b.w	800276c <_malloc_r>
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c

08003458 <memcpy>:
 8003458:	b510      	push	{r4, lr}
 800345a:	1e43      	subs	r3, r0, #1
 800345c:	440a      	add	r2, r1
 800345e:	4291      	cmp	r1, r2
 8003460:	d100      	bne.n	8003464 <memcpy+0xc>
 8003462:	bd10      	pop	{r4, pc}
 8003464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346c:	e7f7      	b.n	800345e <memcpy+0x6>

0800346e <__malloc_lock>:
 800346e:	4770      	bx	lr

08003470 <__malloc_unlock>:
 8003470:	4770      	bx	lr
	...

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	bf00      	nop
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
