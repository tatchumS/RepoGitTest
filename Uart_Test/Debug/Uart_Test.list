
Uart_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000203c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002234  08002234  00012234  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  08002270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ec  20000018  08002288  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000104  08002288  00020104  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e5d8  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f49  00000000  00000000  0002e61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000072e6  00000000  00000000  00030567  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b0  00000000  00000000  00037850  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ca0  00000000  00000000  00038200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000518a  00000000  00000000  00038ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000041c9  00000000  00000000  0003e02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000421f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001cc0  00000000  00000000  00042270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	0800221c 	.word	0x0800221c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	0800221c 	.word	0x0800221c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f89e 	bl	80006a0 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f84e 	bl	8000614 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000014 	.word	0x20000014
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 fd3d 	bl	800201c <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000034 	.word	0x20000034
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000034 	.word	0x20000034

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800060a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800060c:	60d3      	str	r3, [r2, #12]
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000616:	b530      	push	{r4, r5, lr}
 8000618:	68dc      	ldr	r4, [r3, #12]
 800061a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800061e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000622:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	2b04      	cmp	r3, #4
 8000626:	bf28      	it	cs
 8000628:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	bf8c      	ite	hi
 8000632:	3c03      	subhi	r4, #3
 8000634:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000636:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800063a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000640:	ea01 0103 	and.w	r1, r1, r3
 8000644:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000648:	fa05 f404 	lsl.w	r4, r5, r4
 800064c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000650:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	ea42 0201 	orr.w	r2, r2, r1
 8000658:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 800065c:	db07      	blt.n	800066e <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000662:	b2d2      	uxtb	r2, r2
 8000664:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000668:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800066c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f000 000f 	and.w	r0, r0, #15
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_NVIC_SetPriority+0x6c>)
 8000676:	541a      	strb	r2, [r3, r0]
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	e000ed14 	.word	0xe000ed14

08000684 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000684:	2800      	cmp	r0, #0
 8000686:	db08      	blt.n	800069a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000688:	0942      	lsrs	r2, r0, #5
 800068a:	2301      	movs	r3, #1
 800068c:	f000 001f 	and.w	r0, r0, #31
 8000690:	fa03 f000 	lsl.w	r0, r3, r0
 8000694:	4b01      	ldr	r3, [pc, #4]	; (800069c <HAL_NVIC_EnableIRQ+0x18>)
 8000696:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	3801      	subs	r0, #1
 80006a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006a6:	d20a      	bcs.n	80006be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	21f0      	movs	r1, #240	; 0xf0
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ae:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006cc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d003      	beq.n	80006dc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006dc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80006de:	2305      	movs	r3, #5
 80006e0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 80006e4:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	4770      	bx	lr

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f4:	680b      	ldr	r3, [r1, #0]
{
 80006f6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80008bc <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80006fe:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000700:	4a6c      	ldr	r2, [pc, #432]	; (80008b4 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000702:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80008c0 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000706:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800070a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800070c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000710:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000714:	45b6      	cmp	lr, r6
 8000716:	f040 80b3 	bne.w	8000880 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800071a:	684c      	ldr	r4, [r1, #4]
 800071c:	f024 0710 	bic.w	r7, r4, #16
 8000720:	2f02      	cmp	r7, #2
 8000722:	d116      	bne.n	8000752 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000724:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000728:	f003 0b07 	and.w	fp, r3, #7
 800072c:	f04f 0c0f 	mov.w	ip, #15
 8000730:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000734:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000738:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800073c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000740:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000744:	690d      	ldr	r5, [r1, #16]
 8000746:	fa05 f50b 	lsl.w	r5, r5, fp
 800074a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800074e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000752:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000756:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000758:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800075c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000760:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000764:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000766:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800076a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800076e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000772:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000776:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800077a:	d811      	bhi.n	80007a0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800077c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800077e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000782:	68cf      	ldr	r7, [r1, #12]
 8000784:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000788:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800078c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800078e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000790:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000794:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000798:	409f      	lsls	r7, r3
 800079a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800079e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007a0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007a2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007a4:	688f      	ldr	r7, [r1, #8]
 80007a6:	fa07 f70a 	lsl.w	r7, r7, sl
 80007aa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007ac:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ae:	00e5      	lsls	r5, r4, #3
 80007b0:	d566      	bpl.n	8000880 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80007b6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ba:	f003 0e03 	and.w	lr, r3, #3
 80007be:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80007c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80007d2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80007d6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80007da:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80007de:	9503      	str	r5, [sp, #12]
 80007e0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007e2:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80007e6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007ea:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007ee:	4d32      	ldr	r5, [pc, #200]	; (80008b8 <HAL_GPIO_Init+0x1c8>)
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d04c      	beq.n	800088e <HAL_GPIO_Init+0x19e>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d04a      	beq.n	8000892 <HAL_GPIO_Init+0x1a2>
 80007fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000800:	42a8      	cmp	r0, r5
 8000802:	d048      	beq.n	8000896 <HAL_GPIO_Init+0x1a6>
 8000804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000808:	42a8      	cmp	r0, r5
 800080a:	d046      	beq.n	800089a <HAL_GPIO_Init+0x1aa>
 800080c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000810:	42a8      	cmp	r0, r5
 8000812:	d044      	beq.n	800089e <HAL_GPIO_Init+0x1ae>
 8000814:	4548      	cmp	r0, r9
 8000816:	d044      	beq.n	80008a2 <HAL_GPIO_Init+0x1b2>
 8000818:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800081c:	42a8      	cmp	r0, r5
 800081e:	d042      	beq.n	80008a6 <HAL_GPIO_Init+0x1b6>
 8000820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000824:	42a8      	cmp	r0, r5
 8000826:	d040      	beq.n	80008aa <HAL_GPIO_Init+0x1ba>
 8000828:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082c:	42a8      	cmp	r0, r5
 800082e:	d03e      	beq.n	80008ae <HAL_GPIO_Init+0x1be>
 8000830:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000834:	42a8      	cmp	r0, r5
 8000836:	bf14      	ite	ne
 8000838:	250a      	movne	r5, #10
 800083a:	2509      	moveq	r5, #9
 800083c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000840:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000844:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000848:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800084a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 800084e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000850:	bf0c      	ite	eq
 8000852:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000854:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000856:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800085a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800085c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800085e:	bf0c      	ite	eq
 8000860:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000862:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000864:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000868:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800086a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800086c:	bf0c      	ite	eq
 800086e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000870:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000872:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000874:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000876:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000878:	bf54      	ite	pl
 800087a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800087c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800087e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000880:	3301      	adds	r3, #1
 8000882:	2b10      	cmp	r3, #16
 8000884:	f47f af3f 	bne.w	8000706 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000888:	b005      	add	sp, #20
 800088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800088e:	2500      	movs	r5, #0
 8000890:	e7d4      	b.n	800083c <HAL_GPIO_Init+0x14c>
 8000892:	2501      	movs	r5, #1
 8000894:	e7d2      	b.n	800083c <HAL_GPIO_Init+0x14c>
 8000896:	2502      	movs	r5, #2
 8000898:	e7d0      	b.n	800083c <HAL_GPIO_Init+0x14c>
 800089a:	2503      	movs	r5, #3
 800089c:	e7ce      	b.n	800083c <HAL_GPIO_Init+0x14c>
 800089e:	2504      	movs	r5, #4
 80008a0:	e7cc      	b.n	800083c <HAL_GPIO_Init+0x14c>
 80008a2:	2505      	movs	r5, #5
 80008a4:	e7ca      	b.n	800083c <HAL_GPIO_Init+0x14c>
 80008a6:	2506      	movs	r5, #6
 80008a8:	e7c8      	b.n	800083c <HAL_GPIO_Init+0x14c>
 80008aa:	2507      	movs	r5, #7
 80008ac:	e7c6      	b.n	800083c <HAL_GPIO_Init+0x14c>
 80008ae:	2508      	movs	r5, #8
 80008b0:	e7c4      	b.n	800083c <HAL_GPIO_Init+0x14c>
 80008b2:	bf00      	nop
 80008b4:	40013c00 	.word	0x40013c00
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40021400 	.word	0x40021400

080008c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c4:	b10a      	cbz	r2, 80008ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80008c6:	6181      	str	r1, [r0, #24]
 80008c8:	4770      	bx	lr
 80008ca:	0409      	lsls	r1, r1, #16
 80008cc:	e7fb      	b.n	80008c6 <HAL_GPIO_WritePin+0x2>
	...

080008d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d4:	4604      	mov	r4, r0
 80008d6:	b918      	cbnz	r0, 80008e0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008d8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008da:	b002      	add	sp, #8
 80008dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e0:	6803      	ldr	r3, [r0, #0]
 80008e2:	07d8      	lsls	r0, r3, #31
 80008e4:	d410      	bmi.n	8000908 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	0799      	lsls	r1, r3, #30
 80008ea:	d45e      	bmi.n	80009aa <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	0719      	lsls	r1, r3, #28
 80008f0:	f100 80a3 	bmi.w	8000a3a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	075a      	lsls	r2, r3, #29
 80008f8:	f100 80c4 	bmi.w	8000a84 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fc:	69a2      	ldr	r2, [r4, #24]
 80008fe:	2a00      	cmp	r2, #0
 8000900:	f040 812e 	bne.w	8000b60 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000904:	2000      	movs	r0, #0
 8000906:	e7e8      	b.n	80008da <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000908:	4b93      	ldr	r3, [pc, #588]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	f002 020c 	and.w	r2, r2, #12
 8000910:	2a04      	cmp	r2, #4
 8000912:	d007      	beq.n	8000924 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	f002 020c 	and.w	r2, r2, #12
 800091a:	2a08      	cmp	r2, #8
 800091c:	d10a      	bne.n	8000934 <HAL_RCC_OscConfig+0x64>
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	025a      	lsls	r2, r3, #9
 8000922:	d507      	bpl.n	8000934 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000924:	4b8c      	ldr	r3, [pc, #560]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	039b      	lsls	r3, r3, #14
 800092a:	d5dc      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x16>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1d9      	bne.n	80008e6 <HAL_RCC_OscConfig+0x16>
 8000932:	e7d1      	b.n	80008d8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	4d88      	ldr	r5, [pc, #544]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800093c:	d111      	bne.n	8000962 <HAL_RCC_OscConfig+0x92>
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000944:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000946:	f7ff fe3b 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	4d83      	ldr	r5, [pc, #524]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800094c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	039f      	lsls	r7, r3, #14
 8000952:	d4c8      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fe34 	bl	80005c0 <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	2864      	cmp	r0, #100	; 0x64
 800095c:	d9f7      	bls.n	800094e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e7bb      	b.n	80008da <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000962:	b99b      	cbnz	r3, 800098c <HAL_RCC_OscConfig+0xbc>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000972:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000974:	f7ff fe24 	bl	80005c0 <HAL_GetTick>
 8000978:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	0398      	lsls	r0, r3, #14
 800097e:	d5b2      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000980:	f7ff fe1e 	bl	80005c0 <HAL_GetTick>
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	2864      	cmp	r0, #100	; 0x64
 8000988:	d9f7      	bls.n	800097a <HAL_RCC_OscConfig+0xaa>
 800098a:	e7e8      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	d103      	bne.n	800099c <HAL_RCC_OscConfig+0xcc>
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	602b      	str	r3, [r5, #0]
 800099a:	e7d0      	b.n	800093e <HAL_RCC_OscConfig+0x6e>
 800099c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009a0:	602b      	str	r3, [r5, #0]
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a8:	e7cc      	b.n	8000944 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009aa:	4b6b      	ldr	r3, [pc, #428]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f012 0f0c 	tst.w	r2, #12
 80009b2:	d007      	beq.n	80009c4 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	f002 020c 	and.w	r2, r2, #12
 80009ba:	2a08      	cmp	r2, #8
 80009bc:	d111      	bne.n	80009e2 <HAL_RCC_OscConfig+0x112>
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	0259      	lsls	r1, r3, #9
 80009c2:	d40e      	bmi.n	80009e2 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c4:	4b64      	ldr	r3, [pc, #400]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	0792      	lsls	r2, r2, #30
 80009ca:	d502      	bpl.n	80009d2 <HAL_RCC_OscConfig+0x102>
 80009cc:	68e2      	ldr	r2, [r4, #12]
 80009ce:	2a01      	cmp	r2, #1
 80009d0:	d182      	bne.n	80008d8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	6921      	ldr	r1, [r4, #16]
 80009d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e0:	e784      	b.n	80008ec <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009e2:	68e3      	ldr	r3, [r4, #12]
 80009e4:	4d5c      	ldr	r5, [pc, #368]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 80009e6:	b1bb      	cbz	r3, 8000a18 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fde6 	bl	80005c0 <HAL_GetTick>
 80009f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	079f      	lsls	r7, r3, #30
 80009fa:	d507      	bpl.n	8000a0c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	6922      	ldr	r2, [r4, #16]
 8000a00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a08:	602b      	str	r3, [r5, #0]
 8000a0a:	e76f      	b.n	80008ec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fdd8 	bl	80005c0 <HAL_GetTick>
 8000a10:	1b80      	subs	r0, r0, r6
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9ef      	bls.n	80009f6 <HAL_RCC_OscConfig+0x126>
 8000a16:	e7a2      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	f023 0301 	bic.w	r3, r3, #1
 8000a1e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fdce 	bl	80005c0 <HAL_GetTick>
 8000a24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	0798      	lsls	r0, r3, #30
 8000a2a:	f57f af5f 	bpl.w	80008ec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2e:	f7ff fdc7 	bl	80005c0 <HAL_GetTick>
 8000a32:	1b80      	subs	r0, r0, r6
 8000a34:	2802      	cmp	r0, #2
 8000a36:	d9f6      	bls.n	8000a26 <HAL_RCC_OscConfig+0x156>
 8000a38:	e791      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a3a:	6963      	ldr	r3, [r4, #20]
 8000a3c:	4d46      	ldr	r5, [pc, #280]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000a3e:	b183      	cbz	r3, 8000a62 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000a40:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a48:	f7ff fdba 	bl	80005c0 <HAL_GetTick>
 8000a4c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a50:	079b      	lsls	r3, r3, #30
 8000a52:	f53f af4f 	bmi.w	80008f4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a56:	f7ff fdb3 	bl	80005c0 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	2802      	cmp	r0, #2
 8000a5e:	d9f6      	bls.n	8000a4e <HAL_RCC_OscConfig+0x17e>
 8000a60:	e77d      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fda9 	bl	80005c0 <HAL_GetTick>
 8000a6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a72:	079f      	lsls	r7, r3, #30
 8000a74:	f57f af3e 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a78:	f7ff fda2 	bl	80005c0 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f6      	bls.n	8000a70 <HAL_RCC_OscConfig+0x1a0>
 8000a82:	e76c      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a88:	00d0      	lsls	r0, r2, #3
 8000a8a:	d427      	bmi.n	8000adc <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000a8e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000aa0:	4d2e      	ldr	r5, [pc, #184]	; (8000b5c <HAL_RCC_OscConfig+0x28c>)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	05d9      	lsls	r1, r3, #23
 8000aa6:	d51b      	bpl.n	8000ae0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa8:	68a3      	ldr	r3, [r4, #8]
 8000aaa:	4d2b      	ldr	r5, [pc, #172]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d127      	bne.n	8000b00 <HAL_RCC_OscConfig+0x230>
 8000ab0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000abc:	f7ff fd80 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac0:	4f25      	ldr	r7, [pc, #148]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000ac2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac6:	079b      	lsls	r3, r3, #30
 8000ac8:	d53f      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f43f af16 	beq.w	80008fc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <HAL_RCC_OscConfig+0x288>)
 8000ad2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	e70f      	b.n	80008fc <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000adc:	2600      	movs	r6, #0
 8000ade:	e7df      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd6a 	bl	80005c0 <HAL_GetTick>
 8000aec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	05da      	lsls	r2, r3, #23
 8000af2:	d4d9      	bmi.n	8000aa8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000af4:	f7ff fd64 	bl	80005c0 <HAL_GetTick>
 8000af8:	1bc0      	subs	r0, r0, r7
 8000afa:	2864      	cmp	r0, #100	; 0x64
 8000afc:	d9f7      	bls.n	8000aee <HAL_RCC_OscConfig+0x21e>
 8000afe:	e72e      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b00:	b9ab      	cbnz	r3, 8000b2e <HAL_RCC_OscConfig+0x25e>
 8000b02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b04:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	f023 0301 	bic.w	r3, r3, #1
 8000b0c:	672b      	str	r3, [r5, #112]	; 0x70
 8000b0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b16:	f7ff fd53 	bl	80005c0 <HAL_GetTick>
 8000b1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5d3      	bpl.n	8000aca <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd4d 	bl	80005c0 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x24c>
 8000b2c:	e717      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b32:	d103      	bne.n	8000b3c <HAL_RCC_OscConfig+0x26c>
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	672b      	str	r3, [r5, #112]	; 0x70
 8000b3a:	e7b9      	b.n	8000ab0 <HAL_RCC_OscConfig+0x1e0>
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	672b      	str	r3, [r5, #112]	; 0x70
 8000b42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	e7b5      	b.n	8000ab6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4a:	f7ff fd39 	bl	80005c0 <HAL_GetTick>
 8000b4e:	eba0 0008 	sub.w	r0, r0, r8
 8000b52:	42a8      	cmp	r0, r5
 8000b54:	d9b6      	bls.n	8000ac4 <HAL_RCC_OscConfig+0x1f4>
 8000b56:	e702      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b60:	4d24      	ldr	r5, [pc, #144]	; (8000bf4 <HAL_RCC_OscConfig+0x324>)
 8000b62:	68ab      	ldr	r3, [r5, #8]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	f43f aeb5 	beq.w	80008d8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000b6e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b70:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b76:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b78:	d12f      	bne.n	8000bda <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000b7a:	f7ff fd21 	bl	80005c0 <HAL_GetTick>
 8000b7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	0199      	lsls	r1, r3, #6
 8000b84:	d423      	bmi.n	8000bce <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b86:	6a22      	ldr	r2, [r4, #32]
 8000b88:	69e3      	ldr	r3, [r4, #28]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b8e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000b9a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000b9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba0:	4c14      	ldr	r4, [pc, #80]	; (8000bf4 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba2:	0852      	lsrs	r2, r2, #1
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000baa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fd04 	bl	80005c0 <HAL_GetTick>
 8000bb8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	019a      	lsls	r2, r3, #6
 8000bbe:	f53f aea1 	bmi.w	8000904 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fcfd 	bl	80005c0 <HAL_GetTick>
 8000bc6:	1b40      	subs	r0, r0, r5
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d9f6      	bls.n	8000bba <HAL_RCC_OscConfig+0x2ea>
 8000bcc:	e6c7      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fcf7 	bl	80005c0 <HAL_GetTick>
 8000bd2:	1b80      	subs	r0, r0, r6
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9d3      	bls.n	8000b80 <HAL_RCC_OscConfig+0x2b0>
 8000bd8:	e6c1      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000bda:	f7ff fcf1 	bl	80005c0 <HAL_GetTick>
 8000bde:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	019b      	lsls	r3, r3, #6
 8000be4:	f57f ae8e 	bpl.w	8000904 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be8:	f7ff fcea 	bl	80005c0 <HAL_GetTick>
 8000bec:	1b00      	subs	r0, r0, r4
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f6      	bls.n	8000be0 <HAL_RCC_OscConfig+0x310>
 8000bf2:	e6b4      	b.n	800095e <HAL_RCC_OscConfig+0x8e>
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf8:	4910      	ldr	r1, [pc, #64]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x44>)
{
 8000bfa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bfc:	688b      	ldr	r3, [r1, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d118      	bne.n	8000c38 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c08:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000c10:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8000c14:	480a      	ldr	r0, [pc, #40]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x48>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c1a:	bf18      	it	ne
 8000c1c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c22:	f7ff fb09 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x44>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c2e:	3301      	adds	r3, #1
 8000c30:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c36:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8000c38:	4801      	ldr	r0, [pc, #4]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c3a:	bd08      	pop	{r3, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	00f42400 	.word	0x00f42400

08000c44 <HAL_RCC_ClockConfig>:
{
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	b910      	cbnz	r0, 8000c54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
 8000c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c54:	4a46      	ldr	r2, [pc, #280]	; (8000d70 <HAL_RCC_ClockConfig+0x12c>)
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d328      	bcc.n	8000cb2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	078f      	lsls	r7, r1, #30
 8000c64:	d430      	bmi.n	8000cc8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c66:	07c8      	lsls	r0, r1, #31
 8000c68:	d443      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c6a:	4a41      	ldr	r2, [pc, #260]	; (8000d70 <HAL_RCC_ClockConfig+0x12c>)
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	429d      	cmp	r5, r3
 8000c74:	d367      	bcc.n	8000d46 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	0751      	lsls	r1, r2, #29
 8000c7a:	d470      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7c:	0713      	lsls	r3, r2, #28
 8000c7e:	d507      	bpl.n	8000c90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c80:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000c82:	6921      	ldr	r1, [r4, #16]
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c90:	f7ff ffb2 	bl	8000bf8 <HAL_RCC_GetSysClockFreq>
 8000c94:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000c96:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <HAL_RCC_ClockConfig+0x134>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	40d8      	lsrs	r0, r3
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <HAL_RCC_ClockConfig+0x138>)
 8000ca4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fc4e 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8000cac:	2000      	movs	r0, #0
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	f023 030f 	bic.w	r3, r3, #15
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cbc:	6813      	ldr	r3, [r2, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d1c3      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xa>
 8000cc6:	e7cb      	b.n	8000c60 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc8:	f011 0f04 	tst.w	r1, #4
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000cce:	d003      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000cd6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd8:	070e      	lsls	r6, r1, #28
 8000cda:	d503      	bpl.n	8000ce4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000ce2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	68a0      	ldr	r0, [r4, #8]
 8000ce8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cec:	4302      	orrs	r2, r0
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	e7b9      	b.n	8000c66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf2:	6861      	ldr	r1, [r4, #4]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000cf6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cfa:	d11c      	bne.n	8000d36 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	d0a5      	beq.n	8000c4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d02:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d04:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d08:	4e1a      	ldr	r6, [pc, #104]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d0a:	f022 0203 	bic.w	r2, r2, #3
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d12:	f7ff fc55 	bl	80005c0 <HAL_GetTick>
 8000d16:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d18:	68b3      	ldr	r3, [r6, #8]
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d24:	d0a1      	beq.n	8000c6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d26:	f7ff fc4b 	bl	80005c0 <HAL_GetTick>
 8000d2a:	1bc0      	subs	r0, r0, r7
 8000d2c:	4540      	cmp	r0, r8
 8000d2e:	d9f3      	bls.n	8000d18 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
}
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d36:	2902      	cmp	r1, #2
 8000d38:	d102      	bne.n	8000d40 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d3a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d3e:	e7df      	b.n	8000d00 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	f012 0f02 	tst.w	r2, #2
 8000d44:	e7dc      	b.n	8000d00 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f023 030f 	bic.w	r3, r3, #15
 8000d4c:	432b      	orrs	r3, r5
 8000d4e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d50:	6813      	ldr	r3, [r2, #0]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	429d      	cmp	r5, r3
 8000d58:	f47f af79 	bne.w	8000c4e <HAL_RCC_ClockConfig+0xa>
 8000d5c:	e78b      	b.n	8000c76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d5e:	4905      	ldr	r1, [pc, #20]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000d60:	68e0      	ldr	r0, [r4, #12]
 8000d62:	688b      	ldr	r3, [r1, #8]
 8000d64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	e786      	b.n	8000c7c <HAL_RCC_ClockConfig+0x38>
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	08002245 	.word	0x08002245
 8000d7c:	20000014 	.word	0x20000014

08000d80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
}
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	4770      	bx	lr
 8000d94:	40023800 	.word	0x40023800
 8000d98:	08002255 	.word	0x08002255
 8000d9c:	20000014 	.word	0x20000014

08000da0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dae:	6810      	ldr	r0, [r2, #0]
}
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	40023800 	.word	0x40023800
 8000db8:	08002255 	.word	0x08002255
 8000dbc:	20000014 	.word	0x20000014

08000dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000dc4:	6802      	ldr	r2, [r0, #0]
{
 8000dc6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000dc8:	f012 0601 	ands.w	r6, r2, #1
 8000dcc:	d00b      	beq.n	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000dce:	4bba      	ldr	r3, [pc, #744]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000dd0:	6899      	ldr	r1, [r3, #8]
 8000dd2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000dd6:	6099      	str	r1, [r3, #8]
 8000dd8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000dda:	6899      	ldr	r1, [r3, #8]
 8000ddc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000dde:	fab6 f686 	clz	r6, r6
 8000de2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000de4:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000de6:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000dea:	d012      	beq.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000dec:	49b2      	ldr	r1, [pc, #712]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000dee:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000df0:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000df4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000df8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8000dfc:	bf08      	it	eq
 8000dfe:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e00:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e04:	bf16      	itet	ne
 8000e06:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000e0a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000e0c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000e0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000e12:	02d7      	lsls	r7, r2, #11
 8000e14:	d510      	bpl.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e16:	48a8      	ldr	r0, [pc, #672]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e1a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e1e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000e22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e26:	ea43 0301 	orr.w	r3, r3, r1
 8000e2a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000e2e:	f000 81a9 	beq.w	8001184 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8000e32:	2900      	cmp	r1, #0
 8000e34:	bf08      	it	eq
 8000e36:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8000e38:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000e3c:	bf18      	it	ne
 8000e3e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e40:	0690      	lsls	r0, r2, #26
 8000e42:	d531      	bpl.n	8000ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	4b9c      	ldr	r3, [pc, #624]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e46:	4f9d      	ldr	r7, [pc, #628]	; (80010bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000e62:	f7ff fbad 	bl	80005c0 <HAL_GetTick>
 8000e66:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	05d9      	lsls	r1, r3, #23
 8000e6c:	f140 818c 	bpl.w	8001188 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e70:	4f91      	ldr	r7, [pc, #580]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e74:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e78:	f040 8191 	bne.w	800119e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e7e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000e82:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000e86:	4a8c      	ldr	r2, [pc, #560]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000e88:	f040 81af 	bne.w	80011ea <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8000e8c:	6891      	ldr	r1, [r2, #8]
 8000e8e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000e92:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000e96:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000e9a:	4301      	orrs	r1, r0
 8000e9c:	6091      	str	r1, [r2, #8]
 8000e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	06df      	lsls	r7, r3, #27
 8000eac:	d50c      	bpl.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000eae:	4a82      	ldr	r2, [pc, #520]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000eb0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000eb4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8000eb8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8000ebc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8000ec0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ec8:	0458      	lsls	r0, r3, #17
 8000eca:	d508      	bpl.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ecc:	497a      	ldr	r1, [pc, #488]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ece:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8000ed0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000ed4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ed8:	4302      	orrs	r2, r0
 8000eda:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000ede:	0419      	lsls	r1, r3, #16
 8000ee0:	d508      	bpl.n	8000ef4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000ee2:	4975      	ldr	r1, [pc, #468]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000ee4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8000ee6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000eea:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000eee:	4302      	orrs	r2, r0
 8000ef0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000ef4:	03da      	lsls	r2, r3, #15
 8000ef6:	d508      	bpl.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000ef8:	496f      	ldr	r1, [pc, #444]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000efa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000efc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f00:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8000f04:	4302      	orrs	r2, r0
 8000f06:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000f0a:	039f      	lsls	r7, r3, #14
 8000f0c:	d508      	bpl.n	8000f20 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000f0e:	496a      	ldr	r1, [pc, #424]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f10:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8000f12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f16:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8000f1a:	4302      	orrs	r2, r0
 8000f1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f20:	0658      	lsls	r0, r3, #25
 8000f22:	d508      	bpl.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f24:	4964      	ldr	r1, [pc, #400]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000f28:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f2c:	f022 0203 	bic.w	r2, r2, #3
 8000f30:	4302      	orrs	r2, r0
 8000f32:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f36:	0619      	lsls	r1, r3, #24
 8000f38:	d508      	bpl.n	8000f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f3a:	495f      	ldr	r1, [pc, #380]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000f3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f42:	f022 020c 	bic.w	r2, r2, #12
 8000f46:	4302      	orrs	r2, r0
 8000f48:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000f4c:	05da      	lsls	r2, r3, #23
 8000f4e:	d508      	bpl.n	8000f62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000f50:	4959      	ldr	r1, [pc, #356]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f52:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000f54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f58:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000f5c:	4302      	orrs	r2, r0
 8000f5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000f62:	059f      	lsls	r7, r3, #22
 8000f64:	d508      	bpl.n	8000f78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000f66:	4954      	ldr	r1, [pc, #336]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f68:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000f6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000f72:	4302      	orrs	r2, r0
 8000f74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000f78:	0558      	lsls	r0, r3, #21
 8000f7a:	d508      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000f7c:	494e      	ldr	r1, [pc, #312]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8000f8e:	0519      	lsls	r1, r3, #20
 8000f90:	d508      	bpl.n	8000fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8000f92:	4949      	ldr	r1, [pc, #292]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000f9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f9e:	4302      	orrs	r2, r0
 8000fa0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8000fa4:	04da      	lsls	r2, r3, #19
 8000fa6:	d508      	bpl.n	8000fba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8000fa8:	4943      	ldr	r1, [pc, #268]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000faa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8000fac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fb0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000fb4:	4302      	orrs	r2, r0
 8000fb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8000fba:	049f      	lsls	r7, r3, #18
 8000fbc:	d508      	bpl.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8000fbe:	493e      	ldr	r1, [pc, #248]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fc0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000fc2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000fca:	4302      	orrs	r2, r0
 8000fcc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000fd0:	0258      	lsls	r0, r3, #9
 8000fd2:	d508      	bpl.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000fd4:	4938      	ldr	r1, [pc, #224]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fd6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8000fd8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8000fdc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000fe0:	4302      	orrs	r2, r0
 8000fe2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000fe6:	0299      	lsls	r1, r3, #10
 8000fe8:	d50c      	bpl.n	8001004 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000fea:	4833      	ldr	r0, [pc, #204]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8000fee:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8000ff2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000ff6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8000ffa:	bf08      	it	eq
 8000ffc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000ffe:	430a      	orrs	r2, r1
 8001000:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001004:	f013 0f08 	tst.w	r3, #8
 8001008:	bf18      	it	ne
 800100a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800100c:	035a      	lsls	r2, r3, #13
 800100e:	d508      	bpl.n	8001022 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001010:	4929      	ldr	r1, [pc, #164]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001012:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001014:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001018:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800101c:	4302      	orrs	r2, r0
 800101e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001022:	021f      	lsls	r7, r3, #8
 8001024:	d509      	bpl.n	800103a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001026:	4924      	ldr	r1, [pc, #144]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001028:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800102c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001030:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001034:	4302      	orrs	r2, r0
 8001036:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800103a:	0158      	lsls	r0, r3, #5
 800103c:	d509      	bpl.n	8001052 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800103e:	491e      	ldr	r1, [pc, #120]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001040:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001044:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001048:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800104c:	4302      	orrs	r2, r0
 800104e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001052:	0119      	lsls	r1, r3, #4
 8001054:	d509      	bpl.n	800106a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001056:	4918      	ldr	r1, [pc, #96]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001058:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800105c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001060:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001064:	4302      	orrs	r2, r0
 8001066:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800106a:	00da      	lsls	r2, r3, #3
 800106c:	d509      	bpl.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800106e:	4912      	ldr	r1, [pc, #72]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001070:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001074:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001078:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800107c:	4302      	orrs	r2, r0
 800107e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001082:	2e01      	cmp	r6, #1
 8001084:	f000 80b5 	beq.w	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800108c:	f000 80b1 	beq.w	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001090:	2d01      	cmp	r5, #1
 8001092:	d175      	bne.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001094:	4d08      	ldr	r5, [pc, #32]	; (80010b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800109e:	f7ff fa8f 	bl	80005c0 <HAL_GetTick>
 80010a2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	009f      	lsls	r7, r3, #2
 80010a8:	f100 8127 	bmi.w	80012fa <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80010ac:	6821      	ldr	r1, [r4, #0]
 80010ae:	030e      	lsls	r6, r1, #12
 80010b0:	d506      	bpl.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80010b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010b4:	b143      	cbz	r3, 80010c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80010b6:	e003      	b.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000
 80010c0:	02cd      	lsls	r5, r1, #11
 80010c2:	d51d      	bpl.n	8001100 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80010c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c6:	b9db      	cbnz	r3, 8001100 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80010c8:	4a93      	ldr	r2, [pc, #588]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80010ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80010ce:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80010da:	4303      	orrs	r3, r0
 80010dc:	6960      	ldr	r0, [r4, #20]
 80010de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80010e2:	69a0      	ldr	r0, [r4, #24]
 80010e4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80010ec:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80010f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80010f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80010f6:	3801      	subs	r0, #1
 80010f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80010fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001100:	0288      	lsls	r0, r1, #10
 8001102:	d515      	bpl.n	8001130 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001104:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800110a:	d111      	bne.n	8001130 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800110c:	4a82      	ldr	r2, [pc, #520]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800110e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001112:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001116:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800111a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800111e:	4303      	orrs	r3, r0
 8001120:	6960      	ldr	r0, [r4, #20]
 8001122:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001126:	6a20      	ldr	r0, [r4, #32]
 8001128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001130:	070a      	lsls	r2, r1, #28
 8001132:	d519      	bpl.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001134:	4978      	ldr	r1, [pc, #480]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001136:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800113a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800113e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001146:	4313      	orrs	r3, r2
 8001148:	6962      	ldr	r2, [r4, #20]
 800114a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800114e:	69e2      	ldr	r2, [r4, #28]
 8001150:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001158:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800115c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800115e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001162:	4313      	orrs	r3, r2
 8001164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001168:	4c6b      	ldr	r4, [pc, #428]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001172:	f7ff fa25 	bl	80005c0 <HAL_GetTick>
 8001176:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f140 80c4 	bpl.w	8001308 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
 8001182:	e009      	b.n	8001198 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8001184:	2601      	movs	r6, #1
 8001186:	e657      	b.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001188:	f7ff fa1a 	bl	80005c0 <HAL_GetTick>
 800118c:	eba0 0008 	sub.w	r0, r0, r8
 8001190:	2864      	cmp	r0, #100	; 0x64
 8001192:	f67f ae69 	bls.w	8000e68 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001196:	2003      	movs	r0, #3
}
 8001198:	b003      	add	sp, #12
 800119a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800119e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f43f ae69 	beq.w	8000e7c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80011ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80011b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011b6:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80011ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011be:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80011c0:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80011c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011c4:	07da      	lsls	r2, r3, #31
 80011c6:	f57f ae59 	bpl.w	8000e7c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80011ca:	f7ff f9f9 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ce:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011d6:	079b      	lsls	r3, r3, #30
 80011d8:	f53f ae50 	bmi.w	8000e7c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011dc:	f7ff f9f0 	bl	80005c0 <HAL_GetTick>
 80011e0:	eba0 0008 	sub.w	r0, r0, r8
 80011e4:	4548      	cmp	r0, r9
 80011e6:	d9f5      	bls.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80011e8:	e7d5      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011ea:	6891      	ldr	r1, [r2, #8]
 80011ec:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80011f0:	e654      	b.n	8000e9c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80011f2:	4e49      	ldr	r6, [pc, #292]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80011f4:	6833      	ldr	r3, [r6, #0]
 80011f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80011fa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80011fc:	f7ff f9e0 	bl	80005c0 <HAL_GetTick>
 8001200:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001202:	6833      	ldr	r3, [r6, #0]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	d472      	bmi.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	07d7      	lsls	r7, r2, #31
 800120c:	d512      	bpl.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800120e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001210:	b983      	cbnz	r3, 8001234 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001212:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001216:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800121a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800121e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001222:	430b      	orrs	r3, r1
 8001224:	6861      	ldr	r1, [r4, #4]
 8001226:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800122a:	68a1      	ldr	r1, [r4, #8]
 800122c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001230:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001234:	0316      	lsls	r6, r2, #12
 8001236:	d503      	bpl.n	8001240 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001238:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800123a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800123e:	d005      	beq.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001240:	02d0      	lsls	r0, r2, #11
 8001242:	d51e      	bpl.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124a:	d11a      	bne.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800124c:	4932      	ldr	r1, [pc, #200]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800124e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001252:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800125e:	4303      	orrs	r3, r0
 8001260:	6860      	ldr	r0, [r4, #4]
 8001262:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001266:	68e0      	ldr	r0, [r4, #12]
 8001268:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800126c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001270:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001276:	f020 001f 	bic.w	r0, r0, #31
 800127a:	3b01      	subs	r3, #1
 800127c:	4303      	orrs	r3, r0
 800127e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001282:	01d1      	lsls	r1, r2, #7
 8001284:	d511      	bpl.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001286:	4924      	ldr	r1, [pc, #144]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001288:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800128c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001290:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001294:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001298:	4303      	orrs	r3, r0
 800129a:	6860      	ldr	r0, [r4, #4]
 800129c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80012a0:	6920      	ldr	r0, [r4, #16]
 80012a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80012a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80012aa:	0192      	lsls	r2, r2, #6
 80012ac:	d50d      	bpl.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	6862      	ldr	r2, [r4, #4]
 80012b2:	041b      	lsls	r3, r3, #16
 80012b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012b8:	68e2      	ldr	r2, [r4, #12]
 80012ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012be:	68a2      	ldr	r2, [r4, #8]
 80012c0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80012ca:	4e13      	ldr	r6, [pc, #76]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012cc:	6833      	ldr	r3, [r6, #0]
 80012ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80012d4:	f7ff f974 	bl	80005c0 <HAL_GetTick>
 80012d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012da:	6833      	ldr	r3, [r6, #0]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	f53f aed7 	bmi.w	8001090 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80012e2:	f7ff f96d 	bl	80005c0 <HAL_GetTick>
 80012e6:	1bc0      	subs	r0, r0, r7
 80012e8:	2864      	cmp	r0, #100	; 0x64
 80012ea:	d9f6      	bls.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80012ec:	e753      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80012ee:	f7ff f967 	bl	80005c0 <HAL_GetTick>
 80012f2:	1bc0      	subs	r0, r0, r7
 80012f4:	2864      	cmp	r0, #100	; 0x64
 80012f6:	d984      	bls.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80012f8:	e74d      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80012fa:	f7ff f961 	bl	80005c0 <HAL_GetTick>
 80012fe:	1b80      	subs	r0, r0, r6
 8001300:	2864      	cmp	r0, #100	; 0x64
 8001302:	f67f aecf 	bls.w	80010a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001306:	e746      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001308:	f7ff f95a 	bl	80005c0 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2864      	cmp	r0, #100	; 0x64
 8001310:	f67f af32 	bls.w	8001178 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001314:	e73f      	b.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_TIM_PeriodElapsedCallback>:
 800131c:	4770      	bx	lr

0800131e <HAL_TIM_OC_DelayElapsedCallback>:
 800131e:	4770      	bx	lr

08001320 <HAL_TIM_IC_CaptureCallback>:
 8001320:	4770      	bx	lr

08001322 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001322:	4770      	bx	lr

08001324 <HAL_TIM_TriggerCallback>:
 8001324:	4770      	bx	lr

08001326 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001326:	6803      	ldr	r3, [r0, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	0791      	lsls	r1, r2, #30
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001330:	d50f      	bpl.n	8001352 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	0792      	lsls	r2, r2, #30
 8001336:	d50c      	bpl.n	8001352 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001338:	f06f 0202 	mvn.w	r2, #2
 800133c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800133e:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001340:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001342:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001344:	0799      	lsls	r1, r3, #30
 8001346:	f000 8085 	beq.w	8001454 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800134a:	f7ff ffe9 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800134e:	2300      	movs	r3, #0
 8001350:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	0752      	lsls	r2, r2, #29
 8001358:	d510      	bpl.n	800137c <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	0750      	lsls	r0, r2, #29
 800135e:	d50d      	bpl.n	800137c <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001360:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001364:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001368:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800136a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800136c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800136e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001372:	d075      	beq.n	8001460 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001374:	f7ff ffd4 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001378:	2300      	movs	r3, #0
 800137a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	0711      	lsls	r1, r2, #28
 8001382:	d50f      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	0712      	lsls	r2, r2, #28
 8001388:	d50c      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800138a:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800138e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001392:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001394:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001396:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001398:	079b      	lsls	r3, r3, #30
 800139a:	d067      	beq.n	800146c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800139c:	f7ff ffc0 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013a0:	2300      	movs	r3, #0
 80013a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	06d0      	lsls	r0, r2, #27
 80013aa:	d510      	bpl.n	80013ce <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	06d1      	lsls	r1, r2, #27
 80013b0:	d50d      	bpl.n	80013ce <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013b2:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013ba:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80013c4:	d058      	beq.n	8001478 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80013c6:	f7ff ffab 	bl	8001320 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ca:	2300      	movs	r3, #0
 80013cc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	07d2      	lsls	r2, r2, #31
 80013d4:	d508      	bpl.n	80013e8 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	07d0      	lsls	r0, r2, #31
 80013da:	d505      	bpl.n	80013e8 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013dc:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013e4:	f7ff ff9a 	bl	800131c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	0611      	lsls	r1, r2, #24
 80013ee:	d508      	bpl.n	8001402 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	0612      	lsls	r2, r2, #24
 80013f4:	d505      	bpl.n	8001402 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013fe:	f000 f98e 	bl	800171e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	05d0      	lsls	r0, r2, #23
 8001408:	d508      	bpl.n	800141c <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	0611      	lsls	r1, r2, #24
 800140e:	d505      	bpl.n	800141c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001410:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001414:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001416:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001418:	f000 f982 	bl	8001720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	0652      	lsls	r2, r2, #25
 8001422:	d508      	bpl.n	8001436 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	0650      	lsls	r0, r2, #25
 8001428:	d505      	bpl.n	8001436 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800142a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800142e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001430:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001432:	f7ff ff77 	bl	8001324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	0691      	lsls	r1, r2, #26
 800143c:	d522      	bpl.n	8001484 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	0692      	lsls	r2, r2, #26
 8001442:	d51f      	bpl.n	8001484 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001444:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001448:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800144a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800144c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001450:	f000 b964 	b.w	800171c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001454:	f7ff ff63 	bl	800131e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ff62 	bl	8001322 <HAL_TIM_PWM_PulseFinishedCallback>
 800145e:	e776      	b.n	800134e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001460:	f7ff ff5d 	bl	800131e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001464:	4620      	mov	r0, r4
 8001466:	f7ff ff5c 	bl	8001322 <HAL_TIM_PWM_PulseFinishedCallback>
 800146a:	e785      	b.n	8001378 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800146c:	f7ff ff57 	bl	800131e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff ff56 	bl	8001322 <HAL_TIM_PWM_PulseFinishedCallback>
 8001476:	e793      	b.n	80013a0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001478:	f7ff ff51 	bl	800131e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff50 	bl	8001322 <HAL_TIM_PWM_PulseFinishedCallback>
 8001482:	e7a2      	b.n	80013ca <HAL_TIM_IRQHandler+0xa4>
 8001484:	bd10      	pop	{r4, pc}
	...

08001488 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800148a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800148c:	4290      	cmp	r0, r2
 800148e:	d012      	beq.n	80014b6 <TIM_Base_SetConfig+0x2e>
 8001490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001494:	d00f      	beq.n	80014b6 <TIM_Base_SetConfig+0x2e>
 8001496:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800149a:	4290      	cmp	r0, r2
 800149c:	d00b      	beq.n	80014b6 <TIM_Base_SetConfig+0x2e>
 800149e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a2:	4290      	cmp	r0, r2
 80014a4:	d007      	beq.n	80014b6 <TIM_Base_SetConfig+0x2e>
 80014a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014aa:	4290      	cmp	r0, r2
 80014ac:	d003      	beq.n	80014b6 <TIM_Base_SetConfig+0x2e>
 80014ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014b2:	4290      	cmp	r0, r2
 80014b4:	d119      	bne.n	80014ea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80014b6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <TIM_Base_SetConfig+0xc4>)
 80014c0:	4290      	cmp	r0, r2
 80014c2:	d029      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014c8:	d026      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80014ce:	4290      	cmp	r0, r2
 80014d0:	d022      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d6:	4290      	cmp	r0, r2
 80014d8:	d01e      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014de:	4290      	cmp	r0, r2
 80014e0:	d01a      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014e6:	4290      	cmp	r0, r2
 80014e8:	d016      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014ea:	4a19      	ldr	r2, [pc, #100]	; (8001550 <TIM_Base_SetConfig+0xc8>)
 80014ec:	4290      	cmp	r0, r2
 80014ee:	d013      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f4:	4290      	cmp	r0, r2
 80014f6:	d00f      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 80014f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014fc:	4290      	cmp	r0, r2
 80014fe:	d00b      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 8001500:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001504:	4290      	cmp	r0, r2
 8001506:	d007      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 8001508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800150c:	4290      	cmp	r0, r2
 800150e:	d003      	beq.n	8001518 <TIM_Base_SetConfig+0x90>
 8001510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001514:	4290      	cmp	r0, r2
 8001516:	d103      	bne.n	8001520 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800151c:	68ca      	ldr	r2, [r1, #12]
 800151e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001520:	694a      	ldr	r2, [r1, #20]
 8001522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001526:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001528:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800152a:	688b      	ldr	r3, [r1, #8]
 800152c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800152e:	680b      	ldr	r3, [r1, #0]
 8001530:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <TIM_Base_SetConfig+0xc4>)
 8001534:	4298      	cmp	r0, r3
 8001536:	d003      	beq.n	8001540 <TIM_Base_SetConfig+0xb8>
 8001538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800153c:	4298      	cmp	r0, r3
 800153e:	d101      	bne.n	8001544 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001540:	690b      	ldr	r3, [r1, #16]
 8001542:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001544:	2301      	movs	r3, #1
 8001546:	6143      	str	r3, [r0, #20]
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40010000 	.word	0x40010000
 8001550:	40014000 	.word	0x40014000

08001554 <HAL_TIM_Base_Init>:
{
 8001554:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001556:	4604      	mov	r4, r0
 8001558:	b1a0      	cbz	r0, 8001584 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800155a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800155e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001562:	b91b      	cbnz	r3, 800156c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001564:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001568:	f000 fd70 	bl	800204c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800156e:	6820      	ldr	r0, [r4, #0]
 8001570:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001572:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001576:	f7ff ff87 	bl	8001488 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800157a:	2301      	movs	r3, #1
  return HAL_OK;
 800157c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800157e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001582:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
}
 8001586:	bd10      	pop	{r4, pc}

08001588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001588:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800158a:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800158c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800158e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001592:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001596:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001598:	6083      	str	r3, [r0, #8]
 800159a:	bd10      	pop	{r4, pc}

0800159c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800159c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015a0:	2b01      	cmp	r3, #1
{
 80015a2:	b570      	push	{r4, r5, r6, lr}
 80015a4:	4604      	mov	r4, r0
 80015a6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80015aa:	d017      	beq.n	80015dc <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80015b0:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80015b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80015b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80015b8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_TIM_ConfigClockSource+0x124>)
 80015bc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80015be:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80015c0:	680b      	ldr	r3, [r1, #0]
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d065      	beq.n	8001692 <HAL_TIM_ConfigClockSource+0xf6>
 80015c6:	d815      	bhi.n	80015f4 <HAL_TIM_ConfigClockSource+0x58>
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d00c      	beq.n	80015e6 <HAL_TIM_ConfigClockSource+0x4a>
 80015cc:	d807      	bhi.n	80015de <HAL_TIM_ConfigClockSource+0x42>
 80015ce:	b153      	cbz	r3, 80015e6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80015d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80015d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d001      	beq.n	80015e6 <HAL_TIM_ConfigClockSource+0x4a>
 80015e2:	2b30      	cmp	r3, #48	; 0x30
 80015e4:	d1f4      	bne.n	80015d0 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80015e6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015e8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80015ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015f0:	4313      	orrs	r3, r2
 80015f2:	e01a      	b.n	800162a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d034      	beq.n	8001662 <HAL_TIM_ConfigClockSource+0xc6>
 80015f8:	d819      	bhi.n	800162e <HAL_TIM_ConfigClockSource+0x92>
 80015fa:	2b50      	cmp	r3, #80	; 0x50
 80015fc:	d1e8      	bne.n	80015d0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015fe:	684a      	ldr	r2, [r1, #4]
 8001600:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001602:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001604:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001606:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800160a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800160e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001610:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001612:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001618:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800161c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800161e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001620:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001626:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800162a:	6083      	str	r3, [r0, #8]
 800162c:	e7d0      	b.n	80015d0 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800162e:	2b70      	cmp	r3, #112	; 0x70
 8001630:	d00c      	beq.n	800164c <HAL_TIM_ConfigClockSource+0xb0>
 8001632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001636:	d1cb      	bne.n	80015d0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8001638:	68cb      	ldr	r3, [r1, #12]
 800163a:	684a      	ldr	r2, [r1, #4]
 800163c:	6889      	ldr	r1, [r1, #8]
 800163e:	f7ff ffa3 	bl	8001588 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164a:	e008      	b.n	800165e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800164c:	68cb      	ldr	r3, [r1, #12]
 800164e:	684a      	ldr	r2, [r1, #4]
 8001650:	6889      	ldr	r1, [r1, #8]
 8001652:	f7ff ff99 	bl	8001588 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800165a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800165e:	6093      	str	r3, [r2, #8]
      break;
 8001660:	e7b6      	b.n	80015d0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001662:	684d      	ldr	r5, [r1, #4]
 8001664:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001666:	6a01      	ldr	r1, [r0, #32]
 8001668:	f021 0110 	bic.w	r1, r1, #16
 800166c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800166e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001670:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001672:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800167a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800167e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001682:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001684:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001686:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800168c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001690:	e7cb      	b.n	800162a <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001692:	684a      	ldr	r2, [r1, #4]
 8001694:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001696:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001698:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800169a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800169e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80016a2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016a4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016a6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016ac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80016b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80016b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80016b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80016be:	e7b4      	b.n	800162a <HAL_TIM_ConfigClockSource+0x8e>
 80016c0:	fffe0088 	.word	0xfffe0088

080016c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f04f 0302 	mov.w	r3, #2
{
 80016ce:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80016d0:	d01f      	beq.n	8001712 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016d2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80016d4:	4d10      	ldr	r5, [pc, #64]	; (8001718 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 80016d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80016da:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80016dc:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80016de:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80016e0:	d003      	beq.n	80016ea <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80016e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016e6:	42aa      	cmp	r2, r5
 80016e8:	d103      	bne.n	80016f2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80016ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80016ee:	684d      	ldr	r5, [r1, #4]
 80016f0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016f2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016f8:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80016fa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016fe:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001700:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001702:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001704:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8001706:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001708:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800170c:	2300      	movs	r3, #0
 800170e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001712:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001714:	bd30      	pop	{r4, r5, pc}
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000

0800171c <HAL_TIMEx_CommutCallback>:
 800171c:	4770      	bx	lr

0800171e <HAL_TIMEx_BreakCallback>:
 800171e:	4770      	bx	lr

08001720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001720:	4770      	bx	lr

08001722 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001722:	6803      	ldr	r3, [r0, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800172a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001734:	2320      	movs	r3, #32
 8001736:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001738:	2300      	movs	r3, #0
 800173a:	6603      	str	r3, [r0, #96]	; 0x60
 800173c:	4770      	bx	lr

0800173e <HAL_UART_TxCpltCallback>:
 800173e:	4770      	bx	lr

08001740 <HAL_UART_ErrorCallback>:
 8001740:	4770      	bx	lr
	...

08001744 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001744:	6803      	ldr	r3, [r0, #0]
 8001746:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001748:	6819      	ldr	r1, [r3, #0]
{
 800174a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 800174c:	0716      	lsls	r6, r2, #28
{
 800174e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001750:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8001752:	d109      	bne.n	8001768 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001754:	0695      	lsls	r5, r2, #26
 8001756:	d563      	bpl.n	8001820 <HAL_UART_IRQHandler+0xdc>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001758:	068e      	lsls	r6, r1, #26
 800175a:	d561      	bpl.n	8001820 <HAL_UART_IRQHandler+0xdc>
      if (huart->RxISR != NULL)
 800175c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_UART_IRQHandler+0x10a>
}
 8001762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001766:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001768:	f015 0001 	ands.w	r0, r5, #1
 800176c:	d102      	bne.n	8001774 <HAL_UART_IRQHandler+0x30>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800176e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001772:	d055      	beq.n	8001820 <HAL_UART_IRQHandler+0xdc>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001774:	07d5      	lsls	r5, r2, #31
 8001776:	d507      	bpl.n	8001788 <HAL_UART_IRQHandler+0x44>
 8001778:	05ce      	lsls	r6, r1, #23
 800177a:	d505      	bpl.n	8001788 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800177c:	2501      	movs	r5, #1
 800177e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001780:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001782:	f045 0501 	orr.w	r5, r5, #1
 8001786:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001788:	0795      	lsls	r5, r2, #30
 800178a:	d506      	bpl.n	800179a <HAL_UART_IRQHandler+0x56>
 800178c:	b128      	cbz	r0, 800179a <HAL_UART_IRQHandler+0x56>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800178e:	2502      	movs	r5, #2
 8001790:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001792:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001794:	f045 0504 	orr.w	r5, r5, #4
 8001798:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800179a:	0756      	lsls	r6, r2, #29
 800179c:	d506      	bpl.n	80017ac <HAL_UART_IRQHandler+0x68>
 800179e:	b128      	cbz	r0, 80017ac <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80017a0:	2504      	movs	r5, #4
 80017a2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017a4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80017a6:	f045 0502 	orr.w	r5, r5, #2
 80017aa:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80017ac:	0715      	lsls	r5, r2, #28
 80017ae:	d507      	bpl.n	80017c0 <HAL_UART_IRQHandler+0x7c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80017b0:	068e      	lsls	r6, r1, #26
 80017b2:	d400      	bmi.n	80017b6 <HAL_UART_IRQHandler+0x72>
 80017b4:	b120      	cbz	r0, 80017c0 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80017b6:	2008      	movs	r0, #8
 80017b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017bc:	4303      	orrs	r3, r0
 80017be:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d043      	beq.n	800184e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80017c6:	0695      	lsls	r5, r2, #26
 80017c8:	d505      	bpl.n	80017d6 <HAL_UART_IRQHandler+0x92>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80017ca:	0688      	lsls	r0, r1, #26
 80017cc:	d503      	bpl.n	80017d6 <HAL_UART_IRQHandler+0x92>
        if (huart->RxISR != NULL)
 80017ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017d0:	b10b      	cbz	r3, 80017d6 <HAL_UART_IRQHandler+0x92>
          huart->RxISR(huart);
 80017d2:	4620      	mov	r0, r4
 80017d4:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017d6:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 80017d8:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80017da:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017dc:	6892      	ldr	r2, [r2, #8]
 80017de:	0651      	lsls	r1, r2, #25
 80017e0:	d402      	bmi.n	80017e8 <HAL_UART_IRQHandler+0xa4>
 80017e2:	f015 0508 	ands.w	r5, r5, #8
 80017e6:	d017      	beq.n	8001818 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 80017e8:	f7ff ff9b 	bl	8001722 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	0652      	lsls	r2, r2, #25
 80017f2:	d50d      	bpl.n	8001810 <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017f4:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80017f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017fc:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80017fe:	b138      	cbz	r0, 8001810 <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_UART_IRQHandler+0x10c>)
 8001802:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001804:	f7fe ff62 	bl	80006cc <HAL_DMA_Abort_IT>
 8001808:	b308      	cbz	r0, 800184e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800180a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800180c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800180e:	e7a8      	b.n	8001762 <HAL_UART_IRQHandler+0x1e>
            HAL_UART_ErrorCallback(huart);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff ff95 	bl	8001740 <HAL_UART_ErrorCallback>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001818:	f7ff ff92 	bl	8001740 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181c:	67e5      	str	r5, [r4, #124]	; 0x7c
 800181e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001820:	0616      	lsls	r6, r2, #24
 8001822:	d505      	bpl.n	8001830 <HAL_UART_IRQHandler+0xec>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001824:	060d      	lsls	r5, r1, #24
 8001826:	d503      	bpl.n	8001830 <HAL_UART_IRQHandler+0xec>
    if (huart->TxISR != NULL)
 8001828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800182a:	b183      	cbz	r3, 800184e <HAL_UART_IRQHandler+0x10a>
      huart->TxISR(huart);
 800182c:	4620      	mov	r0, r4
 800182e:	e798      	b.n	8001762 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001830:	0650      	lsls	r0, r2, #25
 8001832:	d50c      	bpl.n	800184e <HAL_UART_IRQHandler+0x10a>
 8001834:	064a      	lsls	r2, r1, #25
 8001836:	d50a      	bpl.n	800184e <HAL_UART_IRQHandler+0x10a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001838:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800183a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800183c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001840:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001842:	2320      	movs	r3, #32
 8001844:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800184a:	f7ff ff78 	bl	800173e <HAL_UART_TxCpltCallback>
 800184e:	bd70      	pop	{r4, r5, r6, pc}
 8001850:	08001855 	.word	0x08001855

08001854 <UART_DMAAbortOnError>:
{
 8001854:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001856:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800185e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001862:	f7ff ff6d 	bl	8001740 <HAL_UART_ErrorCallback>
 8001866:	bd08      	pop	{r3, pc}

08001868 <UART_SetConfig>:
{
 8001868:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800186a:	69c2      	ldr	r2, [r0, #28]
{
 800186c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800186e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001870:	6881      	ldr	r1, [r0, #8]
 8001872:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001874:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001876:	4301      	orrs	r1, r0
 8001878:	6960      	ldr	r0, [r4, #20]
 800187a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800187c:	4890      	ldr	r0, [pc, #576]	; (8001ac0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800187e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001880:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 8001882:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001884:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001886:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001888:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001890:	4301      	orrs	r1, r0
 8001892:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001894:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001896:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001898:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800189a:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800189e:	4301      	orrs	r1, r0
 80018a0:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a2:	4988      	ldr	r1, [pc, #544]	; (8001ac4 <UART_SetConfig+0x25c>)
 80018a4:	428b      	cmp	r3, r1
 80018a6:	d117      	bne.n	80018d8 <UART_SetConfig+0x70>
 80018a8:	4b87      	ldr	r3, [pc, #540]	; (8001ac8 <UART_SetConfig+0x260>)
 80018aa:	4988      	ldr	r1, [pc, #544]	; (8001acc <UART_SetConfig+0x264>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	d129      	bne.n	8001910 <UART_SetConfig+0xa8>
    switch (clocksource)
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 809d 	bhi.w	80019fc <UART_SetConfig+0x194>
 80018c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80018c6:	008c      	.short	0x008c
 80018c8:	00ee00e8 	.word	0x00ee00e8
 80018cc:	00fa009b 	.word	0x00fa009b
 80018d0:	009b009b 	.word	0x009b009b
 80018d4:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d8:	497d      	ldr	r1, [pc, #500]	; (8001ad0 <UART_SetConfig+0x268>)
 80018da:	428b      	cmp	r3, r1
 80018dc:	d106      	bne.n	80018ec <UART_SetConfig+0x84>
 80018de:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <UART_SetConfig+0x260>)
 80018e0:	497c      	ldr	r1, [pc, #496]	; (8001ad4 <UART_SetConfig+0x26c>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	e7e3      	b.n	80018b4 <UART_SetConfig+0x4c>
 80018ec:	497a      	ldr	r1, [pc, #488]	; (8001ad8 <UART_SetConfig+0x270>)
 80018ee:	428b      	cmp	r3, r1
 80018f0:	d11d      	bne.n	800192e <UART_SetConfig+0xc6>
 80018f2:	4b75      	ldr	r3, [pc, #468]	; (8001ac8 <UART_SetConfig+0x260>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	f000 80d9 	beq.w	8001ab4 <UART_SetConfig+0x24c>
 8001902:	d80e      	bhi.n	8001922 <UART_SetConfig+0xba>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d067      	beq.n	80019d8 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001908:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800190c:	d076      	beq.n	80019fc <UART_SetConfig+0x194>
 800190e:	2310      	movs	r3, #16
    switch (clocksource)
 8001910:	2b08      	cmp	r3, #8
 8001912:	d873      	bhi.n	80019fc <UART_SetConfig+0x194>
 8001914:	e8df f003 	tbb	[pc, r3]
 8001918:	72a29f99 	.word	0x72a29f99
 800191c:	727272b4 	.word	0x727272b4
 8001920:	b7          	.byte	0xb7
 8001921:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001922:	2b20      	cmp	r3, #32
 8001924:	f000 80ba 	beq.w	8001a9c <UART_SetConfig+0x234>
 8001928:	2b30      	cmp	r3, #48	; 0x30
 800192a:	d03f      	beq.n	80019ac <UART_SetConfig+0x144>
 800192c:	e7ec      	b.n	8001908 <UART_SetConfig+0xa0>
 800192e:	496b      	ldr	r1, [pc, #428]	; (8001adc <UART_SetConfig+0x274>)
 8001930:	428b      	cmp	r3, r1
 8001932:	d10d      	bne.n	8001950 <UART_SetConfig+0xe8>
 8001934:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <UART_SetConfig+0x260>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800193e:	2b40      	cmp	r3, #64	; 0x40
 8001940:	f000 80b8 	beq.w	8001ab4 <UART_SetConfig+0x24c>
 8001944:	d9de      	bls.n	8001904 <UART_SetConfig+0x9c>
 8001946:	2b80      	cmp	r3, #128	; 0x80
 8001948:	f000 80a8 	beq.w	8001a9c <UART_SetConfig+0x234>
 800194c:	2bc0      	cmp	r3, #192	; 0xc0
 800194e:	e7ec      	b.n	800192a <UART_SetConfig+0xc2>
 8001950:	4963      	ldr	r1, [pc, #396]	; (8001ae0 <UART_SetConfig+0x278>)
 8001952:	428b      	cmp	r3, r1
 8001954:	d110      	bne.n	8001978 <UART_SetConfig+0x110>
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <UART_SetConfig+0x260>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001964:	f000 80a6 	beq.w	8001ab4 <UART_SetConfig+0x24c>
 8001968:	d9cc      	bls.n	8001904 <UART_SetConfig+0x9c>
 800196a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196e:	f000 8095 	beq.w	8001a9c <UART_SetConfig+0x234>
 8001972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001976:	e7d8      	b.n	800192a <UART_SetConfig+0xc2>
 8001978:	495a      	ldr	r1, [pc, #360]	; (8001ae4 <UART_SetConfig+0x27c>)
 800197a:	428b      	cmp	r3, r1
 800197c:	d11e      	bne.n	80019bc <UART_SetConfig+0x154>
 800197e:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <UART_SetConfig+0x260>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	f000 8092 	beq.w	8001ab4 <UART_SetConfig+0x24c>
 8001990:	d806      	bhi.n	80019a0 <UART_SetConfig+0x138>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d07c      	beq.n	8001a90 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001996:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800199a:	d12f      	bne.n	80019fc <UART_SetConfig+0x194>
 800199c:	2310      	movs	r3, #16
 800199e:	e78d      	b.n	80018bc <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a4:	d07a      	beq.n	8001a9c <UART_SetConfig+0x234>
 80019a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019aa:	d1f4      	bne.n	8001996 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019b0:	d169      	bne.n	8001a86 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019b2:	6863      	ldr	r3, [r4, #4]
 80019b4:	0858      	lsrs	r0, r3, #1
 80019b6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80019ba:	e078      	b.n	8001aae <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019bc:	494a      	ldr	r1, [pc, #296]	; (8001ae8 <UART_SetConfig+0x280>)
 80019be:	428b      	cmp	r3, r1
 80019c0:	d124      	bne.n	8001a0c <UART_SetConfig+0x1a4>
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <UART_SetConfig+0x260>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80019cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d0:	d070      	beq.n	8001ab4 <UART_SetConfig+0x24c>
 80019d2:	d815      	bhi.n	8001a00 <UART_SetConfig+0x198>
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1de      	bne.n	8001996 <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019dc:	d135      	bne.n	8001a4a <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019de:	f7ff f9cf 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019e2:	6862      	ldr	r2, [r4, #4]
 80019e4:	0853      	lsrs	r3, r2, #1
 80019e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80019ea:	fbb0 f0f2 	udiv	r0, r0, r2
 80019ee:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80019f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80019f4:	f1a0 0210 	sub.w	r2, r0, #16
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d91a      	bls.n	8001a32 <UART_SetConfig+0x1ca>
      ret = HAL_ERROR;
 80019fc:	2001      	movs	r0, #1
 80019fe:	e020      	b.n	8001a42 <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a04:	d04a      	beq.n	8001a9c <UART_SetConfig+0x234>
 8001a06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a0a:	e7ce      	b.n	80019aa <UART_SetConfig+0x142>
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <UART_SetConfig+0x284>)
 8001a0e:	428b      	cmp	r3, r1
 8001a10:	d1f4      	bne.n	80019fc <UART_SetConfig+0x194>
 8001a12:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <UART_SetConfig+0x260>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a20:	d048      	beq.n	8001ab4 <UART_SetConfig+0x24c>
 8001a22:	f67f af6f 	bls.w	8001904 <UART_SetConfig+0x9c>
 8001a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2a:	d037      	beq.n	8001a9c <UART_SetConfig+0x234>
 8001a2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a30:	e77b      	b.n	800192a <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a32:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a36:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	4318      	orrs	r0, r3
 8001a3e:	60d0      	str	r0, [r2, #12]
 8001a40:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a46:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001a48:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a4a:	f7ff f999 	bl	8000d80 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a4e:	6863      	ldr	r3, [r4, #4]
 8001a50:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001a54:	e008      	b.n	8001a68 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a56:	f7ff f9a3 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
 8001a5a:	e7f8      	b.n	8001a4e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	0858      	lsrs	r0, r3, #1
 8001a60:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001a64:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a68:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a6c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a6e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001a72:	f1a0 0210 	sub.w	r2, r0, #16
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d8c0      	bhi.n	80019fc <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	60d8      	str	r0, [r3, #12]
 8001a7e:	e7df      	b.n	8001a40 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a80:	f7ff f8ba 	bl	8000bf8 <HAL_RCC_GetSysClockFreq>
 8001a84:	e7e3      	b.n	8001a4e <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	0858      	lsrs	r0, r3, #1
 8001a8a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001a8e:	e7eb      	b.n	8001a68 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a94:	d1df      	bne.n	8001a56 <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a96:	f7ff f983 	bl	8000da0 <HAL_RCC_GetPCLK2Freq>
 8001a9a:	e7a2      	b.n	80019e2 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001aa0:	d1dc      	bne.n	8001a5c <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001aa2:	6863      	ldr	r3, [r4, #4]
 8001aa4:	0858      	lsrs	r0, r3, #1
 8001aa6:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001aaa:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001aae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ab2:	e79c      	b.n	80019ee <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ab8:	d1e2      	bne.n	8001a80 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001aba:	f7ff f89d 	bl	8000bf8 <HAL_RCC_GetSysClockFreq>
 8001abe:	e790      	b.n	80019e2 <UART_SetConfig+0x17a>
 8001ac0:	efff69f3 	.word	0xefff69f3
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08002234 	.word	0x08002234
 8001ad0:	40004400 	.word	0x40004400
 8001ad4:	08002238 	.word	0x08002238
 8001ad8:	40004800 	.word	0x40004800
 8001adc:	40004c00 	.word	0x40004c00
 8001ae0:	40005000 	.word	0x40005000
 8001ae4:	40011400 	.word	0x40011400
 8001ae8:	40007800 	.word	0x40007800
 8001aec:	40007c00 	.word	0x40007c00

08001af0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001af0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001af2:	07da      	lsls	r2, r3, #31
{
 8001af4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001af6:	d506      	bpl.n	8001b06 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001af8:	6801      	ldr	r1, [r0, #0]
 8001afa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001afc:	684a      	ldr	r2, [r1, #4]
 8001afe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b02:	4322      	orrs	r2, r4
 8001b04:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b06:	079c      	lsls	r4, r3, #30
 8001b08:	d506      	bpl.n	8001b18 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b0a:	6801      	ldr	r1, [r0, #0]
 8001b0c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b0e:	684a      	ldr	r2, [r1, #4]
 8001b10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b14:	4322      	orrs	r2, r4
 8001b16:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b18:	0759      	lsls	r1, r3, #29
 8001b1a:	d506      	bpl.n	8001b2a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b1c:	6801      	ldr	r1, [r0, #0]
 8001b1e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b20:	684a      	ldr	r2, [r1, #4]
 8001b22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b26:	4322      	orrs	r2, r4
 8001b28:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b2a:	071a      	lsls	r2, r3, #28
 8001b2c:	d506      	bpl.n	8001b3c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b32:	684a      	ldr	r2, [r1, #4]
 8001b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b38:	4322      	orrs	r2, r4
 8001b3a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b3c:	06dc      	lsls	r4, r3, #27
 8001b3e:	d506      	bpl.n	8001b4e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b40:	6801      	ldr	r1, [r0, #0]
 8001b42:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b44:	688a      	ldr	r2, [r1, #8]
 8001b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b4a:	4322      	orrs	r2, r4
 8001b4c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b4e:	0699      	lsls	r1, r3, #26
 8001b50:	d506      	bpl.n	8001b60 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b52:	6801      	ldr	r1, [r0, #0]
 8001b54:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b56:	688a      	ldr	r2, [r1, #8]
 8001b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b5c:	4322      	orrs	r2, r4
 8001b5e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b60:	065a      	lsls	r2, r3, #25
 8001b62:	d510      	bpl.n	8001b86 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b64:	6801      	ldr	r1, [r0, #0]
 8001b66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b68:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b6a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b72:	ea42 0204 	orr.w	r2, r2, r4
 8001b76:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b78:	d105      	bne.n	8001b86 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b7a:	684a      	ldr	r2, [r1, #4]
 8001b7c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b7e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b82:	4322      	orrs	r2, r4
 8001b84:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	d506      	bpl.n	8001b98 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b8a:	6802      	ldr	r2, [r0, #0]
 8001b8c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b8e:	6853      	ldr	r3, [r2, #4]
 8001b90:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6053      	str	r3, [r2, #4]
 8001b98:	bd10      	pop	{r4, pc}

08001b9a <UART_WaitOnFlagUntilTimeout>:
{
 8001b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b9e:	9d06      	ldr	r5, [sp, #24]
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460f      	mov	r7, r1
 8001ba4:	4616      	mov	r6, r2
 8001ba6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba8:	6821      	ldr	r1, [r4, #0]
 8001baa:	69ca      	ldr	r2, [r1, #28]
 8001bac:	ea37 0302 	bics.w	r3, r7, r2
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2201      	moveq	r2, #1
 8001bb4:	2200      	movne	r2, #0
 8001bb6:	42b2      	cmp	r2, r6
 8001bb8:	d002      	beq.n	8001bc0 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001bba:	2000      	movs	r0, #0
}
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	1c6b      	adds	r3, r5, #1
 8001bc2:	d0f2      	beq.n	8001baa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc4:	f7fe fcfc 	bl	80005c0 <HAL_GetTick>
 8001bc8:	eba0 0008 	sub.w	r0, r0, r8
 8001bcc:	4285      	cmp	r5, r0
 8001bce:	d301      	bcc.n	8001bd4 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bd4:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001bd6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bde:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001be8:	2320      	movs	r3, #32
 8001bea:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001bec:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bf8 <HAL_UART_Transmit>:
{
 8001bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001bfe:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001c00:	4604      	mov	r4, r0
 8001c02:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001c04:	2b20      	cmp	r3, #32
{
 8001c06:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c08:	d14b      	bne.n	8001ca2 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	2900      	cmp	r1, #0
 8001c0c:	d047      	beq.n	8001c9e <HAL_UART_Transmit+0xa6>
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d045      	beq.n	8001c9e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001c12:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d043      	beq.n	8001ca2 <HAL_UART_Transmit+0xaa>
 8001c1a:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001c1e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c22:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c24:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c26:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001c28:	f7fe fcca 	bl	80005c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001c2e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8001c30:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001c38:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3c:	d103      	bne.n	8001c46 <HAL_UART_Transmit+0x4e>
 8001c3e:	6923      	ldr	r3, [r4, #16]
 8001c40:	b90b      	cbnz	r3, 8001c46 <HAL_UART_Transmit+0x4e>
 8001c42:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001c44:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001c46:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001c50:	b292      	uxth	r2, r2
 8001c52:	b94a      	cbnz	r2, 8001c68 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c54:	2140      	movs	r1, #64	; 0x40
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ff9f 	bl	8001b9a <UART_WaitOnFlagUntilTimeout>
 8001c5c:	b950      	cbnz	r0, 8001c74 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8001c5e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001c60:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001c64:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8001c66:	e006      	b.n	8001c76 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff ff94 	bl	8001b9a <UART_WaitOnFlagUntilTimeout>
 8001c72:	b118      	cbz	r0, 8001c7c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001c74:	2003      	movs	r0, #3
}
 8001c76:	b003      	add	sp, #12
 8001c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c7c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001c7e:	b95e      	cbnz	r6, 8001c98 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c80:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001c8a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001c96:	e7d6      	b.n	8001c46 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c98:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001c9c:	e7f4      	b.n	8001c88 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	e7e9      	b.n	8001c76 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	e7e7      	b.n	8001c76 <HAL_UART_Transmit+0x7e>

08001ca6 <UART_CheckIdleState>:
{
 8001ca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca8:	2500      	movs	r5, #0
{
 8001caa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cac:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001cae:	f7fe fc87 	bl	80005c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cb2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001cb4:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	0712      	lsls	r2, r2, #28
 8001cba:	d407      	bmi.n	8001ccc <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001cbe:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001cc0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001cc2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001cc8:	b003      	add	sp, #12
 8001cca:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ccc:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001cd0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	9200      	str	r2, [sp, #0]
 8001cd8:	462a      	mov	r2, r5
 8001cda:	f7ff ff5e 	bl	8001b9a <UART_WaitOnFlagUntilTimeout>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d0ec      	beq.n	8001cbc <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	e7f0      	b.n	8001cc8 <UART_CheckIdleState+0x22>

08001ce6 <HAL_UART_Init>:
{
 8001ce6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001ce8:	4604      	mov	r4, r0
 8001cea:	b340      	cbz	r0, 8001d3e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001cec:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001cee:	b91b      	cbnz	r3, 8001cf8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001cf0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001cf4:	f000 f9c6 	bl	8002084 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001cf8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cfa:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cfc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001cfe:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d08:	f7ff fdae 	bl	8001868 <UART_SetConfig>
 8001d0c:	2801      	cmp	r0, #1
 8001d0e:	d016      	beq.n	8001d3e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d12:	b113      	cbz	r3, 8001d1a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff feeb 	bl	8001af0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001d1c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d2c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
}
 8001d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001d38:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001d3a:	f7ff bfb4 	b.w	8001ca6 <UART_CheckIdleState>
}
 8001d3e:	2001      	movs	r0, #1
 8001d40:	bd10      	pop	{r4, pc}
	...

08001d44 <Send_Text>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Send_Text(uint8_t *text)
{
 8001d44:	b508      	push	{r3, lr}

	HAL_UART_Transmit(&huart2,text, sizeof(text),1000);
 8001d46:	4601      	mov	r1, r0
 8001d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <Send_Text+0x1c>)
 8001d50:	f7ff ff52 	bl	8001bf8 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8001d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(500);
 8001d5c:	f7fe bc36 	b.w	80005cc <HAL_Delay>
 8001d60:	20000084 	.word	0x20000084

08001d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d64:	b510      	push	{r4, lr}
 8001d66:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d68:	2234      	movs	r2, #52	; 0x34
 8001d6a:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d6c:	2400      	movs	r4, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	a807      	add	r0, sp, #28
 8001d70:	f000 fa4c 	bl	800220c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d74:	2214      	movs	r2, #20
 8001d76:	2100      	movs	r1, #0
 8001d78:	a802      	add	r0, sp, #8
 8001d7a:	f000 fa47 	bl	800220c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2290      	movs	r2, #144	; 0x90
 8001d82:	a814      	add	r0, sp, #80	; 0x50
 8001d84:	f000 fa42 	bl	800220c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <SystemClock_Config+0x8c>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8a:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dae:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db8:	2302      	movs	r3, #2
 8001dba:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	f7fe fd84 	bl	80008d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dca:	4621      	mov	r1, r4
 8001dcc:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dce:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dda:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ddc:	f7fe ff32 	bl	8000c44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001de0:	2380      	movs	r3, #128	; 0x80
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de2:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001de4:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001de6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de8:	f7fe ffea 	bl	8000dc0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001dec:	b038      	add	sp, #224	; 0xe0
 8001dee:	bd10      	pop	{r4, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <main>:
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2400      	movs	r4, #0
  HAL_Init();
 8001dfe:	f7fe fbc7 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e02:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  SystemClock_Config();
 8001e06:	f7ff ffad 	bl	8001d64 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	2214      	movs	r2, #20
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a809      	add	r0, sp, #36	; 0x24
 8001e10:	f000 f9fc 	bl	800220c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e14:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <main+0x1f8>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e16:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e1a:	4876      	ldr	r0, [pc, #472]	; (8001ff4 <main+0x1fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2503      	movs	r5, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e22:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e24:	f042 0204 	orr.w	r2, r2, #4
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e28:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e30:	f002 0204 	and.w	r2, r2, #4
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e46:	9201      	str	r2, [sp, #4]
 8001e48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
 8001e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e54:	f002 0201 	and.w	r2, r2, #1
 8001e58:	9202      	str	r2, [sp, #8]
 8001e5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5e:	f042 0202 	orr.w	r2, r2, #2
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
 8001e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e66:	f002 0202 	and.w	r2, r2, #2
 8001e6a:	9203      	str	r2, [sp, #12]
 8001e6c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e70:	f042 0208 	orr.w	r2, r2, #8
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
 8001e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e78:	f002 0208 	and.w	r2, r2, #8
 8001e7c:	9204      	str	r2, [sp, #16]
 8001e7e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	9305      	str	r3, [sp, #20]
 8001e92:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e94:	f7fe fd16 	bl	80008c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	4856      	ldr	r0, [pc, #344]	; (8001ff8 <main+0x200>)
 8001e9e:	f7fe fd11 	bl	80008c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea2:	4b56      	ldr	r3, [pc, #344]	; (8001ffc <main+0x204>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	a909      	add	r1, sp, #36	; 0x24
 8001ea6:	4856      	ldr	r0, [pc, #344]	; (8002000 <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001eac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f7fe fc1e 	bl	80006f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001eb4:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb6:	a909      	add	r1, sp, #36	; 0x24
 8001eb8:	4851      	ldr	r0, [pc, #324]	; (8002000 <main+0x208>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001eba:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec2:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	f7fe fc14 	bl	80006f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ec8:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	a909      	add	r1, sp, #36	; 0x24
 8001ecc:	484d      	ldr	r0, [pc, #308]	; (8002004 <main+0x20c>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ece:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed6:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f7fe fc0a 	bl	80006f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001edc:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	a909      	add	r1, sp, #36	; 0x24
 8001ee2:	4844      	ldr	r0, [pc, #272]	; (8001ff4 <main+0x1fc>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ee4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f7fe fbff 	bl	80006f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	a909      	add	r1, sp, #36	; 0x24
 8001ef4:	483f      	ldr	r0, [pc, #252]	; (8001ff4 <main+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001efa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f00:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f7fe fbf5 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f06:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	a909      	add	r1, sp, #36	; 0x24
 8001f0c:	483e      	ldr	r0, [pc, #248]	; (8002008 <main+0x210>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f0e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f10:	2307      	movs	r3, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f16:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1a:	f7fe fbe9 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f1e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f20:	a909      	add	r1, sp, #36	; 0x24
 8001f22:	4835      	ldr	r0, [pc, #212]	; (8001ff8 <main+0x200>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f24:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f7fe fbdf 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f32:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f34:	a909      	add	r1, sp, #36	; 0x24
 8001f36:	4830      	ldr	r0, [pc, #192]	; (8001ff8 <main+0x200>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f38:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f7fe fbd7 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f42:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	a909      	add	r1, sp, #36	; 0x24
 8001f48:	482e      	ldr	r0, [pc, #184]	; (8002004 <main+0x20c>)
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f4a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f4c:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f52:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f7fe fbcb 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	a909      	add	r1, sp, #36	; 0x24
 8001f60:	4828      	ldr	r0, [pc, #160]	; (8002004 <main+0x20c>)
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f62:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f7fe fbc2 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f70:	a909      	add	r1, sp, #36	; 0x24
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <main+0x200>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f74:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	960a      	str	r6, [sp, #40]	; 0x28
  htim2.Instance = TIM2;
 8001f7c:	4d23      	ldr	r5, [pc, #140]	; (800200c <main+0x214>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f7e:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f80:	f7fe fbb6 	bl	80006f0 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f84:	2210      	movs	r2, #16
 8001f86:	4621      	mov	r1, r4
 8001f88:	a809      	add	r0, sp, #36	; 0x24
 8001f8a:	f000 f93f 	bl	800220c <memset>
  htim2.Instance = TIM2;
 8001f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f92:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	9406      	str	r4, [sp, #24]
 8001f96:	9407      	str	r4, [sp, #28]
 8001f98:	9408      	str	r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8001f9c:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	61ac      	str	r4, [r5, #24]
  htim2.Init.Prescaler = 0;
 8001fa2:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa6:	f7ff fad5 	bl	8001554 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fae:	a909      	add	r1, sp, #36	; 0x24
 8001fb0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb4:	f7ff faf2 	bl	800159c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fb8:	a906      	add	r1, sp, #24
 8001fba:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc0:	f7ff fb80 	bl	80016c4 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Instance = USART2;
 8001fc4:	4812      	ldr	r0, [pc, #72]	; (8002010 <main+0x218>)
  huart2.Init.BaudRate = 9600;
 8001fc6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <main+0x21c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fcc:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fce:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd8:	6244      	str	r4, [r0, #36]	; 0x24
	  Send_Text(ToSend);
 8001fda:	4c0f      	ldr	r4, [pc, #60]	; (8002018 <main+0x220>)
  huart2.Init.BaudRate = 9600;
 8001fdc:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fe4:	f7ff fe7f 	bl	8001ce6 <HAL_UART_Init>
	  Send_Text(ToSend);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff feab 	bl	8001d44 <Send_Text>
 8001fee:	e7fb      	b.n	8001fe8 <main+0x1f0>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	10110000 	.word	0x10110000
 8002000:	40020800 	.word	0x40020800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020c00 	.word	0x40020c00
 800200c:	20000044 	.word	0x20000044
 8002010:	20000084 	.word	0x20000084
 8002014:	40004400 	.word	0x40004400
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x2c>)
{
 800201e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
 8002028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002044:	b002      	add	sp, #8
 8002046:	4770      	bx	lr
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002052:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002054:	d112      	bne.n	800207c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002056:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800205a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800205c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002068:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002072:	f7fe facf 	bl	8000614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002076:	201c      	movs	r0, #28
 8002078:	f7fe fb04 	bl	8000684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800207c:	b003      	add	sp, #12
 800207e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b510      	push	{r4, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	2214      	movs	r2, #20
 800208c:	2100      	movs	r1, #0
 800208e:	a803      	add	r0, sp, #12
 8002090:	f000 f8bc 	bl	800220c <memset>
  if(huart->Instance==USART2)
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x6c>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d127      	bne.n	80020ec <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800209c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	a903      	add	r1, sp, #12
 80020a2:	4814      	ldr	r0, [pc, #80]	; (80020f4 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
 80020ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	f042 0208 	orr.w	r2, r2, #8
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020c8:	2360      	movs	r3, #96	; 0x60
 80020ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d4:	2307      	movs	r3, #7
 80020d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f7fe fb0a 	bl	80006f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2026      	movs	r0, #38	; 0x26
 80020e0:	4611      	mov	r1, r2
 80020e2:	f7fe fa97 	bl	8000614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020e6:	2026      	movs	r0, #38	; 0x26
 80020e8:	f7fe facc 	bl	8000684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ec:	b008      	add	sp, #32
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	40004400 	.word	0x40004400
 80020f4:	40020c00 	.word	0x40020c00

080020f8 <NMI_Handler>:
 80020f8:	4770      	bx	lr

080020fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler>

08002102 <SVC_Handler>:
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	4770      	bx	lr

08002108 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f7fe ba4e 	b.w	80005a8 <HAL_IncTick>

0800210c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <TIM2_IRQHandler+0x8>)
 800210e:	f7ff b90a 	b.w	8001326 <HAL_TIM_IRQHandler>
 8002112:	bf00      	nop
 8002114:	20000044 	.word	0x20000044

08002118 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <USART2_IRQHandler+0x8>)
 800211a:	f7ff bb13 	b.w	8001744 <HAL_UART_IRQHandler>
 800211e:	bf00      	nop
 8002120:	20000084 	.word	0x20000084

08002124 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	490f      	ldr	r1, [pc, #60]	; (8002164 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002126:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <SystemInit+0x44>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800213e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002146:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800214a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800214c:	4a07      	ldr	r2, [pc, #28]	; (800216c <SystemInit+0x48>)
 800214e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002156:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002158:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800215a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800215e:	608b      	str	r3, [r1, #8]
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	40023800 	.word	0x40023800
 800216c:	24003010 	.word	0x24003010

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002176:	e003      	b.n	8002180 <LoopCopyDataInit>

08002178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800217a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800217c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800217e:	3104      	adds	r1, #4

08002180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002188:	d3f6      	bcc.n	8002178 <CopyDataInit>
  ldr  r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800218c:	e002      	b.n	8002194 <LoopFillZerobss>

0800218e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800218e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002190:	f842 3b04 	str.w	r3, [r2], #4

08002194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002198:	d3f9      	bcc.n	800218e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219a:	f7ff ffc3 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f000 f811 	bl	80021c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff fe29 	bl	8001df8 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80021ac:	08002270 	.word	0x08002270
  ldr  r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021b4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80021b8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80021bc:	20000104 	.word	0x20000104

080021c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC_IRQHandler>
	...

080021c4 <__libc_init_array>:
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	4e0d      	ldr	r6, [pc, #52]	; (80021fc <__libc_init_array+0x38>)
 80021c8:	4c0d      	ldr	r4, [pc, #52]	; (8002200 <__libc_init_array+0x3c>)
 80021ca:	1ba4      	subs	r4, r4, r6
 80021cc:	10a4      	asrs	r4, r4, #2
 80021ce:	2500      	movs	r5, #0
 80021d0:	42a5      	cmp	r5, r4
 80021d2:	d109      	bne.n	80021e8 <__libc_init_array+0x24>
 80021d4:	4e0b      	ldr	r6, [pc, #44]	; (8002204 <__libc_init_array+0x40>)
 80021d6:	4c0c      	ldr	r4, [pc, #48]	; (8002208 <__libc_init_array+0x44>)
 80021d8:	f000 f820 	bl	800221c <_init>
 80021dc:	1ba4      	subs	r4, r4, r6
 80021de:	10a4      	asrs	r4, r4, #2
 80021e0:	2500      	movs	r5, #0
 80021e2:	42a5      	cmp	r5, r4
 80021e4:	d105      	bne.n	80021f2 <__libc_init_array+0x2e>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ec:	4798      	blx	r3
 80021ee:	3501      	adds	r5, #1
 80021f0:	e7ee      	b.n	80021d0 <__libc_init_array+0xc>
 80021f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f6:	4798      	blx	r3
 80021f8:	3501      	adds	r5, #1
 80021fa:	e7f2      	b.n	80021e2 <__libc_init_array+0x1e>
 80021fc:	08002268 	.word	0x08002268
 8002200:	08002268 	.word	0x08002268
 8002204:	08002268 	.word	0x08002268
 8002208:	0800226c 	.word	0x0800226c

0800220c <memset>:
 800220c:	4402      	add	r2, r0
 800220e:	4603      	mov	r3, r0
 8002210:	4293      	cmp	r3, r2
 8002212:	d100      	bne.n	8002216 <memset+0xa>
 8002214:	4770      	bx	lr
 8002216:	f803 1b01 	strb.w	r1, [r3], #1
 800221a:	e7f9      	b.n	8002210 <memset+0x4>

0800221c <_init>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr

08002228 <_fini>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	bf00      	nop
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr
